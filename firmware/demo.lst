MPASM  5.51                          DEMO.ASM   3-23-2016  21:08:21         PAGE  1


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00001 
Warning[215]: Processor superseded by command line.  Verify processor symbol.
                      00002         LIST P=18F25K50
                      00003         #include <p18f25k50.inc>
                      00001         LIST
                      00002 
                      00003 ;==========================================================================
                      00004 ;  MPASM PIC18F25K50 processor include
                      00005 ; 
                      00006 ;  (c) Copyright 1999-2013 Microchip Technology, All rights reserved
                      00007 ;==========================================================================
                      00008 
Message[301]: MESSAGE: (Processor-header file mismatch.  Verify selected processor.)
                      02205         LIST
                      00004         #include <macros.inc>
                      00001 
  00000000            00002 Offset  equ     0x0000
                      00003 
                      00004 #define keyint          PORTB,0         ; key "INT" in
                      00005 #define clk                     LATB,1          ; cathode driver CLOCK
                      00006 #define accscl          LATB,2          ; AUX clock out latch
                      00007 #define accscl.port     PORTB,2         ; AUX clock in port
                      00008 #define accscl.ts       TRISB,2         ; AUX clock TRIS bit
                      00009 #define sdo                     LATB,3          ; cathode driver DATA
                      00010 #define accsda          LATB,4          ; AUX data out latch
                      00011 #define accsda.port     PORTB,4         ; AUX data in port
                      00012 #define accsda.ts       TRISB,4         ; AUX data TRIS bit
                      00013 #define vdd                     LATB,5          ; Vdd ON/OFF switch
                      00014 #define keys            PORTB,6         ; PGC / SW3...6 input
                      00015 #define usbv            PORTC,0         ; USB V detect
                      00016 
                      00017 ;******************************************************************
                      00018 ;       system flags
                      00019 
                      00020 ifz             macro
                      00021         btfsc   STATUS,Z,ACCESS
                      00022                 endm
                      00023 ifnz    macro
                      00024         btfss   STATUS,Z,ACCESS
                      00025                 endm
                      00026 ifc             macro
                      00027         btfsc   STATUS,C,ACCESS
                      00028                 endm
                      00029 ifnc    macro
                      00030         btfss   STATUS,C,ACCESS
                      00031                 endm
                      00032 rcf             macro
                      00033         bcf             STATUS,C,ACCESS
                      00034                 endm
                      00035 scf             macro
                      00036         bsf             STATUS,C,ACCESS
                      00037                 endm
                      00038 
MPASM  5.51                          DEMO.ASM   3-23-2016  21:08:21         PAGE  2


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00039 ;******************************************************************
                      00040 
                      00041 ; macro sync150
                      00042 sync150 macro
                      00043         btfss   Flag,2,ACCESS           ; 150 Hz handshaking sync
                      00044         bra             $-2
                      00045         bcf             Flag,2,ACCESS           ; reset sync flag
                      00046                 endm
                      00047 
                      00048 ; macro sync150x8
                      00049 sync150x8       macro
                      00050         btfss   Flag,1,ACCESS           ; 150x8 Hz handshaking sync
                      00051         bra             $-2
                      00052         bcf             Flag,1,ACCESS           ; reset sync flag
                      00053                 endm
                      00054 
                      00055 ;******************************************************************
                      00056 
                      00057 onebit  macro   bitpos
                      00058         bcf             sdo,ACCESS
                      00059         btfsc   INDF0,bitpos
                      00060         bsf             sdo,ACCESS              ; Transfer "BitMask" state in POSTDEC0 to "sdo" pin
                      00061         bcf             clk,ACCESS              ; ^^^\___       generate "clk" pulse
                      00062         bsf             clk,ACCESS              ; ___/^^^       shift out one bit
                      00063                 endm
                      00064 
                      00065 ;******************************************************************
                      00066 
                      00067 ; macro iorbuf
                      00068 iorbuf  macro   bufaddress
                      00069         movf    Buffer2+bufaddress,w,BANKED
                      00070         iorwf   Buffer+bufaddress,f,BANKED
                      00071                 endm
                      00072 
                      00073 ;******************************************************************
                      00074 
                      00075 ; macro iorbuf3
                      00076 iorbuf3 macro   buf3address
                      00077         movf    Buffer2+buf3address,w,BANKED
                      00078         iorwf   Buffer3+buf3address,f,BANKED
                      00079                 endm
                      00080 
                      00081 ;******************************************************************
                      00082 
                      00083 ; macro overlap
                      00084 overlap macro   overaddress
                      00085         movf    Buffer2+overaddress,w,BANKED
                      00086         andwf   Buffer+overaddress,w,BANKED
                      00087         bnz             ovl.found
                      00088                 endm
                      00089 
                      00090 ;******************************************************************
                      00091 
MPASM  5.51                          DEMO.ASM   3-23-2016  21:08:21         PAGE  3


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00092 ; macro test.new
                      00093 test.new        macro
                      00094         movf    RXpatience,f,access
                      00095 
                      00096 
                      00097                 endm
                      00098 
                      00099 ;******************************************************************
                      00100 
                      00101 serialx2        macro
                      00102         rcf
                      00103         rlcf    RXserial+0,f,access
                      00104         rlcf    RXserial+1,f,access
                      00105         bc              preset.pat                      ; number overflow, ignore it
                      00106                 endm
                      00107 ;******************************************************************
                      00005 
  0000                00006  extern Flag, KeyEdge, BitMask, Rotor0, Rotor1, Rotor2, Rotor3, cont, tx.byte, tx.ascnum
  0000                00007  extern Buffer, Buffer2, BufferPause, rnd, Ma0, Ma1, Ma2, Ma3, Mc0, Mc1, Mc2, Mc3
  0000                00008  extern RXptr, Received, RXpatience, RXFlag, MYserial
                      00009 
                      00010 demo_ram        udata_acs
                      00011 
000000                00012 FlagDemo        res     1       ; bit 0 set = long pause (display only)
                      00013                                         ; bit 1 set = next char immediate (display only)
                      00014                                         ; bit 2 set = showing final result (tetris)
                      00015                                         ; bit 3 set = key action, bit 3 clr = no action or vertical acti
                            on
000001                00016 Inner           res 1   ; inner loop counter (used outside int routine)
000002                00017 Outer           res 1   ; outer loop counter (used outside int routine)
000003                00018 Uniform         res 1   ; 150Hz freerunning uniform counter for timing functions
000004                00019 Tempw           res 1   ; Temporary W storage
000005                00020 Speed           res 1   ; 150Hz divider, global timing
000006                00021 Block           res 1   ; current block number 0 to 6, 0=I, 1=J, 2=L, 3=O, 4=S, 5=Z, 6=T
000007                00022 CurrentBlock res 4      ; bitmapped current block in current angle and current BlockX, bits 7-0
00000B                00023 BlockX          res 1   ; Current block X position, 1 to 8
00000C                00024 BlockY          res 1   ; Current block Y position, 0 (which is -1) to 15 (which is +14)
00000D                00025 BlockA          res 1   ; Current block angle, 0 to 3
00000E                00026 Temp.BlockX res 1       ; Temporary, in case the command was forbidden
00000F                00027 Temp.BlockA res 1       ; Temporary, in case the command was forbidden
000010                00028 Block.count res 1       ; block counter, for speed increasing
000011                00029 Speed.index res 1       ; Speed, 0 = slowest, 15 = fastest
000012                00030 liqflag         res     1       ; bit 0 set = move X, bit 1 set = move Y
000013                00031 Xtest           res     1       ; X pos for test if the pixel is occupied
000014                00032 Ytest           res     1       ; Y pos for test if the pixel is occupied
000015                00033 WhoAmI          res     1       ; Accelerometer Device ID (0x68 or 0xE5, otherwise 0x00)
000016                00034 DispSpeed       res     1       ; Display period (number of display refresh steps between disp scrolls)
000017                00035 DispPtr         res     1       ; Display text low pointer (high pointer is always 6)
000018                00036 ColCount        res     1       ; Display column step counter
000019                00037 Score           res     2       ; Tetris score (binary)
00001B                00038 Bin                     res 2   ; lo,hi: Binary number for bin2bcd conversion
00001D                00039 Bcd                     res     2       ; 7654 tens 3210 ones, 7654 thousands 3210 hundreds: converted B
                            CD number
MPASM  5.51                          DEMO.ASM   3-23-2016  21:08:21         PAGE  4


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

00001F                00040 AccX            res 2   ; Accelerometer X
000021                00041 AccY            res 2   ; Accelerometer Y
000023                00042 AccZ            res 2   ; Accelerometer Z
                      00043 
  00000600            00044 Disp.text       equ     0x600   ; display ASCII 256 chars
                      00045 ;       
  00000000            00046 access  equ     0
  00000001            00047 banked  equ     1
                      00048 
                      00049 democode        code
                      00050 
                      00051 ;*******************************************************************************
                      00052 ;                                               D E M O   F A R M                                       
                                                                    
                      00053 ;*******************************************************************************
                      00054 
000000                00055 demo.farm
000000 9000           00056         bcf             RXFlag,0,access ; disable RX
000002 8A00           00057         bsf             Flag,5,access   ; bit 5 set = Only two steps for key 0, without pause
                      00058 
000004 0E??           00059         movlw   low (inimes)
000006 6EF6           00060         movwf   TBLPTRL
000008 0E??           00061         movlw   high (inimes)
00000A 6EF7           00062         movwf   TBLPTRH
00000C EE?? F0??      00063         lfsr    FSR0,Buffer
000010 EC?? F???      00064         call    print.rom               ; move .16 bytes from TBLPTR to FSR0
000014                00065 test.keys
000014 B200           00066         btfsc   KeyEdge,1,access
000016 EF?? F???      00067         goto    accelerometer
00001A B400           00068         btfsc   KeyEdge,2,access
00001C EF?? F???      00069         goto    display
000020 B800           00070         btfsc   KeyEdge,4,access
000022 EF?? F???      00071         goto    tetris
000026 B600           00072         btfsc   KeyEdge,3,access
000028 EC?? F???      00073         call    id
00002C D???           00074         bra             test.keys
                      00075 
                      00076 ;                                                                                                       
                                                                                    
00002E                00077 move2up                         ; shift buffer2 up
00002E C??? F???      00078         movff   Buffer2+.1,Buffer2+.0
000032 C??? F???      00079         movff   Buffer2+.2,Buffer2+.1
000036 C??? F???      00080         movff   Buffer2+.3,Buffer2+.2
00003A C??? F???      00081         movff   Buffer2+.4,Buffer2+.3
00003E C??? F???      00082         movff   Buffer2+.5,Buffer2+.4
000042 C??? F???      00083         movff   Buffer2+.6,Buffer2+.5
000046 C??? F???      00084         movff   Buffer2+.7,Buffer2+.6
00004A C??? F???      00085         movff   Buffer2+.8,Buffer2+.7
00004E C??? F???      00086         movff   Buffer2+.9,Buffer2+.8
000052 C??? F???      00087         movff   Buffer2+.10,Buffer2+.9
000056 C??? F???      00088         movff   Buffer2+.11,Buffer2+.10
00005A C??? F???      00089         movff   Buffer2+.12,Buffer2+.11
00005E C??? F???      00090         movff   Buffer2+.13,Buffer2+.12
MPASM  5.51                          DEMO.ASM   3-23-2016  21:08:21         PAGE  5


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

000062 C??? F???      00091         movff   Buffer2+.14,Buffer2+.13
000066 C??? F???      00092         movff   Buffer2+.15,Buffer2+.14
00006A 0600           00093         decf    ColCount,f,access       ; decrement shift count
00006C 0012           00094         return
                      00095 
                      00096 ;                                                                                                       
                                                                                    
00006E                00097 print.rom                                       ; move .16 bytes from TBLPTR to FSR0
00006E 0E10           00098         movlw   .16
000070                00099 go.pr
000070 0009           00100         tblrd*+
000072 CFF5 FFEE      00101         movff   TABLAT,POSTINC0
000076 2EE8           00102         decfsz  WREG,f,access
000078 D???           00103         bra             go.pr
00007A 0012           00104         return
                      00105 
                      00106 ;;;;;;;;;;
00007C                00107 inimes                          ; initial message: D-A-T-I 
00007C 1418           00108         db      b'00011000',b'00010100'
00007E 1414           00109         db      b'00010100',b'00010100'
000080 0018           00110         db      b'00011000',b'00000000'
000082 A247           00111         db      b'01000111',b'10100010'
000084 E2A2           00112         db      b'10100010',b'11100010'
000086 08A2           00113         db      b'10100010',b'00001000'
000088 0808           00114         db      b'00001000',b'00001000'
00008A 0808           00115         db      b'00001000',b'00001000'
                      00116 
                      00117 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      00118 
00008C                00119 id                                                      ; TX 3-digit or 4-digit ASCII serial number
                      00120                                                         ; including leading and trailing spaces
00008C 6A00           00121         clrf    KeyEdge,access
                      00122 
00008E 0E20           00123         movlw   ' '
000090 EC?? F???      00124         call    tx.byte                 ; TX leading space
                      00125 
000094 C??? F???      00126         movff   MYserial+0,Bin+0
000098 C??? F???      00127         movff   MYserial+1,Bin+1
00009C EC?? F???      00128         call    bin2bcd                 ; convert serial number to BCD
                      00129 
0000A0 3800           00130         swapf   Bcd+1,w,access
0000A2 0B0F           00131         andlw   0x0f                    ; isolate thousands
                      00132         ifnz
0000A4 A4D8               M         btfss   STATUS,Z,ACCESS
0000A6 EC?? F???      00133         call    tx.ascnum               ; TX thousands
                      00134 
0000AA 5000           00135         movf    Bcd+1,w,access
0000AC EC?? F???      00136         call    tx.ascnum               ; TX hundreds
                      00137 
0000B0 3800           00138         swapf   Bcd+0,w,access
0000B2 EC?? F???      00139         call    tx.ascnum               ; TX tens
                      00140 
0000B6 5000           00141         movf    Bcd+0,w,access
MPASM  5.51                          DEMO.ASM   3-23-2016  21:08:21         PAGE  6


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0000B8 EC?? F???      00142         call    tx.ascnum               ; TX ones
                      00143 
0000BC 0E20           00144         movlw   ' '
0000BE EC?? F???      00145         call    tx.byte                 ; TX trailing space
0000C2 0012           00146         return
                      00147 
                      00148 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      00149 
                      00150         #include <tetris.inc>   ; tetris demo game
                      00001 ;*******************************************************************************
                      00002 ;                                                                                                       
                                                                                    
                      00003 ;                               T  E  T  R  I  S                                                        
                                                                    
                      00004 ;                                                                                                       
                                                                                    
                      00005 ;*******************************************************************************
                      00006 
0000C4                00007 tetris                                                  ; new game starts
0000C4 6AA6           00008         clrf    EECON1,access           ; Disable write to EEPROM
0000C6 9000           00009         bcf             RXFlag,0,access ; disable RX
0000C8 9A00           00010         bcf             Flag,5,access   ; bit 5 set = Only two steps for key 0, without pause
0000CA 6A00           00011         clrf    KeyEdge,access
0000CC 6A00           00012         clrf    Score,access
0000CE 6A00           00013         clrf    Score+1,access
                      00014 
0000D0 EC?? F???      00015         call    print.score             ; Bcd+0,Bcd+1 ---> BufferPause
0000D4 010?           00016         banksel Buffer                          ; all BANKED modes will address bank 7
0000D6 6A00           00017         clrf    Speed.index,access
0000D8 0E52           00018         movlw   .82
0000DA 6E00           00019         movwf   Speed,access
                      00020 
0000DC EC?? F???      00021         call    clrbuf                          ; clear buffer
0000E0 EC?? F???      00022         call    move.bufer.buffer2      ; clear aux buffer
0000E4 6A00           00023         clrf    Block.count,access
                      00024 
                      00025 ; new block appears                                                                                     
                                                                                    
0000E6                00026 tetris.cont                                                             ; new block has to appear
0000E6 9600           00027         bcf             KeyEdge,3,access
0000E8 EC?? F???      00028         call    full.line.blink
0000EC EC?? F???      00029         call    move.bufer.buffer2              ; clear aux buffer
                      00030 
0000F0 2A00           00031         incf    Block.count,f,access
0000F2 9600           00032         bcf             Block.count,3,access    ; range 0...7
0000F4 5200           00033         movf    Block.count,f,access
0000F6 E1??           00034         bnz             no.speed.inc
                      00035                                                                         ; time to advance speed
0000F8 2A00           00036         incf    Speed.index,f,access
0000FA BA00           00037         btfsc   Speed.index,5,access
0000FC 0600           00038         decf    Speed.index,f,access    ; keep it in range 0...31
                      00039 
0000FE 0E??           00040         movlw   high (speedtab)
MPASM  5.51                          DEMO.ASM   3-23-2016  21:08:21         PAGE  7


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

000100 6EF7           00041         movwf   TBLPTRH
000102 0E??           00042         movlw   low (speedtab)
000104 2400           00043         addwf   Speed.index,w,access
000106 6EF6           00044         movwf   TBLPTRL
                      00045         ifc
000108 B0D8               M         btfsc   STATUS,C,ACCESS
00010A 2AF7           00046         incf    TBLPTRH,f                               ; readjust for page boundary
00010C 0008           00047         tblrd*                                                  ; read speed period
00010E CFF5 F???      00048         movff   TABLAT,Speed
000112                00049 no.speed.inc
000112 0E03           00050         movlw   .3                              ; initial X pos of appearing block
000114 6E00           00051         movwf   BlockX,access
000116 0E00           00052         movlw   .0                              ; initial Y pos of appearing block
000118 6E00           00053         movwf   BlockY,access
00011A 0E00           00054         movlw   .0                              ; initial angle of appearing block
00011C 6E00           00055         movwf   BlockA,access
00011E                00056 newrnd
00011E EC?? F???      00057         call    rnd
000122 0B07           00058         andlw   .7                              ; range 0...7
000124 0FFF           00059         addlw   -.1
000126 E3??           00060         bnc             newrnd                  ; if it was 7, then repeat
                      00061                                                         ; w in range 0...6
000128 6E00           00062         movwf   Block,access            ; initial block type
                      00063 
                      00064 ; initial drawing                                                                                       
                                                                    
00012A EC?? F???      00065         call    clrbuf                          ; clear buffer
00012E EC?? F???      00066         call    get.block                       ; get block <Block>, X pos <BlockX>, angle <Blocka> in <
                            CurrentBlock:4>
000132 EC?? F???      00067         call    draw.block                      ; draws <CurrentBlock:4> in <BlockX>, <BlockY> Buffer bi
                            tmap
000136 EC?? F???      00068         call    test.overlap            ; test if first appearing of new block overlapped
00013A E3??           00069         bnc             not.end
                      00070                                                         ; game end mask
00013C EC?? F???      00071                 call    ior.bufer2.buffer       ; moves Buffer2 to Buffer
                      00072 
                      00073                                                                 ; this is game end!
000140 0E3C           00074                 movlw   .60
000142                00075 wait.60
                      00076                 sync150                                 ; first wait a little
000142 A400               M         btfss   Flag,2,ACCESS           ; 150 Hz handshaking sync
000144 D???               M         bra             $-2
000146 9400               M         bcf             Flag,2,ACCESS           ; reset sync flag
000148 2EE8           00077                 decfsz  WREG,f,access
00014A D???           00078                 bra             wait.60
                      00079         
00014C EE?? F0??      00080                 lfsr    FSR0,Buffer
000150 0E10           00081                 movlw   .16
000152 6E??           00082                 movwf   Inner
000154                00083 mask.16
000154 6AEE           00084                 clrf    POSTINC0                ; mask down
000156 0E07           00085                 movlw   .7
000158                00086 inmask
MPASM  5.51                          DEMO.ASM   3-23-2016  21:08:21         PAGE  8


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00087                 sync150
000158 A400               M         btfss   Flag,2,ACCESS           ; 150 Hz handshaking sync
00015A D???               M         bra             $-2
00015C 9400               M         bcf             Flag,2,ACCESS           ; reset sync flag
00015E 2EE8           00088                 decfsz  WREG,f,access
000160 D???           00089                 bra             inmask
                      00090 
000162 2E00           00091                 decfsz  Inner,f,access
000164 D???           00092                 bra             mask.16
                      00093 
000166 0E16           00094                 movlw   .22
000168                00095 wait.22
                      00096                 sync150                                 ; wait a little more...
000168 A400               M         btfss   Flag,2,ACCESS           ; 150 Hz handshaking sync
00016A D???               M         bra             $-2
00016C 9400               M         bcf             Flag,2,ACCESS           ; reset sync flag
00016E 2EE8           00097                 decfsz  WREG,f,access
000170 D???           00098                 bra             wait.22
                      00099 
000172 EC?? F???      00100         call    print.score.buf         ; Bcd+0,Bcd+1 ---> conv ---> Buffer
                      00101 
000176 9400           00102         bcf             KeyEdge,2,access
000178                00103 new.wait.key.2
000178 84??           00104         bsf             FlagDemo,2                      ; bit 2 set = showing final result
00017A 6A00           00105         clrf    KeyEdge,access
00017C 8A00           00106         bsf             Flag,5,access           ; bit 5 set = Only two steps for key 0, without pause
00017E EC?? F???      00107         call    moving.message
                      00108                                                                 ; press any key to exit pause or to star
                            t new game
000182 B200           00109         btfsc   KeyEdge,1,access
000184 D???           00110         bra             pressed.new.game
000186 B400           00111         btfsc   KeyEdge,2,access
000188 D???           00112         bra             pressed.new.game
00018A B600           00113         btfsc   KeyEdge,3,access
00018C D???           00114         bra             pressed.new.game
00018E A800           00115         btfss   KeyEdge,4,access
000190 D???           00116         bra             new.wait.key.2          ; wait for key 2 press
000192                00117 pressed.new.game
000192 6A00           00118         clrf    KeyEdge,access
000194 D???           00119         bra             tetris                          ; new game
                      00120 
000196                00121 not.end
000196 EC?? F???      00122         call    ior.bufer2.buffer       ; both buffers to main buffer
                      00123 
                      00124 ;*******************************************************************************
                      00125 ;                                                       T E T R I S       (MAIN LOOP)                   
                                                            
                      00126 ;*******************************************************************************
00019A                00127 tetris.farm
                      00128         sync150                                         ; sync 150 Hz
00019A A400               M         btfss   Flag,2,ACCESS           ; 150 Hz handshaking sync
00019C D???               M         bra             $-2
00019E 9400               M         bcf             Flag,2,ACCESS           ; reset sync flag
MPASM  5.51                          DEMO.ASM   3-23-2016  21:08:21         PAGE  9


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0001A0 B000           00129         btfsc   Flag,0,access           ; pause flag
0001A2 D???           00130         bra             tetris.farm                     ; pause loop
                      00131 
0001A4 C??? F???      00132         movff   BlockX,Temp.BlockX      ; will be needed if action was impossible
0001A8 C??? F???      00133         movff   BlockA,Temp.BlockA      ; will be needed if action was impossible
0001AC 96??           00134         bcf             FlagDemo,3                              ; Flag3 set = key action, Flag3 clr = no
                             action or vertical action
                      00135 
                      00136 ; Vertical action (automatic)                                                                           
                                                    
                      00137 
0001AE 2A00           00138         incf    Uniform,f,access
0001B0 5000           00139         movf    Speed,w,access
                      00140 
0001B2 B000           00141         btfsc   Rotor3,0,access
0001B4 D???           00142         bra             notdown
0001B6 B600           00143         btfsc   KeyEdge,3,access
0001B8 0E08           00144         movlw   .8                                      ; fast drop speed (key DOWN pressed)
0001BA                00145 notdown
0001BA 5C00           00146         subwf   Uniform,w,access        ; Uniform-Speed, C set if Uniform >= Speed
0001BC E3??           00147         bnc             tetris.farmw                    ; loop and wait for scan
0001BE 9600           00148         bcf             FlagDemo,3,access               ; Flag3 set = key action, Flag3 clr = no action 
                            or vertical action
0001C0 6A00           00149         clrf    Uniform,access
                      00150 
0001C2 2A00           00151         incf    BlockY,f,access         ; ONE PIXEL DOWN ------------------
0001C4 5000           00152         movf    BlockY,w,access
0001C6 0FF0           00153         addlw   -.16
                      00154         ifc
0001C8 B0D8               M         btfsc   STATUS,C,ACCESS
0001CA 0600           00155         decf    BlockY,f,access         ; restore Blocky
0001CC                00156 tetris.farmw
                      00157 ; Horizontal actions (by key command)                                                                   
                                                    
                      00158 
0001CC A200           00159         btfss   KeyEdge,1,access        ; test left key
0001CE D???           00160         bra             no.key.1
0001D0 9200           00161         bcf             KeyEdge,1,access        ; clear key flag
0001D2 8600           00162         bsf             FlagDemo,3,access               ; Flag3 set = key action, Flag3 clr = no action 
                            or vertical action
0001D4 66??           00163         tstfsz  BlockX                          ; avoid zero BlockX (normal range is 1...8)
0001D6 0600           00164         decf    BlockX,f,access         ; ------------ LEFT action ------------------
0001D8 D???           00165         bra             show
0001DA                00166 no.key.1
0001DA A400           00167         btfss   KeyEdge,2,access        ; test middle key
0001DC D???           00168         bra             no.key.2
0001DE 9400           00169         bcf             KeyEdge,2,access        ; clear key flag
0001E0 86??           00170         bsf             FlagDemo,3                              ; Flag3 set = key action, Flag3 clr = no
                             action or vertical action
                      00171                                                         ; PATCH: if Block=0 & BlockX=7, then dec blockX
0001E2 5200           00172         movf    Block,f,access          ;
0001E4 E1??           00173         bnz             nopatchI                        ;
0001E6 5000           00174         movf    BlockX,w,access         ;
MPASM  5.51                          DEMO.ASM   3-23-2016  21:08:21         PAGE 10


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0001E8 0A06           00175         xorlw   6                                       ;
0001EA E1??           00176         bnz             nopatchI                        ;
0001EC 0600           00177         decf    BlockX,f,access         ;
0001EE                00178 nopatchI                                        ; END PATCH
0001EE 2A00           00179         incf    BlockA,f,access         ; ------------ MIDDLE action ------------------
0001F0 9400           00180         bcf             BlockA,2,access         ; limit angle counter to 0...3
0001F2 D???           00181         bra             show
0001F4                00182 no.key.2
0001F4 A800           00183         btfss   KeyEdge,4,access        ; test right key
0001F6 D???           00184         bra             no.key.3
0001F8 9800           00185         bcf             KeyEdge,4,access        ; clear key flag
0001FA 8600           00186         bsf             FlagDemo,3,access               ; Flag3 set = key action, Flag3 clr = no action 
                            or vertical action
0001FC 2A00           00187         incf    BlockX,f,access         ; ------------ RIGHT action ------------------
0001FE 5000           00188         movf    BlockX,w,access
000200 0FF8           00189         addlw   -.8
                      00190         ifc                                                     ; if overflow right, then...
000202 B0D8               M         btfsc   STATUS,C,ACCESS
000204 0600           00191         decf    BlockX,f,access         ; ...restore BlockX
000206 D???           00192         bra             show
000208                00193 no.key.3
                      00194 
                      00195 ; Game logic and buffer handling                                                                        
                                                    
                      00196 ; Takes block bitmap from table and tests for horizontal overflows and                  
                      00197 ; restores previously saved values of BlockX and BlockA if action not possible  
                      00198 
000208                00199 show
000208 EC?? F???      00200         call    get.block                       ; get block <Block>, X pos <BlockX>, angle <Blocka> in <
                            CurrentBlock:4>
00020C E3??           00201         bnc             noovf1
00020E C??? F???      00202         movff   Temp.BlockX,BlockX      ; restore if action was impossible
000212 C??? F???      00203         movff   Temp.BlockA,BlockA      ; restore if action was impossible
000216 EC?? F???      00204         call    get.block                       ; get block <Block>, X pos <BlockX>, angle <Blocka> in <
                            CurrentBlock:4>
00021A                00205 noovf1
                      00206 
                      00207 ; Clears Buffer and Draws block bitmap (game dump bitmap is at Buffer2, without current block)  
                      00208 
00021A EC?? F???      00209         call    clrbuf
00021E EC?? F???      00210         call    draw.block                      ; draws <CurrentBlock:4> in <BlockX>, <BlockY> Buffer bi
                            tmap
                      00211 
000222 EC?? F???      00212         call    test.overlap            ; test Buffer and Buffer2 for pixel overlaping
000226 E3??           00213         bnc             no.overlap
                      00214                                                                 ; overlapping detected; let's see is it 
                            Y drop or X impossible command
000228 B600           00215         btfsc   FlagDemo,3,access               ; Flag3 set = key action, Flag3 clr = no action or verti
                            cal action
00022A D???           00216         bra             impossible      
                      00217                                                                 ; Y drop caused overlapping, go to new b
                            lock
00022C 0600           00218         decf    BlockY,f,access
MPASM  5.51                          DEMO.ASM   3-23-2016  21:08:21         PAGE 11


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

00022E C??? F???      00219         movff   Temp.BlockX,BlockX      ; restore if Y drop caused overlap
000232 C??? F???      00220         movff   Temp.BlockA,BlockA      ; restore if Y drop caused overlap
                      00221 
000236 EC?? F???      00222         call    get.block                       ; get block <Block>, X pos <BlockX>, angle <Blocka> in <
                            CurrentBlock:4>
                      00223 
00023A EC?? F???      00224         call    clrbuf
00023E EC?? F???      00225         call    draw.block                      ; draws <CurrentBlock:4> in <BlockX>, <BlockY> Buffer bi
                            tmap
                      00226 
000242 EC?? F???      00227         call    ior.bufer2.buffer       
000246 EC?? F???      00228         call    move.bufer.buffer2      ; integrate current block in bitmap dump (Buffer2)
00024A EF?? F???      00229         goto    tetris.cont                     ; try again
                      00230 
00024E                00231 impossible                                              ; impossible key command caused overlapping
00024E C??? F???      00232         movff   Temp.BlockX,BlockX      ; restore if key action caused overlap
000252 C??? F???      00233         movff   Temp.BlockA,BlockA      ; restore if key action caused overlap
000256 EC?? F???      00234         call    move.bufer2.buffer
00025A EC?? F???      00235         call    get.block                       ; get block <Block>, X pos <BlockX>, angle <Blocka> in <
                            CurrentBlock:4>
00025E EC?? F???      00236         call    draw.block                      ; draws <CurrentBlock:4> in <BlockX>, <BlockY> Buffer bi
                            tmap
000262 EC?? F???      00237         call    ior.bufer2.buffer
                      00238 
000266 EF?? F???      00239         goto    tetris.farm                     ; try again
                      00240 
00026A                00241 no.overlap
00026A 5100           00242         movf    Buffer+.15,w,BANKED     ; test if current block occupies lower row
00026C E0??           00243         bz              no.floor
00026E                00244 end.of.drop                                             ; end of drop (block reached floor)
00026E EC?? F???      00245         call    ior.bufer2.buffer       
000272 EC?? F???      00246         call    move.bufer.buffer2      ; integrate current block in bitmap dump (Buffer2)
000276 EF?? F???      00247         goto    tetris.cont                     ; try again
                      00248 
00027A                00249 no.floor
00027A EC?? F???      00250         call    ior.bufer2.buffer       ; moves Buffer2 to Buffer
00027E D???           00251         bra             tetris.farm
                      00252 
                      00253 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      00254 
000280                00255 full.line.blink         ; the lowest FULL line in Buffer blinks, then discard, then go to next line
                      00256 
000280 6A00           00257         clrf    Inner,access    ; counter how many lines are cleared at once
000282 EE?? F0??      00258         lfsr    FSR0,Buffer+.16
                      00259 
000286 0E10           00260         movlw   .16
000288 6E00           00261         movwf   Outer,access    ; line counter (line 0 does not act here)
00028A                00262 go.16.blink
00028A 50ED           00263         movf    POSTDEC0,w              ; dummy, just to pre-decrement INDF0
00028C 28EF           00264         incf    INDF0,w                 ; test if line = 11111111
                      00265         ifz
00028E B4D8               M         btfsc   STATUS,Z,ACCESS
000290 EC?? F???      00266         call    full.line               ; yes, process
MPASM  5.51                          DEMO.ASM   3-23-2016  21:08:21         PAGE 12


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

000294 2E00           00267         decfsz  Outer,f,access
000296 D???           00268         bra             go.16.blink             ; loop next line
                      00269                                                         ; all lines finished
000298 5200           00270         movf    Inner,f,access
                      00271         ifz
00029A B4D8               M         btfsc   STATUS,Z,ACCESS
00029C 0012           00272         return
                      00273 
00029E 4E00           00274         dcfsnz  Inner,f,access
0002A0 D???           00275         bra             conv.sc
0002A2 EC?? F???      00276         call    advscore                ; 2 lines
                      00277 
0002A6 4E00           00278         dcfsnz  Inner,f,access
0002A8 D???           00279         bra             conv.sc 
0002AA EC?? F???      00280         call    advscore                ; 3 lines
                      00281 
0002AE 4E00           00282         dcfsnz  Inner,f,access
0002B0 D???           00283         bra             conv.sc 
0002B2 EC?? F???      00284         call    advscore
0002B6 EC?? F???      00285         call    advscore                ; 4 lines
0002BA                00286 conv.sc
0002BA EC?? F???      00287         call    print.score             ; Bcd+0,Bcd+1 ---> BufferPause
0002BE 0012           00288         return
                      00289 ;       
0002C0                00290 advscore
0002C0 5000           00291         movf    Score+1,w,access
0002C2 0FD9           00292         addlw   -0x27
0002C4 E1??           00293         bnz             no.lo.test
0002C6 5000           00294         movf    Score,w,access
0002C8 0FF1           00295         addlw   -0x0F
0002CA                00296 no.lo.test
                      00297         ifc
0002CA B0D8               M         btfsc   STATUS,C,ACCESS
0002CC 0012           00298         return
0002CE 2A00           00299         incf    Score,f,access
                      00300         ifz
0002D0 B4D8               M         btfsc   STATUS,Z,ACCESS
0002D2 2A00           00301         incf    Score+1,f,access
0002D4 0012           00302         return
                      00303 
                      00304 ;       
0002D6                00305 full.line                                       ; this line is full, it should blink
0002D6 2A00           00306         incf    Inner,f,access
0002D8 EC?? F???      00307         call    advscore
                      00308 
0002DC EC?? F???      00309         call    clr.blink
0002E0 EC?? F???      00310         call    clr.blink
0002E4 EC?? F???      00311         call    clr.blink
0002E8 EC?? F???      00312         call    clr.blink
0002EC EC?? F???      00313         call    clr.blink
0002F0 EC?? F???      00314         call    clr.blink
                      00315 
0002F4 CFE9 FFE1      00316         movff   FSR0L,FSR1L
MPASM  5.51                          DEMO.ASM   3-23-2016  21:08:21         PAGE 13


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0002F8 CFEA FFE2      00317         movff   FSR0H,FSR1H
0002FC CFE9 FFD9      00318         movff   FSR0L,FSR2L
000300 CFEA FFDA      00319         movff   FSR0H,FSR2H
                      00320 
000304 50EE           00321         movf    POSTINC0,w              ; dummy, just to increment INDF0 (readjust after shifting buffer
                             down)
000306 50E5           00322         movf    POSTDEC1,w              ; dummy, just to decrement INDF1
000308                00323 not.yet
000308 CFE5 FFDD      00324         movff   POSTDEC1,POSTDEC2       ; moving...
00030C 50D9           00325         movf    FSR2L,w,access
00030E 0A??           00326         xorlw   low Buffer                      ; compare is it end of moving
000310 E1??           00327         bnz             not.yet
                      00328                                                                 ; end of moving
000312 0012           00329         return
                      00330 
                      00331 ;**********************************************************************
                      00332 
000314                00333 clr.blink
000314 6AEF           00334         clrf    INDF0,access            ; off
000316 0E07           00335         movlw   .7                                      ; blinking period *10 ms
000318                00336 off.loop
                      00337         sync150
000318 A400               M         btfss   Flag,2,ACCESS           ; 150 Hz handshaking sync
00031A D???               M         bra             $-2
00031C 9400               M         bcf             Flag,2,ACCESS           ; reset sync flag
00031E 2EE8           00338         decfsz  WREG,f,access
000320 D???           00339         bra             off.loop
000322 68EF           00340         setf    INDF0,access            ; on
000324 0E07           00341         movlw   .7                                      ; blinking period *10 ms
000326                00342 on.loop
                      00343         sync150
000326 A400               M         btfss   Flag,2,ACCESS           ; 150 Hz handshaking sync
000328 D???               M         bra             $-2
00032A 9400               M         bcf             Flag,2,ACCESS           ; reset sync flag
00032C 2EE8           00344         decfsz  WREG,f,access
00032E D???           00345         bra             on.loop
000330 0012           00346         return
                      00347 
                      00348 
                      00349 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      00350 
000332                00351 test.overlap            ; test Buffer and Buffer2 for pixel overlaping, C set if overlap
                      00352         overlap .0
000332 5100               M         movf    Buffer2+.0,w,BANKED
000334 1500               M         andwf   Buffer+.0,w,BANKED
000336 E1??               M         bnz             ovl.found
                      00353         overlap .1
000338 5100               M         movf    Buffer2+.1,w,BANKED
00033A 1500               M         andwf   Buffer+.1,w,BANKED
00033C E1??               M         bnz             ovl.found
                      00354         overlap .2
00033E 5100               M         movf    Buffer2+.2,w,BANKED
000340 1500               M         andwf   Buffer+.2,w,BANKED
MPASM  5.51                          DEMO.ASM   3-23-2016  21:08:21         PAGE 14


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

000342 E1??               M         bnz             ovl.found
                      00355         overlap .3
000344 5100               M         movf    Buffer2+.3,w,BANKED
000346 1500               M         andwf   Buffer+.3,w,BANKED
000348 E1??               M         bnz             ovl.found
                      00356         overlap .4
00034A 5100               M         movf    Buffer2+.4,w,BANKED
00034C 1500               M         andwf   Buffer+.4,w,BANKED
00034E E1??               M         bnz             ovl.found
                      00357         overlap .5
000350 5100               M         movf    Buffer2+.5,w,BANKED
000352 1500               M         andwf   Buffer+.5,w,BANKED
000354 E1??               M         bnz             ovl.found
                      00358         overlap .6
000356 5100               M         movf    Buffer2+.6,w,BANKED
000358 1500               M         andwf   Buffer+.6,w,BANKED
00035A E1??               M         bnz             ovl.found
                      00359         overlap .7
00035C 5100               M         movf    Buffer2+.7,w,BANKED
00035E 1500               M         andwf   Buffer+.7,w,BANKED
000360 E1??               M         bnz             ovl.found
                      00360         overlap .8
000362 5100               M         movf    Buffer2+.8,w,BANKED
000364 1500               M         andwf   Buffer+.8,w,BANKED
000366 E1??               M         bnz             ovl.found
                      00361         overlap .9
000368 5100               M         movf    Buffer2+.9,w,BANKED
00036A 1500               M         andwf   Buffer+.9,w,BANKED
00036C E1??               M         bnz             ovl.found
                      00362         overlap .10
00036E 5100               M         movf    Buffer2+.10,w,BANKED
000370 1500               M         andwf   Buffer+.10,w,BANKED
000372 E1??               M         bnz             ovl.found
                      00363         overlap .11
000374 5100               M         movf    Buffer2+.11,w,BANKED
000376 1500               M         andwf   Buffer+.11,w,BANKED
000378 E1??               M         bnz             ovl.found
                      00364         overlap .12
00037A 5100               M         movf    Buffer2+.12,w,BANKED
00037C 1500               M         andwf   Buffer+.12,w,BANKED
00037E E1??               M         bnz             ovl.found
                      00365         overlap .13
000380 5100               M         movf    Buffer2+.13,w,BANKED
000382 1500               M         andwf   Buffer+.13,w,BANKED
000384 E1??               M         bnz             ovl.found
                      00366         overlap .14
000386 5100               M         movf    Buffer2+.14,w,BANKED
000388 1500               M         andwf   Buffer+.14,w,BANKED
00038A E1??               M         bnz             ovl.found
                      00367         overlap .15
00038C 5100               M         movf    Buffer2+.15,w,BANKED
00038E 1500               M         andwf   Buffer+.15,w,BANKED
000390 E1??               M         bnz             ovl.found
MPASM  5.51                          DEMO.ASM   3-23-2016  21:08:21         PAGE 15


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00368         rcf                                     ; NC = no overlap
000392 90D8               M         bcf             STATUS,C,ACCESS
000394 0012           00369         return
000396                00370 ovl.found
                      00371         scf                                     ; C = overlap found
000396 80D8               M         bsf             STATUS,C,ACCESS
000398 0012           00372         return
                      00373 
                      00374 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      00375 
00039A                00376 draw.block                              ; puts <CurrentBlock:4> in <BlockY> Buffer
00039A EE?? F0??      00377         lfsr    FSR0,Buffer
00039E 5000           00378         movf    BlockY,w,access
0003A0 26E9           00379         addwf   FSR0L,f,access
0003A2 50ED           00380         movf    POSTDEC0,w                              ; dummy
0003A4 C??? FFEE      00381         movff   CurrentBlock+.0,POSTINC0
0003A8 C??? FFEE      00382         movff   CurrentBlock+.1,POSTINC0
0003AC C??? FFEE      00383         movff   CurrentBlock+.2,POSTINC0
0003B0 C??? FFEE      00384         movff   CurrentBlock+.3,POSTINC0
0003B4 0012           00385         return
                      00386 
                      00387 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      00388 
0003B6                00389 ior.bufer2.buffer               ; buffer2 or buffer ---> buffer (optimized for speed)
                      00390         iorbuf  .0
0003B6 5100               M         movf    Buffer2+.0,w,BANKED
0003B8 1300               M         iorwf   Buffer+.0,f,BANKED
                      00391         iorbuf  .1
0003BA 5100               M         movf    Buffer2+.1,w,BANKED
0003BC 1300               M         iorwf   Buffer+.1,f,BANKED
                      00392         iorbuf  .2
0003BE 5100               M         movf    Buffer2+.2,w,BANKED
0003C0 1300               M         iorwf   Buffer+.2,f,BANKED
                      00393         iorbuf  .3
0003C2 5100               M         movf    Buffer2+.3,w,BANKED
0003C4 1300               M         iorwf   Buffer+.3,f,BANKED
                      00394         iorbuf  .4
0003C6 5100               M         movf    Buffer2+.4,w,BANKED
0003C8 1300               M         iorwf   Buffer+.4,f,BANKED
                      00395         iorbuf  .5
0003CA 5100               M         movf    Buffer2+.5,w,BANKED
0003CC 1300               M         iorwf   Buffer+.5,f,BANKED
                      00396         iorbuf  .6
0003CE 5100               M         movf    Buffer2+.6,w,BANKED
0003D0 1300               M         iorwf   Buffer+.6,f,BANKED
                      00397         iorbuf  .7
0003D2 5100               M         movf    Buffer2+.7,w,BANKED
0003D4 1300               M         iorwf   Buffer+.7,f,BANKED
                      00398         iorbuf  .8
0003D6 5100               M         movf    Buffer2+.8,w,BANKED
0003D8 1300               M         iorwf   Buffer+.8,f,BANKED
                      00399         iorbuf  .9
0003DA 5100               M         movf    Buffer2+.9,w,BANKED
MPASM  5.51                          DEMO.ASM   3-23-2016  21:08:21         PAGE 16


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0003DC 1300               M         iorwf   Buffer+.9,f,BANKED
                      00400         iorbuf  .10
0003DE 5100               M         movf    Buffer2+.10,w,BANKED
0003E0 1300               M         iorwf   Buffer+.10,f,BANKED
                      00401         iorbuf  .11
0003E2 5100               M         movf    Buffer2+.11,w,BANKED
0003E4 1300               M         iorwf   Buffer+.11,f,BANKED
                      00402         iorbuf  .12
0003E6 5100               M         movf    Buffer2+.12,w,BANKED
0003E8 1300               M         iorwf   Buffer+.12,f,BANKED
                      00403         iorbuf  .13
0003EA 5100               M         movf    Buffer2+.13,w,BANKED
0003EC 1300               M         iorwf   Buffer+.13,f,BANKED
                      00404         iorbuf  .14
0003EE 5100               M         movf    Buffer2+.14,w,BANKED
0003F0 1300               M         iorwf   Buffer+.14,f,BANKED
                      00405         iorbuf  .15
0003F2 5100               M         movf    Buffer2+.15,w,BANKED
0003F4 1300               M         iorwf   Buffer+.15,f,BANKED
0003F6 0012           00406         return
                      00407 
                      00408 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      00409 
0003F8                00410 move.bufer.buffer2
0003F8 EE?? F0??      00411         lfsr    FSR1,Buffer
0003FC EE?? F0??      00412         lfsr    FSR2,Buffer2
000400 D???           00413         bra             move.fsr1.fsr2
                      00414 
                      00415 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      00416 
000402                00417 move.bufer2.buffer
000402 EE?? F0??      00418         lfsr    FSR1,Buffer2
000406 EE?? F0??      00419         lfsr    FSR2,Buffer
00040A                00420 move.fsr1.fsr2
  0000                00421         variable xx
  00000000            00422 xx=0
                      00423         while xx<.16
00040A CFE6 FFDE      00424                 movff   POSTINC1,POSTINC2
  00000001            00425 xx+=1
00040E CFE6 FFDE      00424                 movff   POSTINC1,POSTINC2
  00000002            00425 xx+=1
000412 CFE6 FFDE      00424                 movff   POSTINC1,POSTINC2
  00000003            00425 xx+=1
000416 CFE6 FFDE      00424                 movff   POSTINC1,POSTINC2
  00000004            00425 xx+=1
00041A CFE6 FFDE      00424                 movff   POSTINC1,POSTINC2
  00000005            00425 xx+=1
00041E CFE6 FFDE      00424                 movff   POSTINC1,POSTINC2
  00000006            00425 xx+=1
000422 CFE6 FFDE      00424                 movff   POSTINC1,POSTINC2
  00000007            00425 xx+=1
000426 CFE6 FFDE      00424                 movff   POSTINC1,POSTINC2
  00000008            00425 xx+=1
MPASM  5.51                          DEMO.ASM   3-23-2016  21:08:21         PAGE 17


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

00042A CFE6 FFDE      00424                 movff   POSTINC1,POSTINC2
  00000009            00425 xx+=1
00042E CFE6 FFDE      00424                 movff   POSTINC1,POSTINC2
  0000000A            00425 xx+=1
000432 CFE6 FFDE      00424                 movff   POSTINC1,POSTINC2
  0000000B            00425 xx+=1
000436 CFE6 FFDE      00424                 movff   POSTINC1,POSTINC2
  0000000C            00425 xx+=1
00043A CFE6 FFDE      00424                 movff   POSTINC1,POSTINC2
  0000000D            00425 xx+=1
00043E CFE6 FFDE      00424                 movff   POSTINC1,POSTINC2
  0000000E            00425 xx+=1
000442 CFE6 FFDE      00424                 movff   POSTINC1,POSTINC2
  0000000F            00425 xx+=1
000446 CFE6 FFDE      00424                 movff   POSTINC1,POSTINC2
  00000010            00425 xx+=1
                      00426         endw
00044A 0012           00427         return
                      00428 
                      00429 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      00430 
00044C                00431 clrbuf.pause
00044C EE?? F0??      00432         lfsr    FSR1,BufferPause
000450 D???           00433         bra             clrx
                      00434 ;       
000452                00435 clrbuf2
000452 EE?? F0??      00436         lfsr    FSR1,Buffer2
000456 D???           00437         bra             clrx
                      00438 ;       
000458                00439 clrbuf
000458 EE?? F0??      00440         lfsr    FSR1,Buffer
00045C                00441 clrx
  0000                00442         variable xx
  00000000            00443 xx=0
                      00444         while xx<.16
00045C 6AE6           00445                 clrf    POSTINC1
  00000001            00446 xx+=1
00045E 6AE6           00445                 clrf    POSTINC1
  00000002            00446 xx+=1
000460 6AE6           00445                 clrf    POSTINC1
  00000003            00446 xx+=1
000462 6AE6           00445                 clrf    POSTINC1
  00000004            00446 xx+=1
000464 6AE6           00445                 clrf    POSTINC1
  00000005            00446 xx+=1
000466 6AE6           00445                 clrf    POSTINC1
  00000006            00446 xx+=1
000468 6AE6           00445                 clrf    POSTINC1
  00000007            00446 xx+=1
00046A 6AE6           00445                 clrf    POSTINC1
  00000008            00446 xx+=1
00046C 6AE6           00445                 clrf    POSTINC1
  00000009            00446 xx+=1
MPASM  5.51                          DEMO.ASM   3-23-2016  21:08:21         PAGE 18


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

00046E 6AE6           00445                 clrf    POSTINC1
  0000000A            00446 xx+=1
000470 6AE6           00445                 clrf    POSTINC1
  0000000B            00446 xx+=1
000472 6AE6           00445                 clrf    POSTINC1
  0000000C            00446 xx+=1
000474 6AE6           00445                 clrf    POSTINC1
  0000000D            00446 xx+=1
000476 6AE6           00445                 clrf    POSTINC1
  0000000E            00446 xx+=1
000478 6AE6           00445                 clrf    POSTINC1
  0000000F            00446 xx+=1
00047A 6AE6           00445                 clrf    POSTINC1
  00000010            00446 xx+=1
                      00447         endw
00047C 0012           00448         return
                      00449 
                      00450 ; puts block <Block>, X pos <BlockX>, angle <Blocka> in <CurrentBlock:4>
                      00451 ; Set C if out of screen
00047E                00452 get.block
                      00453 ; calculate table position for <Block>
00047E 0E??           00454         movlw   high (blocks)
000480 6EF7           00455         movwf   TBLPTRH,access          ; table pointer hi byte
000482 5000           00456         movf    Block,w,access          ; 0=I, 1=J, 2=L, 3=O, 4=S, 5=Z, 6=T
000484 0D10           00457         mullw   .16                     ; Block * 16 ---> PRODL
000486 50F3           00458         movf    PRODL,w,access
000488 0F??           00459         addlw   low (blocks)
00048A 6EF6           00460         movwf   TBLPTRL,access          ; calculated low position of <Block> ---> TBLPTRL
                      00461         ifc
00048C B0D8               M         btfsc   STATUS,C,ACCESS
00048E 2AF7           00462         incf    TBLPTRH,f,access        ; if page boundary is crossed, incf high pointer
                      00463 ; calculate table position for angle <BlockA>
000490 5000           00464         movf    BlockA,w,access
000492 0D04           00465         mullw   .4                      ; BlockA * 4 ---> PRODL
000494 50F3           00466         movf    PRODL,w,access
000496 26F6           00467         addwf   TBLPTRL,f,access        ; add table offset for angle <BlockA>
                      00468         ifc
000498 B0D8               M         btfsc   STATUS,C,ACCESS
00049A 2AF7           00469         incf    TBLPTRH,f,access        ; if page boundary is crossed, add carry to high pointer
                      00470 ; places table members in <CurrentBlock:4>
00049C 0009           00471         tblrd*+
00049E CFF5 F???      00472         movff   TABLAT,CurrentBlock+0
0004A2 0009           00473         tblrd*+
0004A4 CFF5 F???      00474         movff   TABLAT,CurrentBlock+1
0004A8 0009           00475         tblrd*+
0004AA CFF5 F???      00476         movff   TABLAT,CurrentBlock+2
0004AE 0009           00477         tblrd*+
0004B0 CFF5 F???      00478         movff   TABLAT,CurrentBlock+3
                      00479 ; rotate bits right <BlockX> times
0004B4 0400           00480         decf    BlockX,w,access
0004B6 E0??           00481         bz              zero.shift              ; if BlockX was =1, then no shift
0004B8 6600           00482         tstfsz  BlockX,access
0004BA D???           00483         bra             nzblockx                ; if Block was 2 or more
MPASM  5.51                          DEMO.ASM   3-23-2016  21:08:21         PAGE 19


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00484                                                         ; if Block was 0 then shift left once
                      00485         rcf
0004BC 90D8               M         bcf             STATUS,C,ACCESS
0004BE 3600           00486         rlcf    CurrentBlock+0,f,access
0004C0 E2??           00487         bc              overflow
0004C2 3600           00488         rlcf    CurrentBlock+1,f,access
0004C4 E2??           00489         bc              overflow
0004C6 3600           00490         rlcf    CurrentBlock+2,f,access
0004C8 E2??           00491         bc              overflow
0004CA 3600           00492         rlcf    CurrentBlock+3,f,access
0004CC E2??           00493         bc              overflow
0004CE D???           00494         bra             zero.shift
                      00495 
0004D0                00496 nzblockx
0004D0 6E??           00497         movwf   Outer                   ; initialize shift_right loop
0004D2                00498 sr.loop
                      00499         rcf
0004D2 90D8               M         bcf             STATUS,C,ACCESS
0004D4 3200           00500         rrcf    CurrentBlock+0,f,access
0004D6 E2??           00501         bc              overflow
0004D8 3200           00502         rrcf    CurrentBlock+1,f,access
0004DA E2??           00503         bc              overflow
0004DC 3200           00504         rrcf    CurrentBlock+2,f,access
0004DE E2??           00505         bc              overflow
0004E0 3200           00506         rrcf    CurrentBlock+3,f,access
0004E2 E2??           00507         bc              overflow
0004E4 2E00           00508         decfsz  Outer,f,access
0004E6 D???           00509         bra             sr.loop
0004E8                00510 zero.shift
                      00511         rcf                                             ; NC = no overflow
0004E8 90D8               M         bcf             STATUS,C,ACCESS
0004EA 0012           00512         return
                      00513 
0004EC                00514 overflow
                      00515         scf                                             ; C = overflow
0004EC 80D8               M         bsf             STATUS,C,ACCESS
0004EE 0012           00516         return
                      00517 
                      00518 ;******************************************************************
                      00519 
0004F0                00520 blocks                  ; block bitmaps, 4 bytes each:  I  J  L  O  S  Z  T
                      00521                                 ; 4 angles each
                      00522 
                      00523 ;                                block.i                                        
0004F0 F000 0000      00524         db      b'00000000',b'11110000',b'00000000',b'00000000' ; I (0 degrees)
0004F4 4040 4040      00525         db      b'01000000',b'01000000',b'01000000',b'01000000' ; I (rotated 90 degrees CW)
0004F8 F000 0000      00526         db      b'00000000',b'11110000',b'00000000',b'00000000' ; I (rotated 180 degrees CW)
0004FC 4040 4040      00527         db      b'01000000',b'01000000',b'01000000',b'01000000' ; I (rotated 270 degrees CW)
                      00528 ;                                block.j                                        
000500 E000 0020      00529         db      b'00000000',b'11100000',b'00100000',b'00000000' ; J (0 degrees)
000504 2020 0060      00530         db      b'00100000',b'00100000',b'01100000',b'00000000' ; J (rotated 90 degrees CW)
000508 4000 0070      00531         db      b'00000000',b'01000000',b'01110000',b'00000000' ; J (rotated 180 degrees CW)
00050C 6000 4040      00532         db      b'00000000',b'01100000',b'01000000',b'01000000' ; J (rotated 270 degrees CW)
MPASM  5.51                          DEMO.ASM   3-23-2016  21:08:21         PAGE 20


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00533 ;                                block.l                                        
000510 7000 0040      00534         db      b'00000000',b'01110000',b'01000000',b'00000000' ; L (0 degrees)
000514 6000 2020      00535         db      b'00000000',b'01100000',b'00100000',b'00100000' ; L (rotated 90 degrees CW)
000518 E020 0000      00536         db      b'00100000',b'11100000',b'00000000',b'00000000' ; L (rotated 180 degrees CW)
00051C 4040 0060      00537         db      b'01000000',b'01000000',b'01100000',b'00000000' ; L (rotated 270 degrees CW)
                      00538 ;                                block.o                                        
000520 6000 0060      00539         db      b'00000000',b'01100000',b'01100000',b'00000000' ; O (0 degrees)
000524 6000 0060      00540         db      b'00000000',b'01100000',b'01100000',b'00000000' ; O (rotated 90 degrees CW)
000528 6000 0060      00541         db      b'00000000',b'01100000',b'01100000',b'00000000' ; O (rotated 180 degrees CW)
00052C 6000 0060      00542         db      b'00000000',b'01100000',b'01100000',b'00000000' ; O (rotated 270 degrees CW)
                      00543 ;                                block.s                                        
000530 6000 00C0      00544         db      b'00000000',b'01100000',b'11000000',b'00000000' ; S (0 degrees)
000534 6040 0020      00545         db      b'01000000',b'01100000',b'00100000',b'00000000' ; S (rotated 90 degrees CW)
000538 6000 00C0      00546         db      b'00000000',b'01100000',b'11000000',b'00000000' ; S (rotated 180 degrees CW)
00053C 6040 0020      00547         db      b'01000000',b'01100000',b'00100000',b'00000000' ; S (rotated 270 degrees CW)
                      00548 ;                                block.z                                        
000540 C000 0060      00549         db      b'00000000',b'11000000',b'01100000',b'00000000' ; Z (0 degrees)
000544 6020 0040      00550         db      b'00100000',b'01100000',b'01000000',b'00000000' ; Z (rotated 90 degrees CW)
000548 C000 0060      00551         db      b'00000000',b'11000000',b'01100000',b'00000000' ; Z (rotated 180 degrees CW)
00054C 6020 0040      00552         db      b'00100000',b'01100000',b'01000000',b'00000000' ; Z (rotated 270 degrees CW)
                      00553 ;                                block.t                                        
000550 E000 0040      00554         db      b'00000000',b'11100000',b'01000000',b'00000000' ; T (0 degrees)
000554 C040 0040      00555         db      b'01000000',b'11000000',b'01000000',b'00000000' ; T (rotated 90 degrees CW)
000558 E040 0000      00556         db      b'01000000',b'11100000',b'00000000',b'00000000' ; T (rotated 180 degrees CW)
00055C 6040 0040      00557         db      b'01000000',b'01100000',b'01000000',b'00000000' ; T (rotated 270 degrees CW)
                      00558 
                      00559 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      00560 
000560                00561 speedtab
000560 464C 3C41 484C 00562         db      .76,.70,.65,.60,.76,.72,.68,.64,.60,.56,.52,.48,.44,.40,.36,.33
       4044 383C 3034 
       282C 2124 
000570 1C1E 181A 1416 00563         db      .30,.28,.26,.24,.22,.20,.18,.17,.16,.15,.14,.13,.12,.12,.12,.12
       1112 0F10 0D0E 
       0C0C 0C0C 
                      00564 
                      00565 ;       db      .56,.50,.48,.44,.41,.38,.35,.32,.29,.26,.24,.22,.20,.19,.18,.17
                      00566 ;       db      .16,.16,.15,.15,.14,.14,.13,.13,.12,.12,.10,.10, .9, .9, .8, .8
                      00567 
                      00568 ;                                                                                                       
                                                                                                            
                      00569 
000580                00570 bin2bcd                                                 ; convert from bin to bcd
000580 6A00           00571         clrf    Bcd+0,access
000582 6A00           00572         clrf    Bcd+1,access
                      00573 ;       clrf    Bcd2,access
000584 0E10           00574         movlw   .16
000586 6E00           00575         movwf   Inner,access
                      00576 
000588                00577 gobinbcd
000588 3600           00578         rlcf    Bin+0,f,access
00058A 3600           00579         rlcf    Bin+1,f,access
                      00580 ;   rlcf        Bin2,f,access           ; ...
MPASM  5.51                          DEMO.ASM   3-23-2016  21:08:21         PAGE 21


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

00058C 5000           00581         movf    Bcd+0,w,access
00058E 2000           00582         addwfc  Bcd+0,w,access          ; 2* and carry
000590 0007           00583         daw
000592 6E00           00584         movwf   Bcd+0,access            ; Save result back
                      00585 
000594 5000           00586         movf    Bcd+1,W,access
000596 2000           00587         addwfc  Bcd+1,W,access
000598 0007           00588         daw
00059A 6E00           00589         movwf   Bcd+1,access
                      00590 
                      00591 ;       movf    Bcd+2,W,access          ; repeat for BcdX+1...
                      00592 ;       addwfc  Bcd+2,W,access
                      00593 ;       daw
                      00594 ;       movwf   Bcd+2,access            ; ...
                      00595 
00059C 2E00           00596         decfsz  Inner,f,access
00059E D???           00597         bra             gobinbcd
0005A0 0012           00598         return
                      00599 
                      00600 ;                                                                                                       
                                                                                                            
                      00601 
0005A2                00602 print.score.buf ; Bcd+0,Bcd+1 ---> Buffer
0005A2 EC?? F???      00603         call    clrbuf
0005A6 EE?? F0??      00604         lfsr    FSR0,Buffer+4
0005AA D???           00605         bra             p.sc
                      00606 
0005AC                00607 print.score             ; Bcd+0,Bcd+1 ---> BufferPause
0005AC EC?? F???      00608         call    clrbuf.pause
0005B0 EE?? F0??      00609         lfsr    FSR0,BufferPause+4
0005B4                00610 p.sc
0005B4 C??? F???      00611         movff   Score,Bin+0
0005B8 C??? F???      00612         movff   Score+1,Bin+1
0005BC EC?? F???      00613         call    bin2bcd                         ; conv
                      00614                                                         ; ripple blanking
0005C0 5000           00615         movf    Bcd+1,w,access
0005C2 0BF0           00616         andlw   0xF0                            ; isolate thousands
0005C4 E1??           00617         bnz             no.ripple                       ; if thousands not zero
0005C6 0EA0           00618         movlw   0xA0                            ; blank char instead of 0
0005C8 1200           00619         iorwf   Bcd+1,f,access          ; insert
                      00620 
0005CA 5000           00621         movf    Bcd+1,w,access
0005CC 0B0F           00622         andlw   0x0F                            ; isolate hundreds
0005CE E1??           00623         bnz             no.ripple                       ; if hundreds not zero
0005D0 0E0A           00624         movlw   0x0A                            ; blank char instead of 0
0005D2 1200           00625         iorwf   Bcd+1,f,access          ; insert
                      00626 
0005D4 5000           00627         movf    Bcd+0,w,access
0005D6 0BF0           00628         andlw   0xF0                            ; isolate tens
0005D8 E1??           00629         bnz             no.ripple                       ; if tens not zero
0005DA 0EA0           00630         movlw   0xA0                            ; blank char instead of 0
0005DC 1200           00631         iorwf   Bcd+0,f,access          ; insert
                      00632 
MPASM  5.51                          DEMO.ASM   3-23-2016  21:08:21         PAGE 22


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00633 ;       movf    Bcd+0,w,access
                      00634 ;       andlw   0x0F                            ; isolate ones
                      00635 ;       bnz             no.ripple                       ; if hundreds not zero
                      00636 ;       movlw   0x0A                            ; blank char instead of 0
                      00637 ;       iorwf   Bcd+0,f,access          ; insert
0005DE                00638 no.ripple
0005DE 3800           00639         swapf   Bcd+1,w,access
0005E0 0B0F           00640         andlw   0x0F                    ; isolate thousands
0005E2 EC?? F???      00641         call    one.byte.map
0005E6 3AE8           00642         swapf   WREG,f,access
0005E8 12EE           00643         iorwf   POSTINC0,f
0005EA 0009           00644         tblrd*+
0005EC 50F5           00645         movf    TABLAT,w,access
0005EE 3AE8           00646         swapf   WREG,f,access
0005F0 12EE           00647         iorwf   POSTINC0,f
0005F2 0009           00648         tblrd*+
0005F4 50F5           00649         movf    TABLAT,w,access
0005F6 3AE8           00650         swapf   WREG,f,access
0005F8 12EE           00651         iorwf   POSTINC0,f
0005FA 0009           00652         tblrd*+
0005FC 50F5           00653         movf    TABLAT,w,access
0005FE 3AE8           00654         swapf   WREG,f,access
000600 12EE           00655         iorwf   POSTINC0,f
000602 0009           00656         tblrd*+
000604 50F5           00657         movf    TABLAT,w,access
000606 3AE8           00658         swapf   WREG,f,access
000608 12ED           00659         iorwf   POSTDEC0,f
00060A 52ED           00660         movf    POSTDEC0,f              ; dummy
00060C 52ED           00661         movf    POSTDEC0,f              ; dummy
00060E 52ED           00662         movf    POSTDEC0,f              ; dummy
                      00663 
000610 5000           00664         movf    Bcd+1,w,access
000612 0B0F           00665         andlw   0x0F                    ; isolate hundreds
000614 EC?? F???      00666         call    one.byte.map
000618 12EE           00667         iorwf   POSTINC0,f
00061A 0009           00668         tblrd*+
00061C 50F5           00669         movf    TABLAT,w,access
00061E 12EE           00670         iorwf   POSTINC0,f
000620 0009           00671         tblrd*+
000622 50F5           00672         movf    TABLAT,w,access
000624 12EE           00673         iorwf   POSTINC0,f
000626 0009           00674         tblrd*+
000628 50F5           00675         movf    TABLAT,w,access
00062A 12EE           00676         iorwf   POSTINC0,f
00062C 0009           00677         tblrd*+
00062E 50F5           00678         movf    TABLAT,w,access
000630 12EE           00679         iorwf   POSTINC0,f
                      00680 
000632 6AEE           00681         clrf    POSTINC0                ; dummy
                      00682 
000634 3800           00683         swapf   Bcd+0,w,access
000636 0B0F           00684         andlw   0x0F                    ; isolate tens
000638 EC?? F???      00685         call    one.byte.map
MPASM  5.51                          DEMO.ASM   3-23-2016  21:08:21         PAGE 23


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

00063C 3AE8           00686         swapf   WREG,f,access
00063E 12EE           00687         iorwf   POSTINC0,f
000640 0009           00688         tblrd*+
000642 50F5           00689         movf    TABLAT,w,access
000644 3AE8           00690         swapf   WREG,f,access
000646 12EE           00691         iorwf   POSTINC0,f
000648 0009           00692         tblrd*+
00064A 50F5           00693         movf    TABLAT,w,access
00064C 3AE8           00694         swapf   WREG,f,access
00064E 12EE           00695         iorwf   POSTINC0,f
000650 0009           00696         tblrd*+
000652 50F5           00697         movf    TABLAT,w,access
000654 3AE8           00698         swapf   WREG,f,access
000656 12EE           00699         iorwf   POSTINC0,f
000658 0009           00700         tblrd*+
00065A 50F5           00701         movf    TABLAT,w,access
00065C 3AE8           00702         swapf   WREG,f,access
00065E 12ED           00703         iorwf   POSTDEC0,f
000660 52ED           00704         movf    POSTDEC0,f              ; dummy
000662 52ED           00705         movf    POSTDEC0,f              ; dummy
000664 52ED           00706         movf    POSTDEC0,f              ; dummy
                      00707 
000666 5000           00708         movf    Bcd+0,w,access
000668 0B0F           00709         andlw   0x0F                    ; isolate ones
00066A EC?? F???      00710         call    one.byte.map
00066E 12EE           00711         iorwf   POSTINC0,f
000670 0009           00712         tblrd*+
000672 50F5           00713         movf    TABLAT,w,access
000674 12EE           00714         iorwf   POSTINC0,f
000676 0009           00715         tblrd*+
000678 50F5           00716         movf    TABLAT,w,access
00067A 12EE           00717         iorwf   POSTINC0,f
00067C 0009           00718         tblrd*+
00067E 50F5           00719         movf    TABLAT,w,access
000680 12EE           00720         iorwf   POSTINC0,f
000682 0009           00721         tblrd*+
000684 50F5           00722         movf    TABLAT,w,access
000686 12EE           00723         iorwf   POSTINC0,f
000688 0012           00724         return
                      00725 
                      00726 ;                                                       
00068A                00727 moving.message
00068A 5200           00728         movf    Score+1,f,access
                      00729         ifnz
00068C A4D8               M         btfss   STATUS,Z,ACCESS
00068E 0012           00730         return                                  ; if score is >99, then no room for text
000690 5000           00731         movf    Score,w,access
000692 0F9C           00732         addlw   -.100
                      00733         ifc
000694 B0D8               M         btfsc   STATUS,C,ACCESS
000696 0012           00734         return                  ; if score is >99, then no room for text
                      00735 ;       
000698 EE06 F000      00736         lfsr    FSR0,Disp.text  ; dst ptr
MPASM  5.51                          DEMO.ASM   3-23-2016  21:08:21         PAGE 24


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

00069C 0E??           00737         movlw   low (txt.p)     ; text PAUSE
00069E 6EF6           00738         movwf   TBLPTRL,access
0006A0 0E??           00739         movlw   high (txt.p)
0006A2 6EF7           00740         movwf   TBLPTRH,access
0006A4 A4??           00741         btfss   FlagDemo,2              ; bit 2 set = showing final result
0006A6 D???           00742         bra             txt.ptr.set
0006A8 0E??           00743         movlw   low (txt.f)     ; final text PLAY TETRIS!
0006AA 6EF6           00744         movwf   TBLPTRL,access
0006AC 0E??           00745         movlw   high (txt.f)
0006AE 6EF7           00746         movwf   TBLPTRH,access
0006B0                00747 txt.ptr.set
0006B0 0009           00748         tblrd*+
0006B2 50F5           00749         movf    TABLAT,w,access
0006B4 6EEE           00750         movwf   POSTINC0
0006B6 E1??           00751         bnz             txt.ptr.set             ; copy all txt from rom to Disp.text
0006B8                00752 start.message.t         ;                                moving message start                           
                                                            
0006B8 EE06 F000      00753         lfsr    FSR0,Disp.text  ; initialize read ptr
0006BC                00754 next.char.t                             ; \\\\\\\\\\\\\\\\
0006BC 0E06           00755         movlw   .6
0006BE 6E00           00756         movwf   ColCount,access
0006C0 EC?? F???      00757         call    clrbuf2
0006C4                00758 gnc.t
0006C4 50EE           00759         movf    POSTINC0,w              ; get next char
0006C6 E0??           00760         bz              start.message.t ; if end of message detected
0006C8 0FE0           00761         addlw   -0x20                   ; ASCII " " offset
0006CA 0D0A           00762         mullw   .10                             ; bytes/char
0006CC 50F3           00763         movf    PRODL,w,access
0006CE 0F??           00764         addlw   low     (charg1)
0006D0 6EF6           00765         movwf   TBLPTRL                 ; low charg ptr
0006D2 50F4           00766         movf    PRODH,w,access
                      00767         ifc
0006D4 B0D8               M         btfsc   STATUS,C,ACCESS
0006D6 0F01           00768         addlw   1                               ; addc
0006D8 0F??           00769         addlw   high (charg1)
0006DA 6EF7           00770         movwf   TBLPTRH                 ; hi charg ptr
                      00771 
0006DC EE?? F0??      00772         lfsr    FSR1,Buffer2+1  ; start of next char in Buffer2 (defines vert text pos)
0006E0 0E09           00773         movlw   .9
0006E2                00774 go9txt.t
0006E2 0009           00775         TBLRD*+
0006E4 CFF5 FFE6      00776         movff   TABLAT,POSTINC1 ; transfer char bitmap from char gen to buffer2
0006E8 2EE8           00777         decfsz  WREG,f,access
0006EA D???           00778         bra             go9txt.t
0006EC                00779 next.column.t                   ; \\\\\\\\
                      00780                                                         ; press any key to return from moving message an
                            d start new game
0006EC B200           00781         btfsc   KeyEdge,1,access
0006EE 0012           00782         return
0006F0 B400           00783         btfsc   KeyEdge,2,access
0006F2 0012           00784         return
0006F4 B600           00785         btfsc   KeyEdge,3,access
0006F6 0012           00786         return
MPASM  5.51                          DEMO.ASM   3-23-2016  21:08:21         PAGE 25


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0006F8 B800           00787         btfsc   KeyEdge,4,access
0006FA 0012           00788         return
                      00789 
0006FC 0E12           00790         movlw   .18                             ; this determines moving message speed
0006FE                00791 wait.disp.t
                      00792         sync150
0006FE A400               M         btfss   Flag,2,ACCESS           ; 150 Hz handshaking sync
000700 D???               M         bra             $-2
000702 9400               M         bcf             Flag,2,ACCESS           ; reset sync flag
000704 2EE8           00793         decfsz  WREG,f,access
000706 D???           00794         bra             wait.disp.t             ; wait for period
                      00795 ;       
000708 EE?? F0??      00796         lfsr    FSR1,Buffer
00070C EE?? F0??      00797         lfsr    FSR2,Buffer2
                      00798 
000710 0E0A           00799         movlw   .10
000712                00800 moveleft9.t
                      00801         rcf
000712 90D8               M         bcf             STATUS,C,ACCESS
000714 36DE           00802         rlcf    POSTINC2,f
000716 36E6           00803         rlcf    POSTINC1,f              ; shift left buffer2 to buffer
000718 2EE8           00804         decfsz  WREG,f,access
00071A D???           00805         bra             moveleft9.t
                      00806 
00071C 2E00           00807         decfsz  ColCount,f,access
00071E D???           00808         bra             next.column.t; ////////
                      00809                                                         ; one ASCII char passed, go next char
000720 D???           00810         bra             next.char.t     ; ////////////////
                      00811 
                      00812                                         ;                                moving message end             
                                                                            
000722                00813 notxt
000722 0012           00814         return
                      00815 
000724                00816 one.byte.map
000724 0D06           00817         mullw   .6                              ; bytes/char
                      00818 
000726 0E??           00819         movlw   low (charg4)
000728 6EF6           00820         movwf   TBLPTRL,access
00072A 0E??           00821         movlw   high (charg4)
00072C 6EF7           00822         movwf   TBLPTRH,access
                      00823 
00072E 50F3           00824         movf    PRODL,w,access
000730 26F6           00825         addwf   TBLPTRL,f,access
                      00826         ifc
000732 B0D8               M         btfsc   STATUS,C,ACCESS
000734 2AF7           00827         incf    TBLPTRH,f,access
                      00828 
000736 0009           00829         tblrd*+
000738 50F5           00830         movf    TABLAT,w,access
00073A 0012           00831         return
                      00832 
00073C                00833 txt.p
MPASM  5.51                          DEMO.ASM   3-23-2016  21:08:21         PAGE 26


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

00073C 6150 7375 2065 00834         db              "Pause  ",0
       0020 
000744                00835 txt.f
000744 4C50 5941 5420 00836         db              "PLAY TETRIS!  ",0
       5445 4952 2153 
       2020 0000 
                      00837 
                      00838 
                      00151         #include <accel.inc>    ; accelerator demo
                      00001 
  00000730            00002 Buffer3         equ     0x730   ; aux buffer (used to stabilize output)
                      00003                                                 ; Everything is prepared in Buffer3 and then it is moved
                             to Buffer
  00000740            00004 BittabR         equ     0x740   ; bit table for bit position conversion
  00000748            00005 Dots            equ     0x748   ; X,Y dot coordinates (table length 2x.44)
                      00006 
                      00007 ;*******************************************************************************
                      00008 ;*******************************************************************************
                      00009 ;*******************************************************************************
                      00010 ;                                       A C C E L E R O M E T E R         (MAIN LOOP)                   
                                            
                      00011 ;*******************************************************************************
                      00012 ;*******************************************************************************
                      00013 ;*******************************************************************************
                      00014 
000754                00015 accelerometer
000754 6AA6           00016         clrf    EECON1,access           ; Disable write to EEPROM
000756 9000           00017         bcf             RXFlag,0,access ; disable RX
000758 8A00           00018         bsf             Flag,5,access   ; bit 5 set = Only two steps for key 0, without pause
00075A EE07 F040      00019         lfsr    FSR0,BittabR
00075E 0E08           00020         movlw   .8
000760 6E00           00021         movwf   Inner,access
000762 0E80           00022         movlw   0x80                            ; 10000000
000764                00023 bittab8
000764 6EEE           00024         movwf   POSTINC0                        ; preset BittabR to 10000000 01000000 00100000... 000000
                            01
000766 42E8           00025         rrncf   WREG,f,access
000768 2E00           00026         decfsz  Inner,f,access
00076A D???           00027         bra             bittab8
                      00028 
00076C 6A00           00029         clrf    KeyEdge,access
00076E 010?           00030         banksel Buffer2                         ; all BANKED modes will address bank 7
                      00031 
000770 EC?? F???      00032         call    snif.accel
000774 0E04           00033         movlw   .4
000776 6E00           00034         movwf   Inner,access
000778                00035 waitacc
                      00036 ;       sync150
000778 2E00           00037         decfsz  Inner,f,access
00077A D???           00038         bra             waitacc
00077C EC?? F???      00039         call    snif.accel
                      00040 
000780 EC?? F???      00041         call    reset.i2c
MPASM  5.51                          DEMO.ASM   3-23-2016  21:08:21         PAGE 27


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

000784 EC?? F???      00042         call    createtable
                      00043 
000788                00044 liquid.farm
000788 EC?? F???      00045         call    get.accel               ; *** read g
00078C EC?? F???      00046         call    div.clip                ; adjust result
                      00047                                                         ; dice shaking test                     
000790 5000           00048         movf    AccX,w,access
000792 2400           00049         addwf   AccY,w,access
000794 E2??           00050         bc              g.ovf
000796 2400           00051         addwf   AccZ,w,access
000798 E2??           00052         bc              g.ovf
00079A 0F24           00053         addlw   -.220                   ; dice switch threshold
                      00054         ifnc
00079C A0D8               M         btfss   STATUS,C,ACCESS
00079E EF?? F???      00055         goto            not.ovf         ; if no switch to dice
0007A2                00056 g.ovf                                           ; switch to dice
0007A2 EC?? F???      00057         call    rndarea
                      00058 
0007A6 EC?? F???      00059         call    clrbuf2
0007AA EC?? F???      00060         call    rnd
0007AE 0B07           00061         andlw   7
0007B0 0FFA           00062         addlw   -6
0007B2 E2??           00063         bc              g.ovf                   ; >5, rnd again
0007B4 0F07           00064         addlw   7                               ; restore+1, w contains dice number 1...6
                      00065 
0007B6 A0E8           00066         btfss   WREG,0,access
0007B8 D???           00067         bra             no1
0007BA 8700           00068         bsf             Buffer2+3,3,banked      ; central dot, existing only on numbers 1, 3, 5
0007BC 8900           00069         bsf             Buffer2+3,4,banked
0007BE 8700           00070         bsf             Buffer2+4,3,banked
0007C0 8900           00071         bsf             Buffer2+4,4,banked
0007C2                00072 no1
                      00073         rcf
0007C2 90D8               M         bcf             STATUS,C,ACCESS
0007C4 32E8           00074         rrcf    WREG,f,access           ; /2
0007C6 E0??           00075         bz              drawed.num                      ; if it was 1
                      00076 
0007C8 06E8           00077         decf    WREG,f,access
0007CA E0??           00078         bz              draw2.num                       ; if it was 2 or 3
0007CC 06E8           00079         decf    WREG,f,access
0007CE E0??           00080         bz              draw4.num                       ; if it was 4 or 5
                      00081                                                                 ; if it was 6
0007D0 8700           00082         bsf             Buffer2+0,3,banked      ; upper middle dot (6)
0007D2 8900           00083         bsf             Buffer2+0,4,banked
0007D4 8700           00084         bsf             Buffer2+1,3,banked
0007D6 8900           00085         bsf             Buffer2+1,4,banked
0007D8 8700           00086         bsf             Buffer2+6,3,banked      ; lower middle dot (6)
0007DA 8900           00087         bsf             Buffer2+6,4,banked
0007DC 8700           00088         bsf             Buffer2+7,3,banked
0007DE 8900           00089         bsf             Buffer2+7,4,banked
0007E0                00090 draw4.num
0007E0 8D00           00091         bsf             Buffer2+0,6,banked      ; upper left dot (6, 4)
0007E2 8F00           00092         bsf             Buffer2+0,7,banked
MPASM  5.51                          DEMO.ASM   3-23-2016  21:08:21         PAGE 28


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0007E4 8D00           00093         bsf             Buffer2+1,6,banked
0007E6 8F00           00094         bsf             Buffer2+1,7,banked
0007E8 8100           00095         bsf             Buffer2+6,0,banked      ; lower right dot (6, 4)
0007EA 8300           00096         bsf             Buffer2+6,1,banked
0007EC 8100           00097         bsf             Buffer2+7,0,banked
0007EE 8300           00098         bsf             Buffer2+7,1,banked
0007F0                00099 draw2.num
0007F0 8100           00100         bsf             Buffer2+0,0,banked      ; upper right dot (6, 4, 2)
0007F2 8300           00101         bsf             Buffer2+0,1,banked
0007F4 8100           00102         bsf             Buffer2+1,0,banked
0007F6 8300           00103         bsf             Buffer2+1,1,banked
0007F8 8D00           00104         bsf             Buffer2+6,6,banked      ; lower left dot (6, 4, 2)
0007FA 8F00           00105         bsf             Buffer2+6,7,banked
0007FC 8D00           00106         bsf             Buffer2+7,6,banked
0007FE 8F00           00107         bsf             Buffer2+7,7,banked
000800                00108 drawed.num
                      00109 ;       
000800 0E80           00110         movlw   .128                    ; pixels to clear
000802 6E00           00111         movwf   Mc0,access
000804 6A00           00112         clrf    Mc2,access      ; 7-bit pseudornd register (X=X*17+7)
000806                00113 clear.dice
                      00114         sync150                                 ; sync 150 Hz
000806 A400               M         btfss   Flag,2,ACCESS           ; 150 Hz handshaking sync
000808 D???               M         bra             $-2
00080A 9400               M         bcf             Flag,2,ACCESS           ; reset sync flag
00080C 5000           00115         movf    Mc2,w,access
00080E 0D11           00116         mullw   .17
000810 0F07           00117         addlw   .7
000812 0B7F           00118         andlw   0x7f
000814 6E00           00119         movwf   Mc2,access
                      00120 
000816 EE27 F040      00121         lfsr    FSR2,BittabR
00081A 5000           00122         movf    Mc2,w,access
00081C 0B07           00123         andlw   .7
00081E 26D9           00124         addwf   FSR2L,f,access          ; mask bit in [INDF2]
                      00125                                 
000820 4000           00126         rrncf   Mc2,w,access
000822 42E8           00127         rrncf   WREG,f,access
000824 42E8           00128         rrncf   WREG,f,access
000826 0B0F           00129         andlw   0x0f
000828 EE?? F0??      00130         lfsr    FSR0,Buffer
00082C 26E9           00131         addwf   FSR0L,f,access
                      00132 
00082E 50DF           00133         movf    INDF2,w,access
000830 1EE8           00134         comf    WREG,f,access
000832 16EF           00135         andwf   INDF0,f                         ; reset pixel
                      00136 ;       
000834 EC?? F???      00137         call    ior.bufer2.buffer       ; IOR buffers
000838 2E00           00138         decfsz  Mc0,f,access
00083A D???           00139         bra             clear.dice
                      00140                                                         ; final clear
00083C EC?? F???      00141         call    clrbuf2
000840 EC?? F???      00142         call    ior.bufer2.buffer       ; final IOR buffers
MPASM  5.51                          DEMO.ASM   3-23-2016  21:08:21         PAGE 29


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00143 ;       
000844 0EC8           00144         movlw   .200
000846 6E00           00145         movwf   Mc1,access
000848                00146 hold.dice
                      00147         sync150                                 ; sync 150 Hz
000848 A400               M         btfss   Flag,2,ACCESS           ; 150 Hz handshaking sync
00084A D???               M         bra             $-2
00084C 9400               M         bcf             Flag,2,ACCESS           ; reset sync flag
                      00148                                                         ; test for shaking before waiting time elapsed
00084E EC?? F???      00149         call    get.accel               ; *** read g
000852 EC?? F???      00150         call    div.clip                ; adjust result
000856 5000           00151         movf    AccX,w,access
000858 2400           00152         addwf   AccY,w,access
00085A E2??           00153         bc              not.ovf
00085C 2400           00154         addwf   AccZ,w,access
00085E E2??           00155         bc              not.ovf
000860 0F24           00156         addlw   -.220                   ; dice switch threshold
000862 E2??           00157         bc              not.ovf                 ; don't wait
                      00158 
000864 2E00           00159         decfsz  Mc1,f,access
000866 D???           00160         bra             hold.dice
000868                00161 not.ovf
                      00162 ;                                                                                               
                      00163 ;                                       noise                                           
                      00164 ;                                                                                               
000868 5000           00165         movf    AccY,w,access
00086A 0FCE           00166         addlw   -.50                    ; other angle limit for noise add
00086C E3??           00167         bnc             nonoisex
00086E 5000           00168         movf    AccX,w,access
000870 0FFB           00169         addlw   -.5                             ; angle limit for noise add
000872 E2??           00170         bc              nonoisex
                      00171 
000874 EC?? F???      00172         call    rnd
000878 0B0F           00173         andlw   0x0f
00087A E1??           00174         bnz             nonoisex
                      00175                                                         ; add noise x
00087C 0E0A           00176         movlw   .10                             ; noise value
00087E 2600           00177         addwf   AccX,f,access
000880 7000           00178         btg             AccX+1,0,access ; toggle angle
000882                00179 nonoisex
000882 5000           00180         movf    AccX,w,access
000884 0FCE           00181         addlw   -.50                    ; other angle limit for noise add
000886 E3??           00182         bnc             nonoisey
000888 5000           00183         movf    AccY,w,access
00088A 0FFB           00184         addlw   -.5                             ; angle limit for noise add
00088C E2??           00185         bc              nonoisey
                      00186 
00088E EC?? F???      00187         call    rnd
000892 0B0F           00188         andlw   0x0f
000894 E1??           00189         bnz             nonoisey
                      00190                                                         ; add noise y
000896 0E0A           00191         movlw   .10                             ; noise value
000898 2600           00192         addwf   AccY,f,access
MPASM  5.51                          DEMO.ASM   3-23-2016  21:08:21         PAGE 30


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

00089A 7000           00193         btg             AccY+1,0,access ; toggle angle
00089C                00194 nonoisey
                      00195 ;       
                      00196 ;       sync150x8                               ; sync 150x8 Hz
00089C EC?? F???      00197         call    drawdots                ; CLS and draw dots from [Dots] table with coordinates
                      00198 
0008A0 90??           00199         bcf             liqflag,0               ; if set, then move X
0008A2 EC?? F???      00200         call    rnd
0008A6 0B0F           00201         andlw   0x0f
0008A8 5C00           00202         subwf   AccX,w,access   ; probability of moving across X axis
                      00203         ifc                                             ; if C set, then move pixel accross X axis
0008AA B0D8               M         btfsc   STATUS,C,ACCESS
0008AC 80??           00204         bsf             liqflag,0               ; flag move X
                      00205 
0008AE 92??           00206         bcf             liqflag,1               ; if set, then move Y
0008B0 EC?? F???      00207         call    rnd
0008B4 0B0F           00208         andlw   0x0f
0008B6 5C00           00209         subwf   AccY,w,access   ; probability of moving across Y axis
                      00210         ifc                                             ; if C set, then move pixel accross X axis
0008B8 B0D8               M         btfsc   STATUS,C,ACCESS
0008BA 82??           00211         bsf             liqflag,1               ; flag move Y
                      00212                                         ; move random dot coordinates X/Y +/- if new location is free
0008BC                00213 findfree
0008BC EC?? F???      00214         call    rnd
0008C0 0B3F           00215         andlw   b'00111111'
0008C2 0FD4           00216         addlw   -.44
0008C4 E2??           00217         bc              findfree                ; if >=44
0008C6 0F2C           00218         addlw   .44                             ; restore
0008C8 24E8           00219         addwf   WREG,w,access   ; x2
0008CA 0F48           00220         addlw   low (Dots+Offset)       ; Dots + 2 * rnd(44)
0008CC 6EE9           00221         movwf   FSR0L
0008CE 0E07           00222         movlw   high (Dots+Offset)
0008D0 6EEA           00223         movwf   FSR0H
                      00224 
0008D2 A0??           00225         btfss   liqflag,0               ; if set, then move X
0008D4 D???           00226         bra             nomovex
0008D6 A0??           00227         btfss   AccX+1,0
0008D8 EC?? F???      00228         call    moveXleft               ; move X left
0008DC B0??           00229         btfsc   AccX+1,0
0008DE EC?? F???      00230         call    moveXright              ; move X right
0008E2                00231 nomovex
0008E2 52EE           00232         movf    POSTINC0,f,access       ; dummy
0008E4 A2??           00233         btfss   liqflag,1               ; if set, then move Y
0008E6 D???           00234         bra             nomovey
0008E8 A0??           00235         btfss   AccY+1,0
0008EA EC?? F???      00236         call    moveYback               ; move Y back
0008EE B0??           00237         btfsc   AccY+1,0
0008F0 EC?? F???      00238         call    moveYfront              ; move Y front
0008F4                00239 nomovey
0008F4 EF?? F???      00240         goto    liquid.farm
                      00241 
0008F8                00242 dottable        ; X,Y coordinates for start position (when accelerometer pgm started)
                      00243                         ; Note: 16-bit hex is big endian representation, lo byte should be first
MPASM  5.51                          DEMO.ASM   3-23-2016  21:08:21         PAGE 31


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00244                         ; but here it doesn't look so
0008F8 0501 0601 0701 00245         dw                     0x0501,0x0601,0x0701,0x0801,0x0901,0x0a01
       0801 0901 0A01 
000904 0402 0502 0602 00246         dw              0x0402,0x0502,0x0602,0x0702,0x0802,0x0902,0x0a02,0x0b02
       0702 0802 0902 
       0A02 0B02 
000914 0403 0503 0603 00247         dw              0x0403,0x0503,0x0603,0x0703,0x0803,0x0903,0x0a03,0x0b03
       0703 0803 0903 
       0A03 0B03 
000924 0404 0504 0604 00248         dw              0x0404,0x0504,0x0604,0x0704,0x0804,0x0904,0x0a04,0x0b04
       0704 0804 0904 
       0A04 0B04 
000934 0405 0505 0605 00249         dw              0x0405,0x0505,0x0605,0x0705,0x0805,0x0905,0x0a05,0x0b05
       0705 0805 0905 
       0A05 0B05 
000944 0506 0606 0706 00250         dw                     0x0506,0x0606,0x0706,0x0806,0x0906,0x0a06
       0806 0906 0A06 
                      00251 
                      00252 ;       movff   AccX+0,Buffer3+0
                      00253 ;       movff   AccX+1,Buffer3+1
                      00254 ;       movff   AccY+0,Buffer3+2
                      00255 ;       movff   AccY+1,Buffer3+3
                      00256 ;       movff   AccZ+0,Buffer3+4
                      00257 ;       movff   AccZ+1,Buffer3+5
                      00258 ;                                                                                                       
                                                                            
                      00259 ;                                        S U B S                                                        
                                                                    
                      00260 ;                                                                                                       
                                                                            
                      00261 
                      00262 ;                                                       
000950                00263 moveXleft
000950 50EF           00264         movf    INDF0,w
                      00265         ifz
000952 B4D8               M         btfsc   STATUS,Z,ACCESS
000954 0012           00266         return                                  ; left border
000956 04EE           00267         decf    POSTINC0,w
000958 6E00           00268         movwf   Xtest,access
00095A CFED F???      00269         movff   POSTDEC0,Ytest
00095E EC?? F???      00270         call    is.it.free              ; is there free pixel on new location?
                      00271         ifnc
000962 A0D8               M         btfss   STATUS,C,ACCESS
000964 06EF           00272         decf    INDF0,f                 ; move left
000966 0012           00273         return
000968                00274 moveXright
000968 50EF           00275         movf    INDF0,w
00096A 0A07           00276         xorlw   7
                      00277         ifz
00096C B4D8               M         btfsc   STATUS,Z,ACCESS
00096E 0012           00278         return                                  ; right border
000970 28EE           00279         incf    POSTINC0,w
000972 6E00           00280         movwf   Xtest,access
MPASM  5.51                          DEMO.ASM   3-23-2016  21:08:21         PAGE 32


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

000974 CFED F???      00281         movff   POSTDEC0,Ytest
000978 EC?? F???      00282         call    is.it.free              ; is there free pixel on new location?
                      00283         ifnc
00097C A0D8               M         btfss   STATUS,C,ACCESS
00097E 2AEF           00284         incf    INDF0,f                 ; move right
000980 0012           00285         return
000982                00286 moveYback
000982 50EF           00287         movf    INDF0,w
000984 0A0F           00288         xorlw   0xf
                      00289         ifz
000986 B4D8               M         btfsc   STATUS,Z,ACCESS
000988 0012           00290         return                                  ; lower border
00098A 28ED           00291         incf    POSTDEC0,w
00098C 6E00           00292         movwf   Ytest,access
00098E CFEE F???      00293         movff   POSTINC0,Xtest
000992 EC?? F???      00294         call    is.it.free              ; is there free pixel on new location?
                      00295         ifnc
000996 A0D8               M         btfss   STATUS,C,ACCESS
000998 2AEF           00296         incf    INDF0,f                 ; move down
00099A 0012           00297         return
00099C                00298 moveYfront
00099C 50EF           00299         movf    INDF0,w
                      00300         ifz
00099E B4D8               M         btfsc   STATUS,Z,ACCESS
0009A0 0012           00301         return                                  ; upper border
0009A2 04ED           00302         decf    POSTDEC0,w
0009A4 6E00           00303         movwf   Ytest,access
0009A6 CFEE F???      00304         movff   POSTINC0,Xtest
0009AA EC?? F???      00305         call    is.it.free              ; is there free pixel on new location?
                      00306         ifnc
0009AE A0D8               M         btfss   STATUS,C,ACCESS
0009B0 06EF           00307         decf    INDF0,f                 ; move up
0009B2 0012           00308         return
                      00309 ;                                               
0009B4                00310 is.it.free                              ; test if there is a dot on Xtest, Ytest, set C if occupied
0009B4 EE17 F048      00311         lfsr    FSR1,Dots
0009B8 0E2C           00312         movlw   .44                             ; dots to test
0009BA 6E00           00313         movwf   Block,access
                      00314 
0009BC                00315 test44dots
0009BC 50E6           00316         movf    POSTINC1,w
0009BE 6200           00317         cpfseq  Xtest,access
0009C0 D???           00318         bra             different
0009C2 50E7           00319         movf    INDF1,w
0009C4 6200           00320         cpfseq  Ytest,access
0009C6 D???           00321         bra             different
                      00322         scf                                             ; match found, set C
0009C8 80D8               M         bsf             STATUS,C,ACCESS
0009CA 0012           00323         return
0009CC                00324 different
                      00325 
0009CC 52E6           00326         movf    POSTINC1,f              ; dummy
0009CE 2E00           00327         decfsz  Block,f,access
MPASM  5.51                          DEMO.ASM   3-23-2016  21:08:21         PAGE 33


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0009D0 D???           00328         bra             test44dots
                      00329 
                      00330         rcf                                             ; match NOT found, reset C
0009D2 90D8               M         bcf             STATUS,C,ACCESS
0009D4 0012           00331         return
                      00332 
                      00333 ;                                       
0009D6                00334 createtable                     ;               copy table from rom to ram
0009D6 0E??           00335         movlw   low (dottable+Offset)
0009D8 6EF6           00336         movwf   TBLPTRL,access
0009DA 0E??           00337         movlw   high (dottable+Offset)
0009DC 6EF7           00338         movwf   TBLPTRH,access
0009DE EE07 F048      00339         lfsr    FSR0,Dots
0009E2 0E58           00340         movlw   .44*2                                   ; number of dots*2
0009E4 6E00           00341         movwf   Inner,access
0009E6                00342 go44x2
0009E6 0009           00343         tblrd*+
0009E8 CFF5 FFEE      00344         movff   TABLAT,POSTINC0
0009EC 2E00           00345         decfsz  Inner,f,access
0009EE D???           00346         bra             go44x2
0009F0 0012           00347         return
                      00348 ;                                       
                      00349 
0009F2                00350 drawdots                        ;               clear screen and draw all dots
0009F2 EE17 F030      00351         lfsr    FSR1,Buffer3
0009F6 EC?? F???      00352         call    clrx                    ; clrbuf3
                      00353 
0009FA EE07 F048      00354         lfsr    FSR0,Dots
0009FE 0E2C           00355         movlw   .44                                     ; number of dots
000A00 6E00           00356         movwf   Inner,access
000A02                00357 godraw44
000A02 EE27 F040      00358         lfsr    FSR2,BittabR
000A06 EE17 F030      00359         lfsr    FSR1,Buffer3
000A0A 50EE           00360         movf    POSTINC0,w                      ; get X
000A0C 26D9           00361         addwf   FSR2L,f,access          ; bitmask is now in [INDF2]
000A0E 50EE           00362         movf    POSTINC0,w                      ; get Y
000A10 0F30           00363         addlw   low Buffer3
000A12 6EE1           00364         movwf   FSR1L                           ; FSR1 points to dot in ram
000A14 50DF           00365         movf    INDF2,w,access
000A16 12E7           00366         iorwf   INDF1,f                         ; put dot in place
                      00367 
000A18 2E00           00368         decfsz  Inner,f,access
000A1A D???           00369         bra             godraw44
                      00370 
000A1C EE17 F030      00371         lfsr    FSR1,Buffer3            ; Buffer3 ---> Buffer
000A20 EE?? F0??      00372         lfsr    FSR2,Buffer
000A24 EC?? F???      00373         call    move.fsr1.fsr2
                      00374 
000A28 0012           00375         return
                      00376 ;                                       
000A2A                00377 div.clip                        ; scale down accelerometer output, ABS and clip it to 255
                      00378 ;       divide                  
000A2A EC?? F???      00379         call    div2
MPASM  5.51                          DEMO.ASM   3-23-2016  21:08:21         PAGE 34


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

000A2E EC?? F???      00380         call    div2
000A32 EC?? F???      00381         call    div2
000A36 EC?? F???      00382         call    div2
000A3A EC?? F???      00383         call    div2
                      00384 
000A3E 5000           00385         movf    WhoAmI,w,access
000A40 0AE5           00386         xorlw   0xE5                    ; ADXL345 ID
000A42 E1??           00387         bnz             nomult8
                      00388                                                         ; multiply by 8, as ADXL345 has lower sensitivit
                            y
                      00389         rcf
000A44 90D8               M         bcf             STATUS,C,ACCESS
000A46 3600           00390         rlcf    AccX+0,f,access
                      00391         rcf
000A48 90D8               M         bcf             STATUS,C,ACCESS
000A4A 3600           00392         rlcf    AccX+0,f,access
                      00393         rcf
000A4C 90D8               M         bcf             STATUS,C,ACCESS
000A4E 3600           00394         rlcf    AccY+0,f,access
                      00395         rcf
000A50 90D8               M         bcf             STATUS,C,ACCESS
000A52 3600           00396         rlcf    AccY+0,f,access
                      00397         rcf
000A54 90D8               M         bcf             STATUS,C,ACCESS
000A56 3600           00398         rlcf    AccZ+0,f,access
000A58                00399 nomult8
                      00400 ;                                               ABS X, clip to 255                      
000A58 A400           00401         btfss   AccX+1,2,access         ; sign bit
000A5A D???           00402         bra             pozitx                          ; if sign +
                      00403 
000A5C 6C00           00404         negf    AccX+0,access           ; if sign -
000A5E 5000           00405         movf    AccX+1,w,access
000A60 0B03           00406         andlw   3                                       ; isolate bits 8 and 9
000A62 0A03           00407         xorlw   3                                       ; test if it was =XXXXXX11 (8 bit range)
                      00408         ifnz
000A64 A4D8               M         btfss   STATUS,Z,ACCESS
000A66 6800           00409         setf    AccX+0,access           ; if >255 then =255
000A68 0E01           00410         movlw   1
000A6A 6E00           00411         movwf   AccX+1,access           ; new sign -
000A6C D???           00412         bra             okx
000A6E                00413 pozitx
000A6E 5000           00414         movf    AccX+1,w,access         ; dummy, test if =0
000A70 0B03           00415         andlw   3
                      00416         ifnz
000A72 A4D8               M         btfss   STATUS,Z,ACCESS
000A74 6800           00417         setf    AccX+0,access           ; if >255 then =255
000A76 6A00           00418         clrf    AccX+1,access
000A78                00419 okx
                      00420 ;                                               ABS Y, clip to 255                      
000A78 A400           00421         btfss   AccY+1,2,access         ; sign bit
000A7A D???           00422         bra             pozity                          ; if sign +
                      00423 
000A7C 6C00           00424         negf    AccY+0,access           ; if sign -
MPASM  5.51                          DEMO.ASM   3-23-2016  21:08:21         PAGE 35


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

000A7E 5000           00425         movf    AccY+1,w,access
000A80 0B03           00426         andlw   3                                       ; isolate bits 8 and 9
000A82 0A03           00427         xorlw   3                                       ; test if it was =XXXXXX11 (8 bit range)
                      00428         ifnz
000A84 A4D8               M         btfss   STATUS,Z,ACCESS
000A86 6800           00429         setf    AccY+0,access           ; if >255 then =255
000A88 0E01           00430         movlw   1
000A8A 6E00           00431         movwf   AccY+1,access           ; new sign -
000A8C D???           00432         bra             oky
000A8E                00433 pozity
000A8E 5000           00434         movf    AccY+1,w,access         ; dummy, test if =0
000A90 0B03           00435         andlw   3
                      00436         ifnz
000A92 A4D8               M         btfss   STATUS,Z,ACCESS
000A94 6800           00437         setf    AccY+0,access           ; if >255 then =255
000A96 6A00           00438         clrf    AccY+1,access
000A98                00439 oky
                      00440 ;                                               ABS Z, clip to 255                      
000A98 A400           00441         btfss   AccZ+1,2,access         ; sign bit
000A9A D???           00442         bra             pozitz                          ; if sign +
                      00443 
000A9C 6C00           00444         negf    AccZ+0,access           ; if sign -
000A9E 5000           00445         movf    AccZ+1,w,access
000AA0 0B03           00446         andlw   3                                       ; isolate bits 8 and 9
000AA2 0A03           00447         xorlw   3                                       ; test if it was =XXXXXX11 (8 bit range)
                      00448         ifnz
000AA4 A4D8               M         btfss   STATUS,Z,ACCESS
000AA6 6800           00449         setf    AccZ+0,access           ; if >255 then =255
000AA8 0E01           00450         movlw   1
000AAA 6E00           00451         movwf   AccZ+1,access           ; new sign -
000AAC D???           00452         bra             okz
000AAE                00453 pozitz
000AAE 5000           00454         movf    AccZ+1,w,access         ; dummy, test if =0
000AB0 0B03           00455         andlw   3
                      00456         ifnz
000AB2 A4D8               M         btfss   STATUS,Z,ACCESS
000AB4 6800           00457         setf    AccZ+0,access           ; if >255 then =255
000AB6 6A00           00458         clrf    AccZ+1,access
000AB8                00459 okz
000AB8 0012           00460         return
                      00461 
                      00462 ;                                                               
000ABA                00463 div2                                                    ; divide /2
                      00464         rcf
000ABA 90D8               M         bcf             STATUS,C,ACCESS
000ABC 3200           00465         rrcf    AccX+1,f,access
000ABE 3200           00466         rrcf    AccX+0,f,access
                      00467         rcf
000AC0 90D8               M         bcf             STATUS,C,ACCESS
000AC2 3200           00468         rrcf    AccY+1,f,access
000AC4 3200           00469         rrcf    AccY+0,f,access
                      00470         rcf
000AC6 90D8               M         bcf             STATUS,C,ACCESS
MPASM  5.51                          DEMO.ASM   3-23-2016  21:08:21         PAGE 36


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

000AC8 3200           00471         rrcf    AccZ+1,f,access
000ACA 3200           00472         rrcf    AccZ+0,f,access
000ACC 0012           00473         return
                      00474 ;                                                               
000ACE                00475 rndarea
000ACE EE07 F030      00476         lfsr    FSR0,Buffer3
000AD2 0E10           00477         movlw   .16
000AD4 6E00           00478         movwf   Inner,access
000AD6                00479 rnda.16
000AD6 EC?? F???      00480         call    rnd
000ADA 6E00           00481         movwf   Tempw,access
000ADC EC?? F???      00482         call    rnd
000AE0 1400           00483         andwf   Tempw,w,access
000AE2 6EEE           00484         movwf   POSTINC0
                      00485 
000AE4 2E00           00486         decfsz  Inner,f,access
000AE6 D???           00487         bra             rnda.16
000AE8 0012           00488         return
                      00489 
                      00490 ;                                                                                                       
                                                                            
                      00491 
  000000D0            00492 sladdr  equ             b'11010000'
  000000A6            00493 sladdr2 equ             0xA6                    ; 0x3A if SDO/Alt Address is high
                      00494 
                      00495 writreg         macro regdata
                      00496         movlw   regdata
                      00497         call    tx.i2c.ack
                      00498                         endm
                      00499 ;                                                                                                       
                                                                            
000AEA                00500 reset.i2c:
000AEA 988A           00501         bcf             accsda,ACCESS   ; default output lo (pseudo open drain)
000AEC 948A           00502         bcf             accscl,ACCESS   ; default output lo (pseudo open drain)
000AEE EC?? F???      00503         call    t38
000AF2 EC?? F???      00504         call    i2c.stop                ; stop bit
000AF6 9493           00505         bcf             accscl.ts,ACCESS        ; MCU clock pin low
000AF8 EC?? F???      00506         call    t38
000AFC EC?? F???      00507         call    i2c.stop                ; stop bit
000B00 EC?? F???      00508         call    t38
000B04 0012           00509         return
                      00510 
                      00511 ;                               A C C E L E R O M E T E R                                               
                                                    
                      00512 
000B06                00513 snif.accel                              ; auto detect accelerometer type
000B06 988A           00514         bcf             accsda,ACCESS   ; default output lo (pseudo open drain)
000B08 948A           00515         bcf             accscl,ACCESS   ; default output lo (pseudo open drain)
                      00516 
                      00517 ;                               test if it is ADXL345                                           
000B0A EC?? F???      00518         call    i2c.start       ; start
                      00519         writreg sladdr2         ; request for slave #0xA6
000B0E 0EA6               M         movlw   sladdr2
MPASM  5.51                          DEMO.ASM   3-23-2016  21:08:21         PAGE 37


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

000B10 EC?? F???          M         call    tx.i2c.ack
                      00520         writreg 00h                     ; addr 0x00 (Device ID)
000B14 0E00               M         movlw   00h
000B16 EC?? F???          M         call    tx.i2c.ack
000B1A EC?? F???      00521         call    i2c.start       ; restart
                      00522         writreg sladdr2+1       ; request for slave #0xA6+1 (+1 because this is RD) 
000B1E 0EA7               M         movlw   sladdr2+1
000B20 EC?? F???          M         call    tx.i2c.ack
000B24 EC?? F???      00523         call    get.data
000B28 EC?? F???      00524         call    i2c.nack        ; put NACK
000B2C EC?? F???      00525         call    i2c.stop        ; stop
000B30 0AE5           00526         xorlw   0xE5
000B32 0EE5           00527         movlw   0xE5
                      00528         ifz
000B34 B4D8               M         btfsc   STATUS,Z,ACCESS
000B36 6E00           00529         movwf   WhoAmI,access   ; if =0xE5, then store
                      00530 ;                               test if it is GY521                                                     
000B38 EC?? F???      00531         call    i2c.start       ; start
                      00532         writreg sladdr          ; request for slave #0xD0
000B3C 0ED0               M         movlw   sladdr
000B3E EC?? F???          M         call    tx.i2c.ack
                      00533         writreg 0x75            ; addr 0x75 (Device ID)
000B42 0E75               M         movlw   0x75
000B44 EC?? F???          M         call    tx.i2c.ack
000B48 EC?? F???      00534         call    i2c.start       ; restart
                      00535         writreg sladdr+1        ; request for slave #0xD0+1 (+1 because this is RD) 
000B4C 0ED1               M         movlw   sladdr+1
000B4E EC?? F???          M         call    tx.i2c.ack
000B52 EC?? F???      00536         call    get.data
000B56 EC?? F???      00537         call    i2c.nack        ; put NACK
000B5A EC?? F???      00538         call    i2c.stop        ; stop
000B5E 0A68           00539         xorlw   0x68
000B60 0E68           00540         movlw   0x68
                      00541         ifz
000B62 B4D8               M         btfsc   STATUS,Z,ACCESS
000B64 6E00           00542         movwf   WhoAmI,access   ; if =0xD0, then store
000B66 0012           00543         return
                      00544 
                      00545 ;                                                                                                       
                                                                            
                      00546 
000B68                00547 get.accel:                                      ; XYZ data ---> AccX,AccY,AccZ
000B68 988A           00548         bcf             accsda,ACCESS   ; default output lo (pseudo open drain)
000B6A 948A           00549         bcf             accscl,ACCESS   ; default output lo (pseudo open drain)
                      00550 
000B6C 5000           00551         movf    WhoAmI,w,access
000B6E 0A68           00552         xorlw   0x68
                      00553         ifz
000B70 B4D8               M         btfsc   STATUS,Z,ACCESS
000B72 EF?? F???      00554         goto    gy521           ; if =0xD0, then it's GY521
                      00555 
000B76 5000           00556         movf    WhoAmI,w,access
000B78 0AE5           00557         xorlw   0xE5
MPASM  5.51                          DEMO.ASM   3-23-2016  21:08:21         PAGE 38


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

000B7A E0??           00558         bz              adxl345         ; if =0xE5, then it's ADXL345
000B7C 0012           00559         return                          ; otherwise no accelerometer
                      00560 
                      00561 ;                                                                                                       
                                                                                            
                      00562 ;                                                                                                       
                                                                                            
                      00563 
000B7E                00564 adxl345
000B7E EC?? F???      00565         call    i2c.start       ; start
                      00566         writreg sladdr2         ; request for slave #0xA6
000B82 0EA6               M         movlw   sladdr2
000B84 EC?? F???          M         call    tx.i2c.ack
                      00567         writreg 2ch                     ; addr 0x2c (Data Rate and Power Management)
000B88 0E2C               M         movlw   2ch
000B8A EC?? F???          M         call    tx.i2c.ack
                      00568         writreg b'00001101'     ; data for Data Rate
000B8E 0E0D               M         movlw   b'00001101'
000B90 EC?? F???          M         call    tx.i2c.ack
                      00569         writreg b'00001000'     ; data for Power Management
000B94 0E08               M         movlw   b'00001000'
000B96 EC?? F???          M         call    tx.i2c.ack
                      00570 ;       call    i2c.stop        ; stop
                      00571 ;       
000B9A EC?? F???      00572         call    i2c.start       ; start
                      00573         writreg sladdr2         ; request for slave #0xA6
000B9E 0EA6               M         movlw   sladdr2
000BA0 EC?? F???          M         call    tx.i2c.ack
                      00574         writreg 31h                     ; addr 0x31 (Data Format)
000BA4 0E31               M         movlw   31h
000BA6 EC?? F???          M         call    tx.i2c.ack
                      00575         writreg b'00001011'     ; data for Data Format
000BAA 0E0B               M         movlw   b'00001011'
000BAC EC?? F???          M         call    tx.i2c.ack
                      00576 ;       call    i2c.stop        ; stop
                      00577 ;       
000BB0 EC?? F???      00578         call    i2c.start       ; start
                      00579         writreg sladdr2         ; request for slave #0xA6
000BB4 0EA6               M         movlw   sladdr2
000BB6 EC?? F???          M         call    tx.i2c.ack
                      00580         writreg 32h                     ; addr 0x32 (data accel X low byte)
000BBA 0E32               M         movlw   32h
000BBC EC?? F???          M         call    tx.i2c.ack
                      00581 
000BC0 EC?? F???      00582         call    i2c.start       ; restart
                      00583         writreg sladdr2+1       ; request for slave #0xA6+1 (+1 because this is RD) 
000BC4 0EA7               M         movlw   sladdr2+1
000BC6 EC?? F???          M         call    tx.i2c.ack
000BCA EC?? F???      00584         call    get.data
000BCE 6E00           00585         movwf   AccY,ACCESS
000BD0 EC?? F???      00586         call    i2c.ack                 ; put ACK
000BD4 EC?? F???      00587         call    get.data
000BD8 6E00           00588         movwf   AccY+1,ACCESS
MPASM  5.51                          DEMO.ASM   3-23-2016  21:08:21         PAGE 39


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

000BDA EC?? F???      00589         call    i2c.ack                 ; put ACK
                      00590 
000BDE EC?? F???      00591         call    get.data
000BE2 0AFF           00592         xorlw   0xff
000BE4 6E00           00593         movwf   AccX,ACCESS
000BE6 EC?? F???      00594         call    i2c.ack                 ; put ACK
000BEA EC?? F???      00595         call    get.data
000BEE 0AFF           00596         xorlw   0xff
000BF0 6E00           00597         movwf   AccX+1,ACCESS
000BF2 EC?? F???      00598         call    i2c.ack                 ; put ACK
                      00599 
000BF6 EC?? F???      00600         call    get.data
000BFA 6E00           00601         movwf   AccZ,ACCESS
000BFC EC?? F???      00602         call    i2c.ack                 ; put ACK
000C00 EC?? F???      00603         call    get.data
000C04 6E00           00604         movwf   AccZ+1,ACCESS
000C06 EC?? F???      00605         call    i2c.nack                ; put NACK
000C0A EC?? F???      00606         call    i2c.stop                ; stop
                      00607 
000C0E 0012           00608         return
                      00609 
                      00610 ;                                                                                                       
                                                                                            
                      00611 ;                                                                                                       
                                                                                            
                      00612 
000C10                00613 gy521
000C10 EC?? F???      00614         call    i2c.start       ; start
                      00615         writreg sladdr          ; request for slave #0xD0
000C14 0ED0               M         movlw   sladdr
000C16 EC?? F???          M         call    tx.i2c.ack
                      00616         writreg 0x6b            ; Power Management
000C1A 0E6B               M         movlw   0x6b
000C1C EC?? F???          M         call    tx.i2c.ack
                      00617         writreg b'00001001'     ; Reset, No sleep, Temp Disabled, Internal 8MHz osc
000C20 0E09               M         movlw   b'00001001'
000C22 EC?? F???          M         call    tx.i2c.ack
                      00618         writreg b'00000111'     ; Gyroscope sleep
000C26 0E07               M         movlw   b'00000111'
000C28 EC?? F???          M         call    tx.i2c.ack
000C2C EC?? F???      00619         call    i2c.stop                ; stop
                      00620 ;       
000C30 EC?? F???      00621         call    i2c.start       ; start
                      00622         writreg sladdr          ; request for slave #0xD0
000C34 0ED0               M         movlw   sladdr
000C36 EC?? F???          M         call    tx.i2c.ack
                      00623         writreg 0x1a            ; addr 0x1a (Config)
000C3A 0E1A               M         movlw   0x1a
000C3C EC?? F???          M         call    tx.i2c.ack
                      00624         writreg b'00000110'     ; 1a data CONFIG (low pass filter)
000C40 0E06               M         movlw   b'00000110'
000C42 EC?? F???          M         call    tx.i2c.ack
                      00625         writreg b'00001000'     ; 1b data GYRO_CONFIG (sensitivity) 500 degrees/s
MPASM  5.51                          DEMO.ASM   3-23-2016  21:08:21         PAGE 40


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

000C46 0E08               M         movlw   b'00001000'
000C48 EC?? F???          M         call    tx.i2c.ack
                      00626         writreg b'00011000'     ; 1c data ACCEL_CONFIG (sensitivity) 16 g
000C4C 0E18               M         movlw   b'00011000'
000C4E EC?? F???          M         call    tx.i2c.ack
000C52 EC?? F???      00627         call    i2c.stop                ; stop
                      00628 ;       
000C56 EC?? F???      00629         call    i2c.start       ; start
                      00630         writreg sladdr          ; request for slave #0xD0
000C5A 0ED0               M         movlw   sladdr
000C5C EC?? F???          M         call    tx.i2c.ack
                      00631         writreg 0x3b            ; 0x3b start of acc data X high
000C60 0E3B               M         movlw   0x3b
000C62 EC?? F???          M         call    tx.i2c.ack
000C66 EC?? F???      00632         call    i2c.start       ; restart
                      00633         writreg sladdr+1        ; request for slave #0xD0 + READ bit
000C6A 0ED1               M         movlw   sladdr+1
000C6C EC?? F???          M         call    tx.i2c.ack
                      00634 
000C70 EC?? F???      00635         call    get.data
000C74 6E00           00636         movwf   AccX+1,ACCESS
000C76 EC?? F???      00637         call    i2c.ack                 ; put ACK
000C7A EC?? F???      00638         call    get.data
000C7E 6E00           00639         movwf   AccX,ACCESS
000C80 EC?? F???      00640         call    i2c.ack                 ; put ACK
                      00641 
000C84 EC?? F???      00642         call    get.data
000C88 6E00           00643         movwf   AccY+1,ACCESS
000C8A EC?? F???      00644         call    i2c.ack                 ; put ACK
000C8E EC?? F???      00645         call    get.data
000C92 6E00           00646         movwf   AccY,ACCESS
000C94 EC?? F???      00647         call    i2c.ack                 ; put ACK
                      00648 
000C98 EC?? F???      00649         call    get.data
000C9C 6E00           00650         movwf   AccZ+1,ACCESS
000C9E EC?? F???      00651         call    i2c.ack                 ; put ACK
000CA2 EC?? F???      00652         call    get.data
000CA6 6E00           00653         movwf   AccZ,ACCESS
000CA8 EC?? F???      00654         call    i2c.nack                ; put NACK
                      00655 
000CAC EC?? F???      00656         call    i2c.stop                ; stop
000CB0 0012           00657         return
                      00658 
                      00659 ;                                                                                                       
                                                                                    
                      00660 ;                               I 2 C   S U B S                                                         
                                                                    
                      00661 ;                                                                                                       
                                                                                    
                      00662 
                      00663 datahi                  macro
                      00664         bsf             accsda.ts,ACCESS        ; MCU data pin hi imp
                      00665         call    t38
MPASM  5.51                          DEMO.ASM   3-23-2016  21:08:21         PAGE 41


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00666                                         endm
                      00667 datalo                  macro
                      00668         bcf             accsda.ts,ACCESS        ; MCU data pin low
                      00669         call    t38
                      00670                                         endm
                      00671 clockhi                 macro
                      00672         bsf             accscl.ts,ACCESS        ; MCU clock pin hi imp
                      00673         call    t38
                      00674                                         endm
                      00675 clocklo                 macro
                      00676         bcf             accscl.ts,ACCESS        ; MCU clock pin low
                      00677         call    t38
                      00678                                         endm
                      00679 
                      00680 ;                                                                                                       
000CB2                00681 i2c.start
                      00682         datahi
000CB2 8893               M         bsf             accsda.ts,ACCESS        ; MCU data pin hi imp
000CB4 EC?? F???          M         call    t38
                      00683         clockhi
000CB8 8493               M         bsf             accscl.ts,ACCESS        ; MCU clock pin hi imp
000CBA EC?? F???          M         call    t38
                      00684         datalo
000CBE 9893               M         bcf             accsda.ts,ACCESS        ; MCU data pin low
000CC0 EC?? F???          M         call    t38
                      00685         clocklo
000CC4 9493               M         bcf             accscl.ts,ACCESS        ; MCU clock pin low
000CC6 EC?? F???          M         call    t38
000CCA 0012           00686         return
                      00687 ;                               
000CCC                00688 i2c.stop
                      00689         datalo
000CCC 9893               M         bcf             accsda.ts,ACCESS        ; MCU data pin low
000CCE EC?? F???          M         call    t38
                      00690         clockhi
000CD2 8493               M         bsf             accscl.ts,ACCESS        ; MCU clock pin hi imp
000CD4 EC?? F???          M         call    t38
                      00691         datahi
000CD8 8893               M         bsf             accsda.ts,ACCESS        ; MCU data pin hi imp
000CDA EC?? F???          M         call    t38
000CDE 0012           00692         return
                      00693 ;                               
000CE0                00694 i2c.tx.w7
000CE0 36E8           00695         rlcf    WREG,f,ACCESS
000CE2 E2??           00696         bc              i2c.nack
000CE4                00697 i2c.ack                         ; ack (bit=0 transmit)
                      00698         datalo
000CE4 9893               M         bcf             accsda.ts,ACCESS        ; MCU data pin low
000CE6 EC?? F???          M         call    t38
                      00699         clockhi
000CEA 8493               M         bsf             accscl.ts,ACCESS        ; MCU clock pin hi imp
000CEC EC?? F???          M         call    t38
                      00700         clocklo
MPASM  5.51                          DEMO.ASM   3-23-2016  21:08:21         PAGE 42


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

000CF0 9493               M         bcf             accscl.ts,ACCESS        ; MCU clock pin low
000CF2 EC?? F???          M         call    t38
000CF6 0012           00701         return
000CF8                00702 i2c.nack                        ; nack (bit=1 transmit)
                      00703         datahi
000CF8 8893               M         bsf             accsda.ts,ACCESS        ; MCU data pin hi imp
000CFA EC?? F???          M         call    t38
                      00704         clockhi
000CFE 8493               M         bsf             accscl.ts,ACCESS        ; MCU clock pin hi imp
000D00 EC?? F???          M         call    t38
                      00705         clocklo
000D04 9493               M         bcf             accscl.ts,ACCESS        ; MCU clock pin low
000D06 EC?? F???          M         call    t38
000D0A 0012           00706         return
                      00707 ;                               
000D0C                00708 tx.i2c.ack                      ; transmit w7w6w5w4w3w2w1w0, then get ack
000D0C EC?? F???      00709         call    i2c.tx.w7
000D10 EC?? F???      00710         call    i2c.tx.w7
000D14 EC?? F???      00711         call    i2c.tx.w7
000D18 EC?? F???      00712         call    i2c.tx.w7
000D1C EC?? F???      00713         call    i2c.tx.w7
000D20 EC?? F???      00714         call    i2c.tx.w7
000D24 EC?? F???      00715         call    i2c.tx.w7
000D28 EC?? F???      00716         call    i2c.tx.w7
000D2C                00717 get.ack                         ; read 1 bit ---> carry
                      00718         datahi
000D2C 8893               M         bsf             accsda.ts,ACCESS        ; MCU data pin hi imp
000D2E EC?? F???          M         call    t38
                      00719         clockhi
000D32 8493               M         bsf             accscl.ts,ACCESS        ; MCU clock pin hi imp
000D34 EC?? F???          M         call    t38
                      00720         rcf                                                     ; acknowledged (bit 0)
000D38 90D8               M         bcf             STATUS,C,ACCESS
000D3A B881           00721         btfsc   accsda.port,ACCESS      ; test data pin
                      00722         scf                                                     ; not acknowledged (bit 1)
000D3C 80D8               M         bsf             STATUS,C,ACCESS
                      00723         clocklo
000D3E 9493               M         bcf             accscl.ts,ACCESS        ; MCU clock pin low
000D40 EC?? F???          M         call    t38
000D44 0012           00724         return
                      00725 ;                               
000D46                00726 get.data                        ; read 8 bits ---> w7w6w5w4w3w2w1w0
000D46 0E08           00727         movlw   8
000D48 6E00           00728         movwf   Outer,ACCESS    ; loop bit count
000D4A                00729 loopab2                                 ; \
000D4A EC?? F???      00730         call    get.ack                 ; get bit ---> carry
000D4E 36E8           00731         rlcf    WREG,f,ACCESS
                      00732 
000D50 2E00           00733         decfsz  Outer,f,ACCESS
000D52 D???           00734         bra             loopab2         ; /
000D54 0012           00735         return
                      00736 ;                               
000D56                00737 t38:                            ; 30t incl call/ret, 2.5 us
MPASM  5.51                          DEMO.ASM   3-23-2016  21:08:21         PAGE 43


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

000D56 6A00           00738         clrf    Inner,ACCESS
000D58 8600           00739         bsf             Inner,3,ACCESS  ; =8
000D5A                00740 got30
000D5A 2E00           00741         decfsz  Inner,f,ACCESS
000D5C D???           00742         bra             got30
000D5E 0012           00743         return
                      00744 
                      00745 ;                                                                       
                      00746 
000D60                00747 ior.bufer2.buffer3              ; buffer2 or buffer3 ---> buffer3 (optimized for speed)
                      00748         iorbuf3 .0
000D60 5100               M         movf    Buffer2+.0,w,BANKED
000D62 1330               M         iorwf   Buffer3+.0,f,BANKED
                      00749         iorbuf3 .1
000D64 5100               M         movf    Buffer2+.1,w,BANKED
000D66 1331               M         iorwf   Buffer3+.1,f,BANKED
                      00750         iorbuf3 .2
000D68 5100               M         movf    Buffer2+.2,w,BANKED
000D6A 1332               M         iorwf   Buffer3+.2,f,BANKED
                      00751         iorbuf3 .3
000D6C 5100               M         movf    Buffer2+.3,w,BANKED
000D6E 1333               M         iorwf   Buffer3+.3,f,BANKED
                      00752         iorbuf3 .4
000D70 5100               M         movf    Buffer2+.4,w,BANKED
000D72 1334               M         iorwf   Buffer3+.4,f,BANKED
                      00753         iorbuf3 .5
000D74 5100               M         movf    Buffer2+.5,w,BANKED
000D76 1335               M         iorwf   Buffer3+.5,f,BANKED
                      00754         iorbuf3 .6
000D78 5100               M         movf    Buffer2+.6,w,BANKED
000D7A 1336               M         iorwf   Buffer3+.6,f,BANKED
                      00755         iorbuf3 .7
000D7C 5100               M         movf    Buffer2+.7,w,BANKED
000D7E 1337               M         iorwf   Buffer3+.7,f,BANKED
                      00756         iorbuf3 .8
000D80 5100               M         movf    Buffer2+.8,w,BANKED
000D82 1338               M         iorwf   Buffer3+.8,f,BANKED
                      00757         iorbuf3 .9
000D84 5100               M         movf    Buffer2+.9,w,BANKED
000D86 1339               M         iorwf   Buffer3+.9,f,BANKED
                      00758         iorbuf3 .10
000D88 5100               M         movf    Buffer2+.10,w,BANKED
000D8A 133A               M         iorwf   Buffer3+.10,f,BANKED
                      00759         iorbuf3 .11
000D8C 5100               M         movf    Buffer2+.11,w,BANKED
000D8E 133B               M         iorwf   Buffer3+.11,f,BANKED
                      00760         iorbuf3 .12
000D90 5100               M         movf    Buffer2+.12,w,BANKED
000D92 133C               M         iorwf   Buffer3+.12,f,BANKED
                      00761         iorbuf3 .13
000D94 5100               M         movf    Buffer2+.13,w,BANKED
000D96 133D               M         iorwf   Buffer3+.13,f,BANKED
                      00762         iorbuf3 .14
MPASM  5.51                          DEMO.ASM   3-23-2016  21:08:21         PAGE 44


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

000D98 5100               M         movf    Buffer2+.14,w,BANKED
000D9A 133E               M         iorwf   Buffer3+.14,f,BANKED
                      00763         iorbuf3 .15
000D9C 5100               M         movf    Buffer2+.15,w,BANKED
000D9E 133F               M         iorwf   Buffer3+.15,f,BANKED
000DA0 0012           00764         return
                      00765 
                      00152         #include <display.inc>  ; display demo
                      00001 ;*******************************************************************************
                      00002 ;*******************************************************************************
                      00003 ;*******************************************************************************
                      00004 ;                                               D I S P L A Y                                           
                                                                    
                      00005 ;*******************************************************************************
                      00006 ;*******************************************************************************
                      00007 ;*******************************************************************************
                      00008 
                      00009 ; [0]...[65535] Serial Number header
                      00010 ; <h> horizontal
                      00011 ; <H> horizontal broad
                      00012 ; <v> vertical
                      00013 ; <V> vertical broad
                      00014 ; <l> lateral
                      00015 ; <i> immidiate short
                      00016 ; <I> Immidiate long
                      00017 ; <1>...<9> pause (*250ms)
                      00018 
000DA2                00019 display
000DA2 6AA6           00020         clrf    EECON1,access           ; Disable write to EEPROM
000DA4 8A00           00021         bsf             Flag,5,access           ; bit 5 set = Only two steps for key 0, without pause
000DA6 6A00           00022         clrf    KeyEdge,access
000DA8 8000           00023         bsf             RXFlag,0,access         ; enable RX
                      00024 
000DAA 0E0E           00025         movlw   .14
000DAC 6E00           00026         movwf   DispSpeed,access        ; def display speed
000DAE 6A00           00027         clrf    DispPtr,access
000DB0 EC?? F???      00028         call    clrbuf
000DB4 EC?? F???      00029         call    clrbuf2
                      00030 
                      00031 ;                                       GO DISPLAY
                      00032 
000DB8 EF?? F???      00033         goto    start.message.h1
                      00034 
                      00035 ;                                       HORIZONTAL 1 MODE                                               
                                                                                    
000DBC                00036 start.message.h1
000DBC 9C00           00037         bcf             Flag,6,access   ; bit 6 set = Display message received
000DBE EE06 F000      00038         lfsr    FSR0,Disp.text  ; initialize read ptr
                      00039 
000DC2                00040 next.char.h1                            ; \\\\\\\\\\\\\\\\
000DC2 92??           00041         bcf             FlagDemo,1              ; bit 1 set = next char immediate
000DC4 0E06           00042         movlw   .6
000DC6 6E00           00043         movwf   ColCount,access
MPASM  5.51                          DEMO.ASM   3-23-2016  21:08:21         PAGE 45


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00044 
000DC8 EC?? F???      00045         call    clrbuf2
000DCC                00046 gnc.h1
000DCC B200           00047         btfsc   FlagDemo,1,access       ; bit 1 set = next char immediate
000DCE EF?? F???      00048         goto    gnc.h2.spec
                      00049 
000DD2 50EE           00050         movf    POSTINC0,w              ; get next char
000DD4 E0??           00051         bz              start.message.h1        ; if end of message detected
                      00052 
000DD6 EC?? F???      00053         call    spec.case               ; special case: possible <x>
000DDA E3??           00054         bnc             nospec.h1
000DDC 4EE8           00055         dcfsnz  WREG,f,access
000DDE EF?? F???      00056         goto    next.char.h1
000DE2 4EE8           00057         dcfsnz  WREG,f,access
000DE4 EF?? F???      00058         goto    next.char.h2
000DE8 4EE8           00059         dcfsnz  WREG,f,access
000DEA EF?? F???      00060         goto    next.char.v1
000DEE 4EE8           00061         dcfsnz  WREG,f,access
000DF0 EF?? F???      00062         goto    next.char.v2
000DF4 4EE8           00063         dcfsnz  WREG,f,access
000DF6 EF?? F???      00064         goto    next.char.l
000DFA                00065 nospec.h1
000DFA 0F00           00066         addlw   0
000DFC E0??           00067         bz              gnc.h1                  ; this 0 is not terminator, but pause or immediate was e
                            xecuted
000DFE 0FE0           00068         addlw   -0x20                   ; ASCII " " offset
000E00 0D0A           00069         mullw   .10                             ; bytes/char
000E02 50F3           00070         movf    PRODL,w,access
000E04 0F??           00071         addlw   low     (charg1)
000E06 6EF6           00072         movwf   TBLPTRL                 ; low charg ptr
000E08 50F4           00073         movf    PRODH,w,access
                      00074         ifc
000E0A B0D8               M         btfsc   STATUS,C,ACCESS
000E0C 0F01           00075         addlw   1                               ; addc
000E0E 0F??           00076         addlw   high (charg1)
000E10 6EF7           00077         movwf   TBLPTRH                 ; hi charg ptr
                      00078 
000E12 EE?? F0??      00079         lfsr    FSR1,Buffer2+4  ; start of next char in Buffer2 (defines vert text pos)
000E16 0E09           00080         movlw   .9
000E18                00081 go9txt.h1
000E18 0009           00082         TBLRD*+
000E1A CFF5 FFE6      00083         movff   TABLAT,POSTINC1 ; transfer char bitmap from char gen to buffer2
000E1E 2EE8           00084         decfsz  WREG,f,access
000E20 D???           00085         bra             go9txt.h1
                      00086 
000E22                00087 next.column.h1                  ; \\\\\\\\
                      00088         test.new
000E22 5200               M         movf    RXpatience,f,access
                          M 
                          M 
000E24 5000           00089         movf    DispSpeed,w,access      ; this determines moving message speed
000E26 0F03           00090         addlw   3                               ; additional slow down in horizontal mode
000E28                00091 wait.disp.h1
MPASM  5.51                          DEMO.ASM   3-23-2016  21:08:21         PAGE 46


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

000E28 EC?? F???      00092         call    sync150cond
000E2C 2EE8           00093         decfsz  WREG,f,access
000E2E D???           00094         bra             wait.disp.h1            ; wait for period
                      00095 ;       
000E30 EE?? F0??      00096         lfsr    FSR1,Buffer
000E34 EE?? F0??      00097         lfsr    FSR2,Buffer2
                      00098 
000E38 0E10           00099         movlw   .16
000E3A                00100 moveleft16.h1
                      00101         rcf
000E3A 90D8               M         bcf             STATUS,C,ACCESS
000E3C 36DE           00102         rlcf    POSTINC2,f
000E3E 36E6           00103         rlcf    POSTINC1,f              ; shift left buffer2 to buffer
000E40 2EE8           00104         decfsz  WREG,f,access
000E42 D???           00105         bra             moveleft16.h1
                      00106 
000E44 BC00           00107         btfsc   Flag,6,access           ; bit 6 set = Display message received
000E46 D???           00108         bra             start.message.h1
                      00109 
000E48 2E00           00110         decfsz  ColCount,f,access
000E4A D???           00111         bra             next.column.h1; ////////
                      00112                                                         ; one ASCII char passed, go next char
000E4C EC?? F???      00113         call    comm.i                  ; exec short or long pause if it was coomand <i> or <I>
000E50 D???           00114         bra             next.char.h1    ; ////////////////
                      00115 
                      00116 ;                                       HORIZONTAL 2 MODE                                               
                                                                                    
000E52                00117 gnc.h2.spec
000E52 0E08           00118         movlw   .8
000E54 6E00           00119         movwf   ColCount,access
000E56 D???           00120         bra             gnc.h2
                      00121 
000E58                00122 start.message.h2
000E58 EE06 F000      00123         lfsr    FSR0,Disp.text  ; initialize read ptr
                      00124 
000E5C                00125 next.char.h2                            ; \\\\\\\\\\\\\\\\
000E5C 92??           00126         bcf             FlagDemo,1              ; bit 1 set = next char immediate
000E5E 0E08           00127         movlw   .8
000E60 6E00           00128         movwf   ColCount,access
                      00129 
000E62 EC?? F???      00130         call    clrbuf2
000E66                00131 gnc.h2
000E66 50EE           00132         movf    POSTINC0,w              ; get next char
000E68 E0??           00133         bz              start.message.h2        ; if end of message detected
                      00134 
000E6A EC?? F???      00135         call    spec.case               ; special case: possible <x>
000E6E E3??           00136         bnc             nospec.h2
000E70 4EE8           00137         dcfsnz  WREG,f,access
000E72 EF?? F???      00138         goto    next.char.h1
000E76 4EE8           00139         dcfsnz  WREG,f,access
000E78 EF?? F???      00140         goto    next.char.h2
000E7C 4EE8           00141         dcfsnz  WREG,f,access
000E7E EF?? F???      00142         goto    next.char.v1
MPASM  5.51                          DEMO.ASM   3-23-2016  21:08:21         PAGE 47


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

000E82 4EE8           00143         dcfsnz  WREG,f,access
000E84 EF?? F???      00144         goto    next.char.v2
000E88 4EE8           00145         dcfsnz  WREG,f,access
000E8A EF?? F???      00146         goto    next.char.l
000E8E                00147 nospec.h2
000E8E 0F00           00148         addlw   0
000E90 E0??           00149         bz              gnc.h2                  ; this 0 is not terminator, but pause or immediate was e
                            xecuted
                      00150 
000E92 0FE0           00151         addlw   -0x20                   ; ASCII " " offset
000E94 0D0E           00152         mullw   .14                             ; bytes/char
000E96 50F3           00153         movf    PRODL,w,access
000E98 0F??           00154         addlw   low     (charg3)
000E9A 6EF6           00155         movwf   TBLPTRL                 ; low charg ptr
000E9C 50F4           00156         movf    PRODH,w,access
                      00157         ifc
000E9E B0D8               M         btfsc   STATUS,C,ACCESS
000EA0 0F01           00158         addlw   1                               ; addc
000EA2 0F??           00159         addlw   high (charg3)
000EA4 6EF7           00160         movwf   TBLPTRH                 ; hi charg ptr
                      00161 
000EA6 EE?? F0??      00162         lfsr    FSR1,Buffer2+1  ; start of next char in Buffer2 (defines vert text pos)
000EAA 0E0E           00163         movlw   .14
000EAC                00164 go14txt.h2
000EAC 0009           00165         TBLRD*+
000EAE CFF5 FFE6      00166         movff   TABLAT,POSTINC1 ; transfer char bitmap from char gen to buffer2
000EB2 2EE8           00167         decfsz  WREG,f,access
000EB4 D???           00168         bra             go14txt.h2
                      00169 
000EB6 EC?? F???      00170         call    shlbuf                  ; wait DispSpeed+3 cycles and shift left buffer
000EBA EC?? F???      00171         call    shlbuf
                      00172 
000EBE                00173 next.column.h2                  ; \\\\\\\\
000EBE 5000           00174         movf    DispSpeed,w,access      ; this determines moving message speed
000EC0 0F03           00175         addlw   3                               ; additional slow down in horizontal mode
000EC2                00176 wait.disp.h2
000EC2 EC?? F???      00177         call    sync150cond
000EC6 2EE8           00178         decfsz  WREG,f,access
000EC8 D???           00179         bra             wait.disp.h2            ; wait for period
                      00180 ;       
000ECA EE?? F0??      00181         lfsr    FSR1,Buffer
000ECE EE?? F0??      00182         lfsr    FSR2,Buffer2
                      00183 
000ED2 0E10           00184         movlw   .16
000ED4                00185 moveleft16.h2
                      00186         rcf
000ED4 90D8               M         bcf             STATUS,C,ACCESS
000ED6 36DE           00187         rlcf    POSTINC2,f
000ED8 36E6           00188         rlcf    POSTINC1,f              ; shift left buffer2 to buffer
000EDA 2EE8           00189         decfsz  WREG,f,access
000EDC D???           00190         bra             moveleft16.h2
                      00191 
000EDE BC00           00192         btfsc   Flag,6,access           ; bit 6 set = Display message received
MPASM  5.51                          DEMO.ASM   3-23-2016  21:08:21         PAGE 48


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

000EE0 EF?? F???      00193         goto    start.message.h1
                      00194 
000EE4 2E00           00195         decfsz  ColCount,f,access
000EE6 D???           00196         bra             next.column.h2; ////////
                      00197                                                         ; one ASCII char passed, go next char
000EE8 EC?? F???      00198         call    comm.i                  ; exec short or long pause if it was coomand <i> or <I>
000EEC D???           00199         bra             next.char.h2    ; ////////////////
                      00200 
                      00201 ;                                       VERTICAL 1 MODE                                                 
                                                                                    
                      00202 
000EEE                00203 start.message.v1
000EEE EE06 F000      00204         lfsr    FSR0,Disp.text  ; initialize read ptr
                      00205 
000EF2                00206 next.char.v1                            ; \\\\\\\\\\\\\\\\
000EF2 92??           00207         bcf             FlagDemo,1              ; bit 1 set = next char immediate
000EF4 0E0B           00208         movlw   .11
000EF6 6E00           00209         movwf   ColCount,access
                      00210 
000EF8 EC?? F???      00211         call    clrbuf2
000EFC                00212 gnc.v1
000EFC B200           00213         btfsc   FlagDemo,1,access       ; bit 1 set = next char immediate
000EFE EF?? F???      00214         goto    gnc.h2.spec
                      00215 
000F02 50EE           00216         movf    POSTINC0,w              ; get next char
000F04 E0??           00217         bz              start.message.v1        ; if end of message detected
                      00218 
000F06 EC?? F???      00219         call    spec.case               ; special case: possible <x>
000F0A E3??           00220         bnc             nospec.v1
000F0C 4EE8           00221         dcfsnz  WREG,f,access
000F0E EF?? F???      00222         goto    next.char.h1
000F12 4EE8           00223         dcfsnz  WREG,f,access
000F14 EF?? F???      00224         goto    next.char.h2
000F18 4EE8           00225         dcfsnz  WREG,f,access
000F1A EF?? F???      00226         goto    next.char.v1
000F1E 4EE8           00227         dcfsnz  WREG,f,access
000F20 EF?? F???      00228         goto    next.char.v2
000F24 4EE8           00229         dcfsnz  WREG,f,access
000F26 EF?? F???      00230         goto    next.char.l
000F2A                00231 nospec.v1
000F2A 0F00           00232         addlw   0
000F2C E0??           00233         bz              gnc.v1                  ; this 0 is not terminator, but pause or immediate was e
                            xecuted
000F2E 0FE0           00234         addlw   -0x20                   ; ASCII " " offset
000F30 0D0A           00235         mullw   .10                             ; bytes/char
000F32 50F3           00236         movf    PRODL,w,access
000F34 0F??           00237         addlw   low     (charg1)
000F36 6EF6           00238         movwf   TBLPTRL                 ; low charg ptr
000F38 50F4           00239         movf    PRODH,w,access
                      00240         ifc
000F3A B0D8               M         btfsc   STATUS,C,ACCESS
000F3C 0F01           00241         addlw   1                               ; addc
000F3E 0F??           00242         addlw   high (charg1)
MPASM  5.51                          DEMO.ASM   3-23-2016  21:08:21         PAGE 49


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

000F40 6EF7           00243         movwf   TBLPTRH                 ; hi charg ptr
                      00244 
000F42 EE?? F0??      00245         lfsr    FSR1,Buffer2+.1 ; start of next char in Buffer2
000F46 0E09           00246         movlw   .9
000F48                00247 go9txt.v1
000F48 0009           00248         TBLRD*+
000F4A CFF5 FFE6      00249         movff   TABLAT,POSTINC1 ; transfer char bitmap from char gen to buffer2
000F4E 2EE8           00250         decfsz  WREG,f,access
000F50 D???           00251         bra             go9txt.v1
                      00252 ;       
000F52 5100           00253         movf    Buffer2+.8,w,banked
                      00254         ifz
000F54 B4D8               M         btfsc   STATUS,Z,ACCESS
000F56 0600           00255         decf    ColCount,f,access       ; if lower row blank, decrement shift count
000F58 5100           00256         movf    Buffer2+.8,w,banked
                      00257         ifz
000F5A B4D8               M         btfsc   STATUS,Z,ACCESS
000F5C 0600           00258         decf    ColCount,f,access       ; if lower row blank, decrement shift count
000F5E 5100           00259         movf    Buffer2+.1,w,banked
                      00260         ifz
000F60 B4D8               M         btfsc   STATUS,Z,ACCESS
000F62 EC?? F???      00261         call    move2up                 ; if upper row blank, shift buffer2 up
000F66 5100           00262         movf    Buffer2+.1,w,banked
                      00263         ifz
000F68 B4D8               M         btfsc   STATUS,Z,ACCESS
000F6A EC?? F???      00264         call    move2up                 ; if upper row blank, shift buffer2 up
                      00265 
                      00266 ;       
000F6E                00267 next.row.v1                             ; \\\\\\\\
000F6E 5000           00268         movf    DispSpeed,w,access      ; this determines moving message speed
000F70                00269 wait.disp.v1
000F70 EC?? F???      00270         call    sync150cond
000F74 2EE8           00271         decfsz  WREG,f,access
000F76 D???           00272         bra             wait.disp.v1            ; wait for period
                      00273 ;       
000F78 EE?? F0??      00274         lfsr    FSR1,Buffer+.0
000F7C EE?? F0??      00275         lfsr    FSR2,Buffer+.1
000F80 0E0F           00276         movlw   .15
000F82                00277 movedn16.v11
000F82 CFDE FFE6      00278         movff   POSTINC2,POSTINC1       ; shift up buffer
000F86 2EE8           00279         decfsz  WREG,f,access
000F88 D???           00280         bra             movedn16.v11
                      00281 
000F8A C??? F???      00282         movff   Buffer2,Buffer+.15      ; transfer from Buffer2 (top) to Buffer (bottom)
                      00283 
000F8E EE?? F0??      00284         lfsr    FSR1,Buffer2+.0
000F92 EE?? F0??      00285         lfsr    FSR2,Buffer2+.1
000F96 0E0F           00286         movlw   .15
000F98                00287 movedn16.v12
000F98 CFDE FFE6      00288         movff   POSTINC2,POSTINC1       ; shift up buffer2
000F9C 2EE8           00289         decfsz  WREG,f,access
000F9E D???           00290         bra             movedn16.v12
                      00291 ;       
MPASM  5.51                          DEMO.ASM   3-23-2016  21:08:21         PAGE 50


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

000FA0 BC00           00292         btfsc   Flag,6,access           ; bit 6 set = Display message received
000FA2 EF?? F???      00293         goto    start.message.h1
                      00294 
000FA6 2E00           00295         decfsz  ColCount,f,access
000FA8 D???           00296         bra             next.row.v1     ; ////////
                      00297                                                         ; one ASCII char passed, go next char
000FAA EC?? F???      00298         call    comm.i                  ; exec short or long pause if it was coomand <i> or <I>
000FAE D???           00299         bra             next.char.v1    ; ////////////////
                      00300 
                      00301 
                      00302 ;                                       VERTICAL 2 MODE                                                 
                                                                                    
                      00303 
000FB0                00304 start.message.v2
000FB0 EE06 F000      00305         lfsr    FSR0,Disp.text  ; initialize read ptr
                      00306 
000FB4                00307 next.char.v2                            ; \\\\\\\\\\\\\\\\
000FB4 92??           00308         bcf             FlagDemo,1              ; bit 1 set = next char immediate
000FB6 0E0E           00309         movlw   .14
000FB8 6E00           00310         movwf   ColCount,access
                      00311 
000FBA EC?? F???      00312         call    clrbuf2
000FBE                00313 gnc.v2
000FBE B200           00314         btfsc   FlagDemo,1,access       ; bit 1 set = next char immediate
000FC0 EF?? F???      00315         goto    gnc.h2.spec
                      00316 
000FC4 50EE           00317         movf    POSTINC0,w              ; get next char
000FC6 E0??           00318         bz              start.message.v2        ; if end of message detected
                      00319 
000FC8 EC?? F???      00320         call    spec.case               ; special case: possible <x>
000FCC E3??           00321         bnc             nospec.v2
000FCE 4EE8           00322         dcfsnz  WREG,f,access
000FD0 EF?? F???      00323         goto    next.char.h1
000FD4 4EE8           00324         dcfsnz  WREG,f,access
000FD6 EF?? F???      00325         goto    next.char.h2
000FDA 4EE8           00326         dcfsnz  WREG,f,access
000FDC EF?? F???      00327         goto    next.char.v1
000FE0 4EE8           00328         dcfsnz  WREG,f,access
000FE2 EF?? F???      00329         goto    next.char.v2
000FE6 4EE8           00330         dcfsnz  WREG,f,access
000FE8 EF?? F???      00331         goto    next.char.l
000FEC                00332 nospec.v2
000FEC 0F00           00333         addlw   0
000FEE E0??           00334         bz              gnc.v2                  ; this 0 is not terminator, but pause or immediate was e
                            xecuted
000FF0 0FE0           00335         addlw   -0x20                   ; ASCII " " offset
000FF2 0D0E           00336         mullw   .14                             ; bytes/char
000FF4 50F3           00337         movf    PRODL,w,access
000FF6 0F??           00338         addlw   low     (charg3)
000FF8 6EF6           00339         movwf   TBLPTRL                 ; low charg ptr
000FFA 50F4           00340         movf    PRODH,w,access
                      00341         ifc
000FFC B0D8               M         btfsc   STATUS,C,ACCESS
MPASM  5.51                          DEMO.ASM   3-23-2016  21:08:21         PAGE 51


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

000FFE 0F01           00342         addlw   1                               ; addc
001000 0F??           00343         addlw   high (charg3)
001002 6EF7           00344         movwf   TBLPTRH                 ; hi charg ptr
                      00345 
001004 EE?? F0??      00346         lfsr    FSR1,Buffer2+.1 ; start of next char in Buffer2
001008 0E0E           00347         movlw   .14
00100A                00348 go14txt.v2
00100A 0009           00349         TBLRD*+
00100C CFF5 FFE6      00350         movff   TABLAT,POSTINC1 ; transfer char bitmap from char gen to buffer2
001010 2EE8           00351         decfsz  WREG,f,access
001012 D???           00352         bra             go14txt.v2
                      00353 ;       
001014 5100           00354         movf    Buffer2+.12,w,banked
                      00355         ifz
001016 B4D8               M         btfsc   STATUS,Z,ACCESS
001018 0600           00356         decf    ColCount,f,access       ; if lower row blank, decrement shift count
00101A 5100           00357         movf    Buffer2+.12,w,banked
                      00358         ifz
00101C B4D8               M         btfsc   STATUS,Z,ACCESS
00101E 0600           00359         decf    ColCount,f,access       ; if lower row blank, decrement shift count
001020 5100           00360         movf    Buffer2+.12,w,banked
                      00361         ifz
001022 B4D8               M         btfsc   STATUS,Z,ACCESS
001024 0600           00362         decf    ColCount,f,access       ; if lower row blank, decrement shift count
001026 5100           00363         movf    Buffer2+.12,w,banked
                      00364         ifz
001028 B4D8               M         btfsc   STATUS,Z,ACCESS
00102A 0600           00365         decf    ColCount,f,access       ; if lower row blank, decrement shift count
00102C 5100           00366         movf    Buffer2+.1,w,banked
                      00367         ifz
00102E B4D8               M         btfsc   STATUS,Z,ACCESS
001030 EC?? F???      00368         call    move2up                 ; if upper row blank, shift buffer2 up
001034 5100           00369         movf    Buffer2+.1,w,banked
                      00370         ifz
001036 B4D8               M         btfsc   STATUS,Z,ACCESS
001038 EC?? F???      00371         call    move2up                 ; if upper row blank, shift buffer2 up
00103C 5100           00372         movf    Buffer2+.1,w,banked
                      00373         ifz
00103E B4D8               M         btfsc   STATUS,Z,ACCESS
001040 EC?? F???      00374         call    move2up                 ; if upper row blank, shift buffer2 up
001044 5100           00375         movf    Buffer2+.1,w,banked
                      00376         ifz
001046 B4D8               M         btfsc   STATUS,Z,ACCESS
001048 EC?? F???      00377         call    move2up                 ; if upper row blank, shift buffer2 up
                      00378 
                      00379 ;       
00104C                00380 next.row.v2                             ; \\\\\\\\
00104C 5000           00381         movf    DispSpeed,w,access      ; this determines moving message speed
00104E 0FFE           00382         addlw   -.2
                      00383         ifnc
001050 A0D8               M         btfss   STATUS,C,ACCESS
001052 0E01           00384         movlw   1
                      00385         ifz
MPASM  5.51                          DEMO.ASM   3-23-2016  21:08:21         PAGE 52


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

001054 B4D8               M         btfsc   STATUS,Z,ACCESS
001056 0E01           00386         movlw   1
                      00387         
001058                00388 wait.disp.v2
001058 EC?? F???      00389         call    sync150cond
00105C 2EE8           00390         decfsz  WREG,f,access
00105E D???           00391         bra             wait.disp.v2            ; wait for period
                      00392 ;       
001060 EE?? F0??      00393         lfsr    FSR1,Buffer+.0
001064 EE?? F0??      00394         lfsr    FSR2,Buffer+.1
001068 0E0F           00395         movlw   .15
00106A                00396 movedn16.v21
00106A CFDE FFE6      00397         movff   POSTINC2,POSTINC1       ; shift up buffer
00106E 2EE8           00398         decfsz  WREG,f,access
001070 D???           00399         bra             movedn16.v21
                      00400 
001072 C??? F???      00401         movff   Buffer2,Buffer+.15      ; transfer from Buffer2 (top) to Buffer (bottom)
                      00402 
001076 EE?? F0??      00403         lfsr    FSR1,Buffer2+.0
00107A EE?? F0??      00404         lfsr    FSR2,Buffer2+.1
00107E 0E0F           00405         movlw   .15
001080                00406 movedn16.v22
001080 CFDE FFE6      00407         movff   POSTINC2,POSTINC1       ; shift up buffer2
001084 2EE8           00408         decfsz  WREG,f,access
001086 D???           00409         bra             movedn16.v22
                      00410 
001088 BC00           00411         btfsc   Flag,6,access           ; bit 6 set = Display message received
00108A EF?? F???      00412         goto    start.message.h1
                      00413 ;       
00108E 2E00           00414         decfsz  ColCount,f,access
001090 D???           00415         bra             next.row.v2     ; ////////
                      00416                                                         ; one ASCII char passed, go next char
001092 EC?? F???      00417         call    comm.i                  ; exec short or long pause if it was coomand <i> or <I>
001096 D???           00418         bra             next.char.v2    ; ////////////////
                      00419 
                      00420 ;                                       LATERAL MODE                                                    
                                                                                    
                      00421 
001098                00422 start.message.l
001098 EE06 F000      00423         lfsr    FSR0,Disp.text  ; initialize read ptr
                      00424 
00109C                00425 next.char.l                             ; \\\\\\\\\\\\\\\\
00109C 92??           00426         bcf             FlagDemo,1              ; bit 1 set = next char immediate
00109E 0E06           00427         movlw   .6
0010A0 6E00           00428         movwf   ColCount,access
                      00429 
0010A2 EC?? F???      00430         call    clrbuf2
0010A6                00431 gnc.l
0010A6 B200           00432         btfsc   FlagDemo,1,access       ; bit 1 set = next char immediate
0010A8 EF?? F???      00433         goto    gnc.h2.spec
                      00434 
0010AC 50EE           00435         movf    POSTINC0,w              ; get next char
0010AE E0??           00436         bz              start.message.l ; if end of message detected
MPASM  5.51                          DEMO.ASM   3-23-2016  21:08:21         PAGE 53


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00437 
0010B0 EC?? F???      00438         call    spec.case               ; special case: possible <x>
0010B4 E3??           00439         bnc             nospec.l
0010B6 4EE8           00440         dcfsnz  WREG,f,access
0010B8 EF?? F???      00441         goto    next.char.h1
0010BC 4EE8           00442         dcfsnz  WREG,f,access
0010BE EF?? F???      00443         goto    next.char.h2
0010C2 4EE8           00444         dcfsnz  WREG,f,access
0010C4 EF?? F???      00445         goto    next.char.v1
0010C8 4EE8           00446         dcfsnz  WREG,f,access
0010CA EF?? F???      00447         goto    next.char.v2
0010CE 4EE8           00448         dcfsnz  WREG,f,access
0010D0 EF?? F???      00449         goto    next.char.l
0010D4                00450 nospec.l
0010D4 0F00           00451         addlw   0
0010D6 E0??           00452         bz              gnc.l                   ; this 0 is not terminator, but pause or immediate was e
                            xecuted
0010D8 0FE0           00453         addlw   -0x20                   ; ASCII " " offset
0010DA 0D06           00454         mullw   .6                              ; bytes/char
0010DC 50F3           00455         movf    PRODL,w,access
0010DE 0F??           00456         addlw   low     (charg2)
0010E0 6EF6           00457         movwf   TBLPTRL                 ; low charg ptr
0010E2 50F4           00458         movf    PRODH,w,access
                      00459         ifc
0010E4 B0D8               M         btfsc   STATUS,C,ACCESS
0010E6 0F01           00460         addlw   1                               ; addc
0010E8 0F??           00461         addlw   high (charg2)
0010EA 6EF7           00462         movwf   TBLPTRH                 ; hi charg ptr
                      00463 
0010EC EE?? F0??      00464         lfsr    FSR1,Buffer2+.11        ; start of next char in Buffer2
0010F0 0E05           00465         movlw   .5
0010F2                00466 go5txt.l
0010F2 0009           00467         TBLRD*+
0010F4 CFF5 FFE6      00468         movff   TABLAT,POSTINC1 ; transfer char bitmap from char gen to buffer2
0010F8 2EE8           00469         decfsz  WREG,f,access
0010FA D???           00470         bra             go5txt.l
                      00471 
0010FC                00472 next.row.l                              ; \\\\\\\\
0010FC 5000           00473         movf    DispSpeed,w,access      ; this determines moving message speed
0010FE                00474 wait.disp.l
0010FE EC?? F???      00475         call    sync150cond
001102 2EE8           00476         decfsz  WREG,f,access
001104 D???           00477         bra             wait.disp.l             ; wait for period
                      00478 ;       
001106 EE?? F0??      00479         lfsr    FSR2,Buffer+.14
00110A EE?? F0??      00480         lfsr    FSR1,Buffer+.15
00110E 0E0F           00481         movlw   .15
001110                00482 movedn16.l1
001110 CFDD FFE5      00483         movff   POSTDEC2,POSTDEC1       ; shift down buffer
001114 2EE8           00484         decfsz  WREG,f,access
001116 D???           00485         bra             movedn16.l1
                      00486 
001118 C??? F???      00487         movff   Buffer2+.15,Buffer      ; transfer from Buffer2 (bottom) to Buffer (top)
MPASM  5.51                          DEMO.ASM   3-23-2016  21:08:21         PAGE 54


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00488 
00111C EE?? F0??      00489         lfsr    FSR2,Buffer2+.14
001120 EE?? F0??      00490         lfsr    FSR1,Buffer2+.15
001124 0E06           00491         movlw   .6
001126                00492 movedn16.l2
001126 CFDD FFE5      00493         movff   POSTDEC2,POSTDEC1       ; shift down buffer2
00112A 2EE8           00494         decfsz  WREG,f,access
00112C D???           00495         bra             movedn16.l2
                      00496 
00112E BC00           00497         btfsc   Flag,6,access           ; bit 6 set = Display message received
001130 EF?? F???      00498         goto    start.message.h1
                      00499 ;       
001134 2E00           00500         decfsz  ColCount,f,access
001136 D???           00501         bra             next.row.l      ; ////////
                      00502                                                         ; one ASCII char passed, go next char
001138 EC?? F???      00503         call    comm.i                  ; exec short or long pause if it was coomand <i> or <I>
00113C D???           00504         bra             next.char.l     ; ////////////////
                      00505 
                      00506 ;                                                                                                       
                                                                                    
                      00507 ;                                                                                                       
                                                                                    
                      00508 
00113E                00509 spec.case       ; if w='<', test if it is a spec message <h>,<H>,<v>,<V>,<l>,<i>,<I>,<1...9>
                      00510                         ; if it is, return with w=1,2,3,4,5 and update pointer FSR0 and set C
                      00511                         ; if <i> then place next char immediatelly and pause 500ms
                      00512                         ; if <I> then place next char immediatelly and pause 2s
                      00513                         ; if <1>...<9> then pause
00113E 0A3C           00514         xorlw   '<'
001140 E1??           00515         bnz             no.spec.sign
001142 52EE           00516         movf    POSTINC0,f      ; +1 dummy
001144 50EE           00517         movf    POSTINC0,w      ; +2 get ">"
001146 0A3E           00518         xorlw   '>'
001148 E1??           00519         bnz             spec.not.found  
00114A 52ED           00520         movf    POSTDEC0,f      ; +1 dummy
00114C 52ED           00521         movf    POSTDEC0,f      ;  0 dummy
00114E 50EE           00522         movf    POSTINC0,w      ; +1 get "h"|"H"|"v"|"V"|"l"|"i"|"I"|"1"..."9"
001150 52EE           00523         movf    POSTINC0,f      ; +2 dummy
                      00524 
                      00525         scf                                     ; set C, this may be special case "h"|"H"|"v"|"V"|"l"|"i
                            "|"I"|"1"..."9"
001152 80D8               M         bsf             STATUS,C,ACCESS
001154 0A68           00526         xorlw   'h'
001156 E0??           00527         bz              case.h1         ; horizontal
001158 0A68           00528         xorlw   'h'                     ; restore
00115A 0A48           00529         xorlw   'H'
00115C E0??           00530         bz              case.h2         ; horizontal large
00115E 0A48           00531         xorlw   'H'                     ; restore
001160 0A76           00532         xorlw   'v'
001162 E0??           00533         bz              case.v1         ; vertical
001164 0A76           00534         xorlw   'v'                     ; restore
001166 0A56           00535         xorlw   'V'
001168 E0??           00536         bz              case.v2         ; vertical large
MPASM  5.51                          DEMO.ASM   3-23-2016  21:08:21         PAGE 55


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

00116A 0A56           00537         xorlw   'V'                     ; restore
00116C 0A6C           00538         xorlw   'l'
00116E E0??           00539         bz              case.l          ; lateral
001170 0A6C           00540         xorlw   'l'                     ; restore
001172 0A69           00541         xorlw   'i'
001174 E0??           00542         bz              case.i1         ; immediate short
001176 0A69           00543         xorlw   'i'                     ; restore
001178 0A49           00544         xorlw   'I'
00117A E0??           00545         bz              case.i2         ; immediate long
00117C 0A49           00546         xorlw   'I'                     ; restore
                      00547 
00117E 0FCF           00548         addlw   -'1'
001180 E3??           00549         bnc             nonum.case      ; not pause (if w was <'1')
001182 0FF7           00550         addlw   -.9     
001184 E2??           00551         bc              nonum2.case     ; not pause (if w was >'9')
001186 0F0A           00552         addlw   .10                     ; restore w=1...9
                      00553                                                 ; here the command was <1>...<9>, w=1...9
001188 6E00           00554         movwf   Outer,access
00118A                00555 go.pause
00118A 0E25           00556         movlw   .37
00118C                00557 go250ms
                      00558         sync150
00118C A400               M         btfss   Flag,2,ACCESS           ; 150 Hz handshaking sync
00118E D???               M         bra             $-2
001190 9400               M         bcf             Flag,2,ACCESS           ; reset sync flag
001192 2EE8           00559         decfsz  WREG,f,access
001194 D???           00560         bra             go250ms
001196 2E00           00561         decfsz  Outer,f,access
001198 D???           00562         bra             go.pause
                      00563 
00119A 0E00           00564         movlw   0                       ; W=0 is flag that this was pause, pointer is on next byte, and.
                            ..
                      00565                                                 ; ...it has to be tested again, as it may be the new com
                            mand
                      00566         rcf                                     ; reset C
00119C 90D8               M         bcf             STATUS,C,ACCESS
00119E 0012           00567         return
                      00568 ;       
0011A0                00569 case.i2                                 ; just set flags, main routine will do the job
0011A0 80??           00570         bsf             FlagDemo,0      ; bit 0 set = long pause (667 ms)
0011A2 D???           00571         bra             case.ix
0011A4                00572 case.i1                                 ; just set flags, main routine will do the job
0011A4 90??           00573         bcf             FlagDemo,0      ; bit 0 reset = short pause (333 ms)
0011A6                00574 case.ix
0011A6 82??           00575         bsf             FlagDemo,1      ; bit 1 set = next char immediate
0011A8 0E00           00576         movlw   0                       ; W=0 is flag that this was immediate cmd, pointer is on next by
                            te...
                      00577                                                 ; ...and it has to be tested again, as it may be the new
                             command
                      00578         rcf                                     ; reset C
0011AA 90D8               M         bcf             STATUS,C,ACCESS
0011AC 0012           00579         return
                      00580 ;       
MPASM  5.51                          DEMO.ASM   3-23-2016  21:08:21         PAGE 56


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0011AE                00581 nonum2.case
0011AE 0F0A           00582         addlw   .10                     ; restore
0011B0                00583 nonum.case
0011B0 0F31           00584         addlw   '1'                     ; restore
0011B2 D???           00585         bra             spec.not.found  ; if char was not "h"|"H"|"v"|"V"|"l"|"i"|"I"|"1"..."9"
                      00586 ;       
0011B4                00587 case.h1
0011B4 0E01           00588         movlw   .1
0011B6 0012           00589         return
0011B8                00590 case.h2
0011B8 0E02           00591         movlw   .2
0011BA 0012           00592         return
0011BC                00593 case.v1
0011BC 0E03           00594         movlw   .3
0011BE 0012           00595         return
0011C0                00596 case.v2
0011C0 0E04           00597         movlw   .4
0011C2 0012           00598         return
0011C4                00599 case.l
0011C4 0E05           00600         movlw   .5
0011C6 0012           00601         return
                      00602 ;       
0011C8                00603 spec.not.found
0011C8 52ED           00604         movf    POSTDEC0,f      ; +1 dummy
0011CA 52ED           00605         movf    POSTDEC0,f      ;  0 dummy
0011CC 0E3C           00606         movlw   '<'                     ; get ">" again
                      00607         rcf                                     ; reset C
0011CE 90D8               M         bcf             STATUS,C,ACCESS
0011D0 0012           00608         return
                      00609 ;       
0011D2                00610 no.spec.sign
0011D2 0A3C           00611         xorlw   '<'                     ; restore w
                      00612         rcf                                     ; reset C
0011D4 90D8               M         bcf             STATUS,C,ACCESS
0011D6 0012           00613         return
                      00614 
                      00615 ;                                                                                                       
                                                                                    
0011D8                00616 comm.i                  ; exec short or long pause if it was coomand <i> or <I>
0011D8 A2??           00617         btfss   FlagDemo,1              ; bit 1 set = cmd I
0011DA 0012           00618         return
0011DC 0E1E           00619         movlw   .30                             ; short pause
0011DE B0??           00620         btfsc   FlagDemo,0              ; bit 0 set = long pause
0011E0 0E3C           00621         movlw   .60                             ; long pause
0011E2                00622 go.i.pause
                      00623         sync150
0011E2 A400               M         btfss   Flag,2,ACCESS           ; 150 Hz handshaking sync
0011E4 D???               M         bra             $-2
0011E6 9400               M         bcf             Flag,2,ACCESS           ; reset sync flag
0011E8 2EE8           00624         decfsz  WREG,f,access
0011EA D???           00625         bra             go.i.pause
0011EC 0012           00626         return
                      00627 
MPASM  5.51                          DEMO.ASM   3-23-2016  21:08:21         PAGE 57


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00628 ;                                                                                                       
                                                                                    
                      00629 
0011EE                00630 sync150cond
0011EE B2??           00631         btfsc   FlagDemo,1              ; bit 1 set = cmd I
0011F0 0012           00632         return
                      00633         sync150
0011F2 A400               M         btfss   Flag,2,ACCESS           ; 150 Hz handshaking sync
0011F4 D???               M         bra             $-2
0011F6 9400               M         bcf             Flag,2,ACCESS           ; reset sync flag
0011F8 0012           00634         return
                      00635 ;                                                                                                       
                                                                                    
                      00636 
0011FA                00637 shlbuf                                          ; wait DispSpeed+3 cycles and shift left buffer
0011FA 5000           00638         movf    DispSpeed,w,access      ; this determines moving message speed
0011FC 0F03           00639         addlw   3                               ; additional slow down in horizontal mode
0011FE                00640 wait.disp.shlb
0011FE EC?? F???      00641         call    sync150cond
001202 2EE8           00642         decfsz  WREG,f,access
001204 D???           00643         bra             wait.disp.shlb          ; wait for period
                      00644 
001206 EE?? F0??      00645         lfsr    FSR1,Buffer
00120A 0E10           00646         movlw   .16
00120C                00647 shl16
                      00648         rcf
00120C 90D8               M         bcf             STATUS,C,ACCESS
00120E 36E6           00649         rlcf    POSTINC1,f
001210 2EE8           00650         decfsz  WREG,f,access
001212 D???           00651         bra             shl16
001214 0012           00652         return
                      00153         #include <chargen.inc>  ; character bitmaps, for display demo
001216                00001 charg1  ; 9x5
                      00002                                 ; space
001216 0000           00003         db      b'00000000',b'00000000'
001218 0000           00004         db      b'00000000',b'00000000'
00121A 0000           00005         db      b'00000000',b'00000000'
00121C 0000           00006         db      b'00000000',b'00000000'
00121E 0000           00007         db      b'00000000'
                      00008                                 ; !
001220 1010           00009         db      b'00010000',b'00010000'
001222 1010           00010         db      b'00010000',b'00010000'
001224 0010           00011         db      b'00010000',b'00000000'
001226 0010           00012         db      b'00010000',b'00000000'
001228 0000           00013         db      b'00000000'
                      00014                                 ; "
00122A 2828           00015         db      b'00101000',b'00101000'
00122C 0000           00016         db      b'00000000',b'00000000'
00122E 0000           00017         db      b'00000000',b'00000000'
001230 0000           00018         db      b'00000000',b'00000000'
001232 0000           00019         db      b'00000000'
                      00020                                 ; #
001234 2828           00021         db      b'00101000',b'00101000'
MPASM  5.51                          DEMO.ASM   3-23-2016  21:08:21         PAGE 58


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

001236 287C           00022         db      b'01111100',b'00101000'
001238 287C           00023         db      b'01111100',b'00101000'
00123A 0028           00024         db      b'00101000',b'00000000'
00123C 0000           00025         db      b'00000000'
                      00026                                 ; $
00123E 3C10           00027         db      b'00010000',b'00111100'
001240 3850           00028         db      b'01010000',b'00111000'
001242 7814           00029         db      b'00010100',b'01111000'
001244 0010           00030         db      b'00010000',b'00000000'
001246 0000           00031         db      b'00000000'
                      00032                                 ; %
001248 6460           00033         db      b'01100000',b'01100100'
00124A 1008           00034         db      b'00001000',b'00010000'
00124C 4C20           00035         db      b'00100000',b'01001100'
00124E 000C           00036         db      b'00001100',b'00000000'
001250 0000           00037         db      b'00000000'
                      00038                                 ; &
001252 5020           00039         db      b'00100000',b'01010000'
001254 5020           00040         db      b'00100000',b'01010000'
001256 484C           00041         db      b'01001100',b'01001000'
001258 0034           00042         db      b'00110100',b'00000000'
00125A 0000           00043         db      b'00000000'
                      00044                                 ; '
00125C 1010           00045         db      b'00010000',b'00010000'
00125E 0000           00046         db      b'00000000',b'00000000'
001260 0000           00047         db      b'00000000',b'00000000'
001262 0000           00048         db      b'00000000',b'00000000'
001264 0000           00049         db      b'00000000'
                      00050                                 ; (
001266 1008           00051         db      b'00001000',b'00010000'
001268 2020           00052         db      b'00100000',b'00100000'
00126A 1020           00053         db      b'00100000',b'00010000'
00126C 0008           00054         db      b'00001000',b'00000000'
00126E 0000           00055         db      b'00000000'
                      00056                                 ; )
001270 1020           00057         db      b'00100000',b'00010000'
001272 0808           00058         db      b'00001000',b'00001000'
001274 1008           00059         db      b'00001000',b'00010000'
001276 0020           00060         db      b'00100000',b'00000000'
001278 0000           00061         db      b'00000000'
                      00062                                 ; *
00127A 2800           00063         db      b'00000000',b'00101000'
00127C 7C10           00064         db      b'00010000',b'01111100'
00127E 2810           00065         db      b'00010000',b'00101000'
001280 0000           00066         db      b'00000000',b'00000000'
001282 0000           00067         db      b'00000000'
                      00068                                 ; +
001284 1000           00069         db      b'00000000',b'00010000'
001286 7C10           00070         db      b'00010000',b'01111100'
001288 1010           00071         db      b'00010000',b'00010000'
00128A 0000           00072         db      b'00000000',b'00000000'
00128C 0000           00073         db      b'00000000'
                      00074                                 ; ,
MPASM  5.51                          DEMO.ASM   3-23-2016  21:08:21         PAGE 59


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

00128E 0000           00075         db      b'00000000',b'00000000'
001290 0000           00076         db      b'00000000',b'00000000'
001292 0000           00077         db      b'00000000',b'00000000'
001294 2010           00078         db      b'00010000',b'00100000'
001296 0000           00079         db      b'00000000'
                      00080                                 ; -
001298 0000           00081         db      b'00000000',b'00000000'
00129A 7C00           00082         db      b'00000000',b'01111100'
00129C 0000           00083         db      b'00000000',b'00000000'
00129E 0000           00084         db      b'00000000',b'00000000'
0012A0 0000           00085         db      b'00000000'
                      00086                                 ; .
0012A2 0000           00087         db      b'00000000',b'00000000'
0012A4 0000           00088         db      b'00000000',b'00000000'
0012A6 0000           00089         db      b'00000000',b'00000000'
0012A8 0020           00090         db      b'00100000',b'00000000'
0012AA 0000           00091         db      b'00000000'
                      00092                                 ; /
0012AC 0400           00093         db      b'00000000',b'00000100'
0012AE 1008           00094         db      b'00001000',b'00010000'
0012B0 4020           00095         db      b'00100000',b'01000000'
0012B2 0000           00096         db      b'00000000',b'00000000'
0012B4 0000           00097         db      b'00000000'
                      00098                                 ; 0
0012B6 4438           00099         db      b'00111000',b'01000100'
0012B8 4444           00100         db      b'01000100',b'01000100'
0012BA 4444           00101         db      b'01000100',b'01000100'
0012BC 0038           00102         db      b'00111000',b'00000000'
0012BE 0000           00103         db      b'00000000'
                      00104                                 ; 1
0012C0 3010           00105         db      b'00010000',b'00110000'
0012C2 1010           00106         db      b'00010000',b'00010000'
0012C4 1010           00107         db      b'00010000',b'00010000'
0012C6 0038           00108         db      b'00111000',b'00000000'
0012C8 0000           00109         db      b'00000000'
                      00110                                 ; 2
0012CA 4438           00111         db      b'00111000',b'01000100'
0012CC 0804           00112         db      b'00000100',b'00001000'
0012CE 2010           00113         db      b'00010000',b'00100000'
0012D0 007C           00114         db      b'01111100',b'00000000'
0012D2 0000           00115         db      b'00000000'
                      00116                                 ; 3
0012D4 4438           00117         db      b'00111000',b'01000100'
0012D6 1804           00118         db      b'00000100',b'00011000'
0012D8 4404           00119         db      b'00000100',b'01000100'
0012DA 0038           00120         db      b'00111000',b'00000000'
0012DC 0000           00121         db      b'00000000'
                      00122                                 ; 4
0012DE 0C04           00123         db      b'00000100',b'00001100'
0012E0 2414           00124         db      b'00010100',b'00100100'
0012E2 047C           00125         db      b'01111100',b'00000100'
0012E4 0004           00126         db      b'00000100',b'00000000'
0012E6 0000           00127         db      b'00000000'
MPASM  5.51                          DEMO.ASM   3-23-2016  21:08:21         PAGE 60


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00128                                 ; 5
0012E8 407C           00129         db      b'01111100',b'01000000'
0012EA 7840           00130         db      b'01000000',b'01111000'
0012EC 0404           00131         db      b'00000100',b'00000100'
0012EE 0078           00132         db      b'01111000',b'00000000'
0012F0 0000           00133         db      b'00000000'
                      00134                                 ; 6
0012F2 4438           00135         db      b'00111000',b'01000100'
0012F4 7840           00136         db      b'01000000',b'01111000'
0012F6 4444           00137         db      b'01000100',b'01000100'
0012F8 0038           00138         db      b'00111000',b'00000000'
0012FA 0000           00139         db      b'00000000'
                      00140                                 ; 7
0012FC 047C           00141         db      b'01111100',b'00000100'
0012FE 1008           00142         db      b'00001000',b'00010000'
001300 2020           00143         db      b'00100000',b'00100000'
001302 0020           00144         db      b'00100000',b'00000000'
001304 0000           00145         db      b'00000000'
                      00146                                 ; 8
001306 4438           00147         db      b'00111000',b'01000100'
001308 3844           00148         db      b'01000100',b'00111000'
00130A 4444           00149         db      b'01000100',b'01000100'
00130C 0038           00150         db      b'00111000',b'00000000'
00130E 0000           00151         db      b'00000000'
                      00152                                 ; 9
001310 4438           00153         db      b'00111000',b'01000100'
001312 3C44           00154         db      b'01000100',b'00111100'
001314 0404           00155         db      b'00000100',b'00000100'
001316 0038           00156         db      b'00111000',b'00000000'
001318 0000           00157         db      b'00000000'
                      00158                                 ; :
00131A 2000           00159         db      b'00000000',b'00100000'
00131C 0000           00160         db      b'00000000',b'00000000'
00131E 2000           00161         db      b'00000000',b'00100000'
001320 0000           00162         db      b'00000000',b'00000000'
001322 0000           00163         db      b'00000000'
                      00164                                 ; ;
001324 2000           00165         db      b'00000000',b'00100000'
001326 0000           00166         db      b'00000000',b'00000000'
001328 2000           00167         db      b'00000000',b'00100000'
00132A 0040           00168         db      b'01000000',b'00000000'
00132C 0000           00169         db      b'00000000'
                      00170                                 ; <
00132E 1008           00171         db      b'00001000',b'00010000'
001330 4020           00172         db      b'00100000',b'01000000'
001332 1020           00173         db      b'00100000',b'00010000'
001334 0008           00174         db      b'00001000',b'00000000'
001336 0000           00175         db      b'00000000'
                      00176                                 ; =
001338 0000           00177         db      b'00000000',b'00000000'
00133A 007C           00178         db      b'01111100',b'00000000'
00133C 007C           00179         db      b'01111100',b'00000000'
00133E 0000           00180         db      b'00000000',b'00000000'
MPASM  5.51                          DEMO.ASM   3-23-2016  21:08:21         PAGE 61


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

001340 0000           00181         db      b'00000000'
                      00182                                 ; >
001342 1020           00183         db      b'00100000',b'00010000'
001344 0408           00184         db      b'00001000',b'00000100'
001346 1008           00185         db      b'00001000',b'00010000'
001348 0020           00186         db      b'00100000',b'00000000'
00134A 0000           00187         db      b'00000000'
                      00188                                 ; ?
00134C 4438           00189         db      b'00111000',b'01000100'
00134E 0804           00190         db      b'00000100',b'00001000'
001350 0010           00191         db      b'00010000',b'00000000'
001352 0010           00192         db      b'00010000',b'00000000'
001354 0000           00193         db      b'00000000'
                      00194 
                      00195 
                      00196                                 ; @
001356 4438           00197         db      b'00111000',b'01000100'
001358 544C           00198         db      b'01001100',b'01010100'
00135A 404C           00199         db      b'01001100',b'01000000'
00135C 003C           00200         db      b'00111100',b'00000000'
00135E 0000           00201         db      b'00000000'
                      00202                                 ; A
001360 2810           00203         db      b'00010000',b'00101000'
001362 4444           00204         db      b'01000100',b'01000100'
001364 447C           00205         db      b'01111100',b'01000100'
001366 0044           00206         db      b'01000100',b'00000000'
001368 0000           00207         db      b'00000000'
                      00208                                 ; B
00136A 4478           00209         db      b'01111000',b'01000100'
00136C 7844           00210         db      b'01000100',b'01111000'
00136E 4444           00211         db      b'01000100',b'01000100'
001370 0078           00212         db      b'01111000',b'00000000'
001372 0000           00213         db      b'00000000'
                      00214                                 ; C
001374 4438           00215         db      b'00111000',b'01000100'
001376 4040           00216         db      b'01000000',b'01000000'
001378 4440           00217         db      b'01000000',b'01000100'
00137A 0038           00218         db      b'00111000',b'00000000'
00137C 0000           00219         db      b'00000000'
                      00220                                 ; D
00137E 4870           00221         db      b'01110000',b'01001000'
001380 4444           00222         db      b'01000100',b'01000100'
001382 4844           00223         db      b'01000100',b'01001000'
001384 0070           00224         db      b'01110000',b'00000000'
001386 0000           00225         db      b'00000000'
                      00226                                 ; E
001388 407C           00227         db      b'01111100',b'01000000'
00138A 7840           00228         db      b'01000000',b'01111000'
00138C 4040           00229         db      b'01000000',b'01000000'
00138E 007C           00230         db      b'01111100',b'00000000'
001390 0000           00231         db      b'00000000'
                      00232                                 ; F
001392 407C           00233         db      b'01111100',b'01000000'
MPASM  5.51                          DEMO.ASM   3-23-2016  21:08:21         PAGE 62


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

001394 7840           00234         db      b'01000000',b'01111000'
001396 4040           00235         db      b'01000000',b'01000000'
001398 0040           00236         db      b'01000000',b'00000000'
00139A 0000           00237         db      b'00000000'
                      00238                                 ; G
00139C 4438           00239         db      b'00111000',b'01000100'
00139E 5C40           00240         db      b'01000000',b'01011100'
0013A0 4444           00241         db      b'01000100',b'01000100'
0013A2 0038           00242         db      b'00111000',b'00000000'
0013A4 0000           00243         db      b'00000000'
                      00244                                 ; H
0013A6 4444           00245         db      b'01000100',b'01000100'
0013A8 7C44           00246         db      b'01000100',b'01111100'
0013AA 4444           00247         db      b'01000100',b'01000100'
0013AC 0044           00248         db      b'01000100',b'00000000'
0013AE 0000           00249         db      b'00000000'
                      00250                                 ; I
0013B0 1038           00251         db      b'00111000',b'00010000'
0013B2 1010           00252         db      b'00010000',b'00010000'
0013B4 1010           00253         db      b'00010000',b'00010000'
0013B6 0038           00254         db      b'00111000',b'00000000'
0013B8 0000           00255         db      b'00000000'
                      00256                                 ; J
0013BA 0404           00257         db      b'00000100',b'00000100'
0013BC 0404           00258         db      b'00000100',b'00000100'
0013BE 4404           00259         db      b'00000100',b'01000100'
0013C0 0038           00260         db      b'00111000',b'00000000'
0013C2 0000           00261         db      b'00000000'
                      00262                                 ; K
0013C4 4844           00263         db      b'01000100',b'01001000'
0013C6 6050           00264         db      b'01010000',b'01100000'
0013C8 4850           00265         db      b'01010000',b'01001000'
0013CA 0044           00266         db      b'01000100',b'00000000'
0013CC 0000           00267         db      b'00000000'
                      00268                                 ; L
0013CE 4040           00269         db      b'01000000',b'01000000'
0013D0 4040           00270         db      b'01000000',b'01000000'
0013D2 4040           00271         db      b'01000000',b'01000000'
0013D4 007C           00272         db      b'01111100',b'00000000'
0013D6 0000           00273         db      b'00000000'
                      00274                                 ; M
0013D8 6C44           00275         db      b'01000100',b'01101100'
0013DA 4454           00276         db      b'01010100',b'01000100'
0013DC 4444           00277         db      b'01000100',b'01000100'
0013DE 0044           00278         db      b'01000100',b'00000000'
0013E0 0000           00279         db      b'00000000'
                      00280                                 ; N
0013E2 4444           00281         db      b'01000100',b'01000100'
0013E4 6444           00282         db      b'01000100',b'01100100'
0013E6 4C54           00283         db      b'01010100',b'01001100'
0013E8 0044           00284         db      b'01000100',b'00000000'
0013EA 0000           00285         db      b'00000000'
                      00286                                 ; O
MPASM  5.51                          DEMO.ASM   3-23-2016  21:08:21         PAGE 63


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0013EC 4438           00287         db      b'00111000',b'01000100'
0013EE 4444           00288         db      b'01000100',b'01000100'
0013F0 4444           00289         db      b'01000100',b'01000100'
0013F2 0038           00290         db      b'00111000',b'00000000'
0013F4 0000           00291         db      b'00000000'
                      00292                                 ; P
0013F6 4478           00293         db      b'01111000',b'01000100'
0013F8 7844           00294         db      b'01000100',b'01111000'
0013FA 4040           00295         db      b'01000000',b'01000000'
0013FC 0040           00296         db      b'01000000',b'00000000'
0013FE 0000           00297         db      b'00000000'
                      00298                                 ; Q
001400 4438           00299         db      b'00111000',b'01000100'
001402 4444           00300         db      b'01000100',b'01000100'
001404 4854           00301         db      b'01010100',b'01001000'
001406 0034           00302         db      b'00110100',b'00000000'
001408 0000           00303         db      b'00000000'
                      00304                                 ; R
00140A 4478           00305         db      b'01111000',b'01000100'
00140C 7844           00306         db      b'01000100',b'01111000'
00140E 4850           00307         db      b'01010000',b'01001000'
001410 0044           00308         db      b'01000100',b'00000000'
001412 0000           00309         db      b'00000000'
                      00310                                 ; S
001414 4438           00311         db      b'00111000',b'01000100'
001416 3840           00312         db      b'01000000',b'00111000'
001418 4404           00313         db      b'00000100',b'01000100'
00141A 0038           00314         db      b'00111000',b'00000000'
00141C 0000           00315         db      b'00000000'
                      00316                                 ; T
00141E 107C           00317         db      b'01111100',b'00010000'
001420 1010           00318         db      b'00010000',b'00010000'
001422 1010           00319         db      b'00010000',b'00010000'
001424 0010           00320         db      b'00010000',b'00000000'
001426 0000           00321         db      b'00000000'
                      00322                                 ; U
001428 4444           00323         db      b'01000100',b'01000100'
00142A 4444           00324         db      b'01000100',b'01000100'
00142C 4444           00325         db      b'01000100',b'01000100'
00142E 0038           00326         db      b'00111000',b'00000000'
001430 0000           00327         db      b'00000000'
                      00328                                 ; V
001432 4444           00329         db      b'01000100',b'01000100'
001434 4444           00330         db      b'01000100',b'01000100'
001436 2844           00331         db      b'01000100',b'00101000'
001438 0010           00332         db      b'00010000',b'00000000'
00143A 0000           00333         db      b'00000000'
                      00334                                 ; W
00143C 4444           00335         db      b'01000100',b'01000100'
00143E 4444           00336         db      b'01000100',b'01000100'
001440 6C54           00337         db      b'01010100',b'01101100'
001442 0044           00338         db      b'01000100',b'00000000'
001444 0000           00339         db      b'00000000'
MPASM  5.51                          DEMO.ASM   3-23-2016  21:08:21         PAGE 64


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00340                                 ; X
001446 4444           00341         db      b'01000100',b'01000100'
001448 1028           00342         db      b'00101000',b'00010000'
00144A 4428           00343         db      b'00101000',b'01000100'
00144C 0044           00344         db      b'01000100',b'00000000'
00144E 0000           00345         db      b'00000000'
                      00346                                 ; Y
001450 4444           00347         db      b'01000100',b'01000100'
001452 1028           00348         db      b'00101000',b'00010000'
001454 1010           00349         db      b'00010000',b'00010000'
001456 0010           00350         db      b'00010000',b'00000000'
001458 0000           00351         db      b'00000000'
                      00352                                 ; Z
00145A 047C           00353         db      b'01111100',b'00000100'
00145C 1008           00354         db      b'00001000',b'00010000'
00145E 4020           00355         db      b'00100000',b'01000000'
001460 007C           00356         db      b'01111100',b'00000000'
001462 0000           00357         db      b'00000000'
                      00358                                 ; [
001464 1018           00359         db      b'00011000',b'00010000'
001466 1010           00360         db      b'00010000',b'00010000'
001468 1010           00361         db      b'00010000',b'00010000'
00146A 0018           00362         db      b'00011000',b'00000000'
00146C 0000           00363         db      b'00000000'
                      00364                                 ; \
00146E 4000           00365         db      b'00000000',b'01000000'
001470 1020           00366         db      b'00100000',b'00010000'
001472 0408           00367         db      b'00001000',b'00000100'
001474 0000           00368         db      b'00000000',b'00000000'
001476 0000           00369         db      b'00000000'
                      00370                                 ; ]
001478 1030           00371         db      b'00110000',b'00010000'
00147A 1010           00372         db      b'00010000',b'00010000'
00147C 1010           00373         db      b'00010000',b'00010000'
00147E 0030           00374         db      b'00110000',b'00000000'
001480 0000           00375         db      b'00000000'
                      00376                                 ; ^
001482 2810           00377         db      b'00010000',b'00101000'
001484 0044           00378         db      b'01000100',b'00000000'
001486 0000           00379         db      b'00000000',b'00000000'
001488 0000           00380         db      b'00000000',b'00000000'
00148A 0000           00381         db      b'00000000'
                      00382                                 ; _
00148C 0000           00383         db      b'00000000',b'00000000'
00148E 0000           00384         db      b'00000000',b'00000000'
001490 0000           00385         db      b'00000000',b'00000000'
001492 7C00           00386         db      b'00000000',b'01111100'
001494 0000           00387         db      b'00000000'
                      00388 
                      00389                                 ; `
001496 1020           00390         db      b'00100000',b'00010000'
001498 0000           00391         db      b'00000000',b'00000000'
00149A 0000           00392         db      b'00000000',b'00000000'
MPASM  5.51                          DEMO.ASM   3-23-2016  21:08:21         PAGE 65


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

00149C 0000           00393         db      b'00000000',b'00000000'
00149E 0000           00394         db      b'00000000'
                      00395                                 ; a
0014A0 0000           00396         db      b'00000000',b'00000000'
0014A2 0438           00397         db      b'00111000',b'00000100'
0014A4 443C           00398         db      b'00111100',b'01000100'
0014A6 003C           00399         db      b'00111100',b'00000000'
0014A8 0000           00400         db      b'00000000'
                      00401                                 ; b
0014AA 4040           00402         db      b'01000000',b'01000000'
0014AC 7840           00403         db      b'01000000',b'01111000'
0014AE 4444           00404         db      b'01000100',b'01000100'
0014B0 0078           00405         db      b'01111000',b'00000000'
0014B2 0000           00406         db      b'00000000'
                      00407                                 ; c
0014B4 0000           00408         db      b'00000000',b'00000000'
0014B6 403C           00409         db      b'00111100',b'01000000'
0014B8 4040           00410         db      b'01000000',b'01000000'
0014BA 003C           00411         db      b'00111100',b'00000000'
0014BC 0000           00412         db      b'00000000'
                      00413                                 ; d
0014BE 0404           00414         db      b'00000100',b'00000100'
0014C0 3C04           00415         db      b'00000100',b'00111100'
0014C2 4444           00416         db      b'01000100',b'01000100'
0014C4 003C           00417         db      b'00111100',b'00000000'
0014C6 0000           00418         db      b'00000000'
                      00419                                 ; e
0014C8 0000           00420         db      b'00000000',b'00000000'
0014CA 4438           00421         db      b'00111000',b'01000100'
0014CC 407C           00422         db      b'01111100',b'01000000'
0014CE 003C           00423         db      b'00111100',b'00000000'
0014D0 0000           00424         db      b'00000000'
                      00425                                 ; f
0014D2 2418           00426         db      b'00011000',b'00100100'
0014D4 7020           00427         db      b'00100000',b'01110000'
0014D6 2020           00428         db      b'00100000',b'00100000'
0014D8 0020           00429         db      b'00100000',b'00000000'
0014DA 0000           00430         db      b'00000000'
                      00431                                 ; g
0014DC 0000           00432         db      b'00000000',b'00000000'
0014DE 4C34           00433         db      b'00110100',b'01001100'
0014E0 4444           00434         db      b'01000100',b'01000100'
0014E2 043C           00435         db      b'00111100',b'00000100'
0014E4 0038           00436         db      b'00111000'
                      00437                                 ; h
0014E6 4040           00438         db      b'01000000',b'01000000'
0014E8 4478           00439         db      b'01111000',b'01000100'
0014EA 4444           00440         db      b'01000100',b'01000100'
0014EC 0044           00441         db      b'01000100',b'00000000'
0014EE 0000           00442         db      b'00000000'
                      00443                                 ; i
0014F0 0010           00444         db      b'00010000',b'00000000'
0014F2 1030           00445         db      b'00110000',b'00010000'
MPASM  5.51                          DEMO.ASM   3-23-2016  21:08:21         PAGE 66


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0014F4 1010           00446         db      b'00010000',b'00010000'
0014F6 0038           00447         db      b'00111000',b'00000000'
0014F8 0000           00448         db      b'00000000'
                      00449                                 ; j
0014FA 0010           00450         db      b'00010000',b'00000000'
0014FC 1030           00451         db      b'00110000',b'00010000'
0014FE 1010           00452         db      b'00010000',b'00010000'
001500 1010           00453         db      b'00010000',b'00010000'
001502 0060           00454         db      b'01100000'
                      00455                                 ; k
001504 4040           00456         db      b'01000000',b'01000000'
001506 4844           00457         db      b'01000100',b'01001000'
001508 4870           00458         db      b'01110000',b'01001000'
00150A 0044           00459         db      b'01000100',b'00000000'
00150C 0000           00460         db      b'00000000'
                      00461                                 ; l
00150E 1030           00462         db      b'00110000',b'00010000'
001510 1010           00463         db      b'00010000',b'00010000'
001512 1010           00464         db      b'00010000',b'00010000'
001514 0038           00465         db      b'00111000',b'00000000'
001516 0000           00466         db      b'00000000'
                      00467                                 ; m
001518 0000           00468         db      b'00000000',b'00000000'
00151A 5468           00469         db      b'01101000',b'01010100'
00151C 5454           00470         db      b'01010100',b'01010100'
00151E 0054           00471         db      b'01010100',b'00000000'
001520 0000           00472         db      b'00000000'
                      00473                                 ; n
001522 0000           00474         db      b'00000000',b'00000000'
001524 6458           00475         db      b'01011000',b'01100100'
001526 4444           00476         db      b'01000100',b'01000100'
001528 0044           00477         db      b'01000100',b'00000000'
00152A 0000           00478         db      b'00000000'
                      00479                                 ; o
00152C 0000           00480         db      b'00000000',b'00000000'
00152E 4438           00481         db      b'00111000',b'01000100'
001530 4444           00482         db      b'01000100',b'01000100'
001532 0038           00483         db      b'00111000',b'00000000'
001534 0000           00484         db      b'00000000'
                      00485                                 ; p
001536 0000           00486         db      b'00000000',b'00000000'
001538 4478           00487         db      b'01111000',b'01000100'
00153A 4444           00488         db      b'01000100',b'01000100'
00153C 4078           00489         db      b'01111000',b'01000000'
00153E 0040           00490         db      b'01000000'
                      00491                                 ; q
001540 0000           00492         db      b'00000000',b'00000000'
001542 443C           00493         db      b'00111100',b'01000100'
001544 4444           00494         db      b'01000100',b'01000100'
001546 043C           00495         db      b'00111100',b'00000100'
001548 0004           00496         db      b'00000100'
                      00497                                 ; r
00154A 0000           00498         db      b'00000000',b'00000000'
MPASM  5.51                          DEMO.ASM   3-23-2016  21:08:21         PAGE 67


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

00154C 605C           00499         db      b'01011100',b'01100000'
00154E 4040           00500         db      b'01000000',b'01000000'
001550 0040           00501         db      b'01000000',b'00000000'
001552 0000           00502         db      b'00000000'
                      00503                                 ; s
001554 0000           00504         db      b'00000000',b'00000000'
001556 403C           00505         db      b'00111100',b'01000000'
001558 0438           00506         db      b'00111000',b'00000100'
00155A 0078           00507         db      b'01111000',b'00000000'
00155C 0000           00508         db      b'00000000'
                      00509                                 ; t
00155E 2020           00510         db      b'00100000',b'00100000'
001560 2070           00511         db      b'01110000',b'00100000'
001562 2420           00512         db      b'00100000',b'00100100'
001564 0018           00513         db      b'00011000',b'00000000'
001566 0000           00514         db      b'00000000'
                      00515                                 ; u
001568 0000           00516         db      b'00000000',b'00000000'
00156A 4444           00517         db      b'01000100',b'01000100'
00156C 4444           00518         db      b'01000100',b'01000100'
00156E 003C           00519         db      b'00111100',b'00000000'
001570 0000           00520         db      b'00000000'
                      00521                                 ; v
001572 0000           00522         db      b'00000000',b'00000000'
001574 4444           00523         db      b'01000100',b'01000100'
001576 2844           00524         db      b'01000100',b'00101000'
001578 0010           00525         db      b'00010000',b'00000000'
00157A 0000           00526         db      b'00000000'
                      00527                                 ; w
00157C 0000           00528         db      b'00000000',b'00000000'
00157E 4444           00529         db      b'01000100',b'01000100'
001580 6C54           00530         db      b'01010100',b'01101100'
001582 0044           00531         db      b'01000100',b'00000000'
001584 0000           00532         db      b'00000000'
                      00533                                 ; x
001586 0000           00534         db      b'00000000',b'00000000'
001588 2844           00535         db      b'01000100',b'00101000'
00158A 2810           00536         db      b'00010000',b'00101000'
00158C 0044           00537         db      b'01000100',b'00000000'
00158E 0000           00538         db      b'00000000'
                      00539                                 ; y
001590 0000           00540         db      b'00000000',b'00000000'
001592 4444           00541         db      b'01000100',b'01000100'
001594 3C44           00542         db      b'01000100',b'00111100'
001596 0404           00543         db      b'00000100',b'00000100'
001598 0038           00544         db      b'00111000'
                      00545                                 ; z
00159A 0000           00546         db      b'00000000',b'00000000'
00159C 087C           00547         db      b'01111100',b'00001000'
00159E 2010           00548         db      b'00010000',b'00100000'
0015A0 007C           00549         db      b'01111100',b'00000000'
0015A2 0000           00550         db      b'00000000'
                      00551                                 ; {
MPASM  5.51                          DEMO.ASM   3-23-2016  21:08:21         PAGE 68


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0015A4 1008           00552         db      b'00001000',b'00010000'
0015A6 2010           00553         db      b'00010000',b'00100000'
0015A8 1010           00554         db      b'00010000',b'00010000'
0015AA 0008           00555         db      b'00001000',b'00000000'
0015AC 0000           00556         db      b'00000000'
                      00557                                 ; |
0015AE 1010           00558         db      b'00010000',b'00010000'
0015B0 1010           00559         db      b'00010000',b'00010000'
0015B2 1010           00560         db      b'00010000',b'00010000'
0015B4 0010           00561         db      b'00010000',b'00000000'
0015B6 0000           00562         db      b'00000000'
                      00563                                 ; }
0015B8 1020           00564         db      b'00100000',b'00010000'
0015BA 0810           00565         db      b'00010000',b'00001000'
0015BC 1010           00566         db      b'00010000',b'00010000'
0015BE 0020           00567         db      b'00100000',b'00000000'
0015C0 0000           00568         db      b'00000000'
                      00569                                 ; ~
0015C2 5420           00570         db      b'00100000',b'01010100'
0015C4 0008           00571         db      b'00001000',b'00000000'
0015C6 0000           00572         db      b'00000000',b'00000000'
0015C8 0000           00573         db      b'00000000',b'00000000'
0015CA 0000           00574         db      b'00000000'
                      00575                                 ; 
0015CC 447C           00576         db      b'01111100',b'01000100'
0015CE 4444           00577         db      b'01000100',b'01000100'
0015D0 4444           00578         db      b'01000100',b'01000100'
0015D2 007C           00579         db      b'01111100',b'00000000'
0015D4 0000           00580         db      b'00000000'
                      00581 
                      00582 ; ***************************************************************************************
                      00583 ; ***************************************************************************************
                      00584 ; ***************************************************************************************
                      00585 
0015D6                00586 charg2  ; 8x5 rotated CCW
                      00587                                 ; space
0015D6 0000           00588         db      b'00000000',b'00000000'
0015D8 0000           00589         db      b'00000000',b'00000000'
0015DA 0000           00590         db      b'00000000'
                      00591                                 ; !
0015DC 0000           00592         db      b'00000000',b'00000000'
0015DE 00FA           00593         db      b'11111010',b'00000000'
0015E0 0000           00594         db      b'00000000'
                      00595                                 ; "
0015E2 C000           00596         db      b'00000000',b'11000000'
0015E4 C000           00597         db      b'00000000',b'11000000'
0015E6 0000           00598         db      b'00000000'
                      00599                                 ; #
0015E8 FE28           00600         db      b'00101000',b'11111110'
0015EA FE28           00601         db      b'00101000',b'11111110'
0015EC 0028           00602         db      b'00101000'
                      00603                                 ; $
0015EE 5448           00604         db      b'01001000',b'01010100'
MPASM  5.51                          DEMO.ASM   3-23-2016  21:08:21         PAGE 69


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0015F0 52FE           00605         db      b'11111110',b'01010010'
0015F2 0022           00606         db      b'00100010'
                      00607                                 ; %
0015F4 2646           00608         db      b'01000110',b'00100110'
0015F6 C810           00609         db      b'00010000',b'11001000'
0015F8 00C4           00610         db      b'11000100'
                      00611                                 ; &
0015FA 0C0A           00612         db      b'00001010',b'00001100'
0015FC A252           00613         db      b'01010010',b'10100010'
0015FE 005C           00614         db      b'01011100'
                      00615                                 ; '
001600 0000           00616         db      b'00000000',b'00000000'
001602 C000           00617         db      b'00000000',b'11000000'
001604 0000           00618         db      b'00000000'
                      00619                                 ; (
001606 8200           00620         db      b'00000000',b'10000010'
001608 3844           00621         db      b'01000100',b'00111000'
00160A 0000           00622         db      b'00000000'
                      00623                                 ; )
00160C 3800           00624         db      b'00000000',b'00111000'
00160E 8244           00625         db      b'01000100',b'10000010'
001610 0000           00626         db      b'00000000'
                      00627                                 ; *
001612 5410           00628         db      b'00010000',b'01010100'
001614 5438           00629         db      b'00111000',b'01010100'
001616 0010           00630         db      b'00010000'
                      00631                                 ; +
001618 1010           00632         db      b'00010000',b'00010000'
00161A 107C           00633         db      b'01111100',b'00010000'
00161C 0010           00634         db      b'00010000'
                      00635                                 ; ,
00161E 0000           00636         db      b'00000000',b'00000000'
001620 0102           00637         db      b'00000010',b'00000001'
001622 0000           00638         db      b'00000000'
                      00639                                 ; -
001624 1010           00640         db      b'00010000',b'00010000'
001626 1010           00641         db      b'00010000',b'00010000'
001628 0010           00642         db      b'00010000'
                      00643                                 ; .
00162A 0000           00644         db      b'00000000',b'00000000'
00162C 0200           00645         db      b'00000000',b'00000010'
00162E 0000           00646         db      b'00000000'
                      00647                                 ; /
001630 0804           00648         db      b'00000100',b'00001000'
001632 2010           00649         db      b'00010000',b'00100000'
001634 0040           00650         db      b'01000000'
                      00651                                 ; 0
001636 827C           00652         db      b'01111100',b'10000010'
001638 8282           00653         db      b'10000010',b'10000010'
00163A 007C           00654         db      b'01111100'
                      00655                                 ; 1
00163C 0200           00656         db      b'00000000',b'00000010'
00163E 42FE           00657         db      b'11111110',b'01000010'
MPASM  5.51                          DEMO.ASM   3-23-2016  21:08:21         PAGE 70


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

001640 0000           00658         db      b'00000000'
                      00659                                 ; 2
001642 9262           00660         db      b'01100010',b'10010010'
001644 868A           00661         db      b'10001010',b'10000110'
001646 0042           00662         db      b'01000010'
                      00663                                 ; 3
001648 926C           00664         db      b'01101100',b'10010010'
00164A 8292           00665         db      b'10010010',b'10000010'
00164C 0044           00666         db      b'01000100'
                      00667                                 ; 4
00164E 48FE           00668         db      b'11111110',b'01001000'
001650 1828           00669         db      b'00101000',b'00011000'
001652 0008           00670         db      b'00001000'
                      00671                                 ; 5
001654 928C           00672         db      b'10001100',b'10010010'
001656 9292           00673         db      b'10010010',b'10010010'
001658 00F2           00674         db      b'11110010'
                      00675                                 ; 6
00165A 920C           00676         db      b'00001100',b'10010010'
00165C 9292           00677         db      b'10010010',b'10010010'
00165E 007C           00678         db      b'01111100'
                      00679                                 ; 7
001660 A0C0           00680         db      b'11000000',b'10100000'
001662 8E90           00681         db      b'10010000',b'10001110'
001664 0080           00682         db      b'10000000'
                      00683                                 ; 8
001666 926C           00684         db      b'01101100',b'10010010'
001668 9292           00685         db      b'10010010',b'10010010'
00166A 006C           00686         db      b'01101100'
                      00687                                 ; 9
00166C 927C           00688         db      b'01111100',b'10010010'
00166E 9292           00689         db      b'10010010',b'10010010'
001670 0060           00690         db      b'01100000'
                      00691                                 ; :
001672 0000           00692         db      b'00000000',b'00000000'
001674 4400           00693         db      b'00000000',b'01000100'
001676 0000           00694         db      b'00000000'
                      00695                                 ; ;
001678 0000           00696         db      b'00000000',b'00000000'
00167A 4400           00697         db      b'00000000',b'01000100'
00167C 0002           00698         db      b'00000010'
                      00699                                 ; <
00167E 8200           00700         db      b'00000000',b'10000010'
001680 2844           00701         db      b'01000100',b'00101000'
001682 0010           00702         db      b'00010000'
                      00703                                 ; =
001684 2828           00704         db      b'00101000',b'00101000'
001686 2828           00705         db      b'00101000',b'00101000'
001688 0028           00706         db      b'00101000'
                      00707                                 ; >
00168A 2810           00708         db      b'00010000',b'00101000'
00168C 8244           00709         db      b'01000100',b'10000010'
00168E 0000           00710         db      b'00000000'
MPASM  5.51                          DEMO.ASM   3-23-2016  21:08:21         PAGE 71


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00711                                 ; ?
001690 9060           00712         db      b'01100000',b'10010000'
001692 808A           00713         db      b'10001010',b'10000000'
001694 0040           00714         db      b'01000000'
                      00715 
                      00716 
                      00717                                 ; @
001696 AA7A           00718         db      b'01111010',b'10101010'
001698 8292           00719         db      b'10010010',b'10000010'
00169A 007C           00720         db      b'01111100'
                      00721                                 ; A
00169C 483E           00722         db      b'00111110',b'01001000'
00169E 4888           00723         db      b'10001000',b'01001000'
0016A0 003E           00724         db      b'00111110'
                      00725                                 ; B
0016A2 926C           00726         db      b'01101100',b'10010010'
0016A4 9292           00727         db      b'10010010',b'10010010'
0016A6 00FE           00728         db      b'11111110'
                      00729                                 ; C
0016A8 8244           00730         db      b'01000100',b'10000010'
0016AA 8282           00731         db      b'10000010',b'10000010'
0016AC 007C           00732         db      b'01111100'
                      00733                                 ; D
0016AE 4438           00734         db      b'00111000',b'01000100'
0016B0 8282           00735         db      b'10000010',b'10000010'
0016B2 00FE           00736         db      b'11111110'
                      00737                                 ; E
0016B4 9282           00738         db      b'10000010',b'10010010'
0016B6 9292           00739         db      b'10010010',b'10010010'
0016B8 00FE           00740         db      b'11111110'
                      00741                                 ; F
0016BA 9080           00742         db      b'10000000',b'10010000'
0016BC 9090           00743         db      b'10010000',b'10010000'
0016BE 00FE           00744         db      b'11111110'
                      00745                                 ; G
0016C0 921E           00746         db      b'00011110',b'10010010'
0016C2 8292           00747         db      b'10010010',b'10000010'
0016C4 007C           00748         db      b'01111100'
                      00749                                 ; H
0016C6 10FE           00750         db      b'11111110',b'00010000'
0016C8 1010           00751         db      b'00010000',b'00010000'
0016CA 00FE           00752         db      b'11111110'
                      00753                                 ; I
0016CC 8200           00754         db      b'00000000',b'10000010'
0016CE 82FE           00755         db      b'11111110',b'10000010'
0016D0 0000           00756         db      b'00000000'
                      00757                                 ; J
0016D2 02FC           00758         db      b'11111100',b'00000010'
0016D4 0202           00759         db      b'00000010',b'00000010'
0016D6 0004           00760         db      b'00000100'
                      00761                                 ; K
0016D8 4482           00762         db      b'10000010',b'01000100'
0016DA 1028           00763         db      b'00101000',b'00010000'
MPASM  5.51                          DEMO.ASM   3-23-2016  21:08:21         PAGE 72


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0016DC 00FE           00764         db      b'11111110'
                      00765                                 ; L
0016DE 0202           00766         db      b'00000010',b'00000010'
0016E0 0202           00767         db      b'00000010',b'00000010'
0016E2 00FE           00768         db      b'11111110'
                      00769                                 ; M
0016E4 40FE           00770         db      b'11111110',b'01000000'
0016E6 4020           00771         db      b'00100000',b'01000000'
0016E8 00FE           00772         db      b'11111110'
                      00773                                 ; N
0016EA 04FE           00774         db      b'11111110',b'00000100'
0016EC 1008           00775         db      b'00001000',b'00010000'
0016EE 00FE           00776         db      b'11111110'
                      00777                                 ; O
0016F0 827C           00778         db      b'01111100',b'10000010'
0016F2 8282           00779         db      b'10000010',b'10000010'
0016F4 007C           00780         db      b'01111100'
                      00781                                 ; P
0016F6 9060           00782         db      b'01100000',b'10010000'
0016F8 9090           00783         db      b'10010000',b'10010000'
0016FA 00FE           00784         db      b'11111110'
                      00785                                 ; Q
0016FC 847A           00786         db      b'01111010',b'10000100'
0016FE 828A           00787         db      b'10001010',b'10000010'
001700 007C           00788         db      b'01111100'
                      00789                                 ; R
001702 9462           00790         db      b'01100010',b'10010100'
001704 9098           00791         db      b'10011000',b'10010000'
001706 00FE           00792         db      b'11111110'
                      00793                                 ; S
001708 924C           00794         db      b'01001100',b'10010010'
00170A 9292           00795         db      b'10010010',b'10010010'
00170C 0064           00796         db      b'01100100'
                      00797                                 ; T
00170E 8080           00798         db      b'10000000',b'10000000'
001710 80FE           00799         db      b'11111110',b'10000000'
001712 0080           00800         db      b'10000000'
                      00801                                 ; U
001714 02FC           00802         db      b'11111100',b'00000010'
001716 0202           00803         db      b'00000010',b'00000010'
001718 00FC           00804         db      b'11111100'
                      00805                                 ; V
00171A 04F8           00806         db      b'11111000',b'00000100'
00171C 0402           00807         db      b'00000010',b'00000100'
00171E 00F8           00808         db      b'11111000'
                      00809                                 ; W
001720 04FE           00810         db      b'11111110',b'00000100'
001722 0408           00811         db      b'00001000',b'00000100'
001724 00FE           00812         db      b'11111110'
                      00813                                 ; X
001726 28C6           00814         db      b'11000110',b'00101000'
001728 2810           00815         db      b'00010000',b'00101000'
00172A 00C6           00816         db      b'11000110'
MPASM  5.51                          DEMO.ASM   3-23-2016  21:08:21         PAGE 73


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00817                                 ; Y
00172C 20C0           00818         db      b'11000000',b'00100000'
00172E 201E           00819         db      b'00011110',b'00100000'
001730 00C0           00820         db      b'11000000'
                      00821                                 ; Z
001732 A2C2           00822         db      b'11000010',b'10100010'
001734 8A92           00823         db      b'10010010',b'10001010'
001736 0086           00824         db      b'10000110'
                      00825                                 ; [
001738 8200           00826         db      b'00000000',b'10000010'
00173A 00FE           00827         db      b'11111110',b'00000000'
00173C 0000           00828         db      b'00000000'
                      00829                                 ; \
00173E 0804           00830         db      b'00000100',b'00001000'
001740 2010           00831         db      b'00010000',b'00100000'
001742 0040           00832         db      b'01000000'
                      00833                                 ; ]
001744 0000           00834         db      b'00000000',b'00000000'
001746 82FE           00835         db      b'11111110',b'10000010'
001748 0000           00836         db      b'00000000'
                      00837                                 ; ^
00174A 4020           00838         db      b'00100000',b'01000000'
00174C 4080           00839         db      b'10000000',b'01000000'
00174E 0020           00840         db      b'00100000'
                      00841                                 ; _
001750 0101           00842         db      b'00000001',b'00000001'
001752 0101           00843         db      b'00000001',b'00000001'
001754 0001           00844         db      b'00000001'
                      00845 
                      00846 
                      00847                                 ; `
001756 0000           00848         db      b'00000000',b'00000000'
001758 8040           00849         db      b'01000000',b'10000000'
00175A 0000           00850         db      b'00000000'
                      00851                                 ; a
00175C 2A1E           00852         db      b'00011110',b'00101010'
00175E 2A2A           00853         db      b'00101010',b'00101010'
001760 0004           00854         db      b'00000100'
                      00855                                 ; b
001762 120C           00856         db      b'00001100',b'00010010'
001764 1212           00857         db      b'00010010',b'00010010'
001766 00FE           00858         db      b'11111110'
                      00859                                 ; c
001768 2222           00860         db      b'00100010',b'00100010'
00176A 2222           00861         db      b'00100010',b'00100010'
00176C 001C           00862         db      b'00011100'
                      00863                                 ; d
00176E 12FE           00864         db      b'11111110',b'00010010'
001770 1212           00865         db      b'00010010',b'00010010'
001772 000C           00866         db      b'00001100'
                      00867                                 ; e
001774 2A18           00868         db      b'00011000',b'00101010'
001776 2A2A           00869         db      b'00101010',b'00101010'
MPASM  5.51                          DEMO.ASM   3-23-2016  21:08:21         PAGE 74


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

001778 001C           00870         db      b'00011100'
                      00871                                 ; f
00177A 8040           00872         db      b'01000000',b'10000000'
00177C 7E90           00873         db      b'10010000',b'01111110'
00177E 0010           00874         db      b'00010000'
                      00875                                 ; g
001780 253E           00876         db      b'00111110',b'00100101'
001782 2525           00877         db      b'00100101',b'00100101'
001784 0018           00878         db      b'00011000'
                      00879                                 ; h
001786 201E           00880         db      b'00011110',b'00100000'
001788 2020           00881         db      b'00100000',b'00100000'
00178A 00FE           00882         db      b'11111110'
                      00883                                 ; i
00178C 0200           00884         db      b'00000000',b'00000010'
00178E 22BE           00885         db      b'10111110',b'00100010'
001790 0000           00886         db      b'00000000'
                      00887                                 ; j
001792 0000           00888         db      b'00000000',b'00000000'
001794 21BE           00889         db      b'10111110',b'00100001'
001796 0001           00890         db      b'00000001'
                      00891                                 ; k
001798 1422           00892         db      b'00100010',b'00010100'
00179A 0808           00893         db      b'00001000',b'00001000'
00179C 00FE           00894         db      b'11111110'
                      00895                                 ; l
00179E 0200           00896         db      b'00000000',b'00000010'
0017A0 82FE           00897         db      b'11111110',b'10000010'
0017A2 0000           00898         db      b'00000000'
                      00899                                 ; m
0017A4 201E           00900         db      b'00011110',b'00100000'
0017A6 201E           00901         db      b'00011110',b'00100000'
0017A8 003E           00902         db      b'00111110'
                      00903                                 ; n
0017AA 201E           00904         db      b'00011110',b'00100000'
0017AC 1020           00905         db      b'00100000',b'00010000'
0017AE 003E           00906         db      b'00111110'
                      00907                                 ; o
0017B0 221C           00908         db      b'00011100',b'00100010'
0017B2 2222           00909         db      b'00100010',b'00100010'
0017B4 001C           00910         db      b'00011100'
                      00911                                 ; p
0017B6 2418           00912         db      b'00011000',b'00100100'
0017B8 2424           00913         db      b'00100100',b'00100100'
0017BA 003F           00914         db      b'00111111'
                      00915                                 ; q
0017BC 243F           00916         db      b'00111111',b'00100100'
0017BE 2424           00917         db      b'00100100',b'00100100'
0017C0 0018           00918         db      b'00011000'
                      00919                                 ; r
0017C2 2020           00920         db      b'00100000',b'00100000'
0017C4 1020           00921         db      b'00100000',b'00010000'
0017C6 003E           00922         db      b'00111110'
MPASM  5.51                          DEMO.ASM   3-23-2016  21:08:21         PAGE 75


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00923                                 ; s
0017C8 2A24           00924         db      b'00100100',b'00101010'
0017CA 2A2A           00925         db      b'00101010',b'00101010'
0017CC 0012           00926         db      b'00010010'
                      00927                                 ; t
0017CE 0204           00928         db      b'00000100',b'00000010'
0017D0 FC22           00929         db      b'00100010',b'11111100'
0017D2 0020           00930         db      b'00100000'
                      00931                                 ; u
0017D4 023E           00932         db      b'00111110',b'00000010'
0017D6 0202           00933         db      b'00000010',b'00000010'
0017D8 003C           00934         db      b'00111100'
                      00935                                 ; v
0017DA 0438           00936         db      b'00111000',b'00000100'
0017DC 0402           00937         db      b'00000010',b'00000100'
0017DE 0038           00938         db      b'00111000'
                      00939                                 ; w
0017E0 043E           00940         db      b'00111110',b'00000100'
0017E2 0408           00941         db      b'00001000',b'00000100'
0017E4 003E           00942         db      b'00111110'
                      00943                                 ; x
0017E6 1422           00944         db      b'00100010',b'00010100'
0017E8 1408           00945         db      b'00001000',b'00010100'
0017EA 0022           00946         db      b'00100010'
                      00947                                 ; y
0017EC 093E           00948         db      b'00111110',b'00001001'
0017EE 0909           00949         db      b'00001001',b'00001001'
0017F0 0030           00950         db      b'00110000'
                      00951                                 ; z
0017F2 3222           00952         db      b'00100010',b'00110010'
0017F4 262A           00953         db      b'00101010',b'00100110'
0017F6 0022           00954         db      b'00100010'
                      00955                                 ; {
0017F8 8200           00956         db      b'00000000',b'10000010'
0017FA 106C           00957         db      b'01101100',b'00010000'
0017FC 0000           00958         db      b'00000000'
                      00959                                 ; |
0017FE 0000           00960         db      b'00000000',b'00000000'
001800 00FF           00961         db      b'11111111',b'00000000'
001802 0000           00962         db      b'00000000'
                      00963                                 ; }
001804 1000           00964         db      b'00000000',b'00010000'
001806 826C           00965         db      b'01101100',b'10000010'
001808 0000           00966         db      b'00000000'
                      00967                                 ; ~
00180A 2040           00968         db      b'01000000',b'00100000'
00180C 8040           00969         db      b'01000000',b'10000000'
00180E 0040           00970         db      b'01000000'
                      00971                                 ; 
001810 82FE           00972         db      b'11111110',b'10000010'
001812 8282           00973         db      b'10000010',b'10000010'
001814 00FE           00974         db      b'11111110'
                      00975 
MPASM  5.51                          DEMO.ASM   3-23-2016  21:08:21         PAGE 76


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00976 ;***************************************************************************************
                      00977 ;***************************************************************************************
                      00978 ;***************************************************************************************
                      00979 
001816                00980 charg3  ; 14x8
                      00981                                 ; space
001816 0000           00982         db      b'00000000',b'00000000'
001818 0000           00983         db      b'00000000',b'00000000'
00181A 0000           00984         db      b'00000000',b'00000000'
00181C 0000           00985         db      b'00000000',b'00000000'
00181E 0000           00986         db      b'00000000',b'00000000'
001820 0000           00987         db      b'00000000',b'00000000'
001822 0000           00988         db      b'00000000',b'00000000'
                      00989                                 ; !
001824 1818           00990         db      b'00011000',b'00011000'
001826 1818           00991         db      b'00011000',b'00011000'
001828 1818           00992         db      b'00011000',b'00011000'
00182A 1818           00993         db      b'00011000',b'00011000'
00182C 0000           00994         db      b'00000000',b'00000000'
00182E 1818           00995         db      b'00011000',b'00011000'
001830 0000           00996         db      b'00000000',b'00000000'
                      00997                                 ; "
001832 6666           00998         db      b'01100110',b'01100110'
001834 0044           00999         db      b'01000100',b'00000000'
001836 0000           01000         db      b'00000000',b'00000000'
001838 0000           01001         db      b'00000000',b'00000000'
00183A 0000           01002         db      b'00000000',b'00000000'
00183C 0000           01003         db      b'00000000',b'00000000'
00183E 0000           01004         db      b'00000000',b'00000000'
                      01005                                 ; #
001840 6666           01006         db      b'01100110',b'01100110'
001842 FF66           01007         db      b'01100110',b'11111111'
001844 66FF           01008         db      b'11111111',b'01100110'
001846 FF66           01009         db      b'01100110',b'11111111'
001848 66FF           01010         db      b'11111111',b'01100110'
00184A 6666           01011         db      b'01100110',b'01100110'
00184C 0000           01012         db      b'00000000',b'00000000'
                      01013                                 ; $
00184E 3E18           01014         db      b'00011000',b'00111110'
001850 D87E           01015         db      b'01111110',b'11011000'
001852 7CD8           01016         db      b'11011000',b'01111100'
001854 1B3E           01017         db      b'00111110',b'00011011'
001856 7E1B           01018         db      b'00011011',b'01111110'
001858 187C           01019         db      b'01111100',b'00011000'
00185A 0000           01020         db      b'00000000',b'00000000'
                      01021                                 ; %
00185C C1C0           01022         db      b'11000000',b'11000001'
00185E 0603           01023         db      b'00000011',b'00000110'
001860 180C           01024         db      b'00001100',b'00011000'
001862 6030           01025         db      b'00110000',b'01100000'
001864 80C0           01026         db      b'11000000',b'10000000'
001866 0303           01027         db      b'00000011',b'00000011'
001868 0000           01028         db      b'00000000',b'00000000'
MPASM  5.51                          DEMO.ASM   3-23-2016  21:08:21         PAGE 77


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01029                                 ; &
00186A 7E3C           01030         db      b'00111100',b'01111110'
00186C 6C66           01031         db      b'01100110',b'01101100'
00186E 3838           01032         db      b'00111000',b'00111000'
001870 C76C           01033         db      b'01101100',b'11000111'
001872 C7C7           01034         db      b'11000111',b'11000111'
001874 397E           01035         db      b'01111110',b'00111001'
001876 0000           01036         db      b'00000000',b'00000000'
                      01037                                 ; '
001878 1818           01038         db      b'00011000',b'00011000'
00187A 0030           01039         db      b'00110000',b'00000000'
00187C 0000           01040         db      b'00000000',b'00000000'
00187E 0000           01041         db      b'00000000',b'00000000'
001880 0000           01042         db      b'00000000',b'00000000'
001882 0000           01043         db      b'00000000',b'00000000'
001884 0000           01044         db      b'00000000',b'00000000'
                      01045                                 ; (
001886 180C           01046         db      b'00001100',b'00011000'
001888 6030           01047         db      b'00110000',b'01100000'
00188A 6060           01048         db      b'01100000',b'01100000'
00188C 6060           01049         db      b'01100000',b'01100000'
00188E 3060           01050         db      b'01100000',b'00110000'
001890 0C18           01051         db      b'00011000',b'00001100'
001892 0000           01052         db      b'00000000',b'00000000'
                      01053                                 ; )
001894 1830           01054         db      b'00110000',b'00011000'
001896 060C           01055         db      b'00001100',b'00000110'
001898 0606           01056         db      b'00000110',b'00000110'
00189A 0606           01057         db      b'00000110',b'00000110'
00189C 0C06           01058         db      b'00000110',b'00001100'
00189E 3018           01059         db      b'00011000',b'00110000'
0018A0 0000           01060         db      b'00000000',b'00000000'
                      01061                                 ; *
0018A2 C381           01062         db      b'10000001',b'11000011'
0018A4 3C66           01063         db      b'01100110',b'00111100'
0018A6 FF18           01064         db      b'00011000',b'11111111'
0018A8 18FF           01065         db      b'11111111',b'00011000'
0018AA 663C           01066         db      b'00111100',b'01100110'
0018AC 81C3           01067         db      b'11000011',b'10000001'
0018AE 0000           01068         db      b'00000000',b'00000000'
                      01069                                 ; +
0018B0 0000           01070         db      b'00000000',b'00000000'
0018B2 1818           01071         db      b'00011000',b'00011000'
0018B4 FF18           01072         db      b'00011000',b'11111111'
0018B6 18FF           01073         db      b'11111111',b'00011000'
0018B8 1818           01074         db      b'00011000',b'00011000'
0018BA 0000           01075         db      b'00000000',b'00000000'
0018BC 0000           01076         db      b'00000000',b'00000000'
                      01077                                 ; ,
0018BE 0000           01078         db      b'00000000',b'00000000'
0018C0 0000           01079         db      b'00000000',b'00000000'
0018C2 0000           01080         db      b'00000000',b'00000000'
0018C4 0000           01081         db      b'00000000',b'00000000'
MPASM  5.51                          DEMO.ASM   3-23-2016  21:08:21         PAGE 78


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0018C6 0000           01082         db      b'00000000',b'00000000'
0018C8 3030           01083         db      b'00110000',b'00110000'
0018CA 0060           01084         db      b'01100000',b'00000000'
                      01085                                 ; -
0018CC 0000           01086         db      b'00000000',b'00000000'
0018CE 0000           01087         db      b'00000000',b'00000000'
0018D0 FF00           01088         db      b'00000000',b'11111111'
0018D2 00FF           01089         db      b'11111111',b'00000000'
0018D4 0000           01090         db      b'00000000',b'00000000'
0018D6 0000           01091         db      b'00000000',b'00000000'
0018D8 0000           01092         db      b'00000000',b'00000000'
                      01093                                 ; .
0018DA 0000           01094         db      b'00000000',b'00000000'
0018DC 0000           01095         db      b'00000000',b'00000000'
0018DE 0000           01096         db      b'00000000',b'00000000'
0018E0 0000           01097         db      b'00000000',b'00000000'
0018E2 0000           01098         db      b'00000000',b'00000000'
0018E4 6060           01099         db      b'01100000',b'01100000'
0018E6 0000           01100         db      b'00000000',b'00000000'
                      01101                                 ; /
0018E8 0000           01102         db      b'00000000',b'00000000'
0018EA 0301           01103         db      b'00000001',b'00000011'
0018EC 0C06           01104         db      b'00000110',b'00001100'
0018EE 3018           01105         db      b'00011000',b'00110000'
0018F0 C060           01106         db      b'01100000',b'11000000'
0018F2 0080           01107         db      b'10000000',b'00000000'
0018F4 0000           01108         db      b'00000000',b'00000000'
                      01109                                 ; 0
0018F6 7E3C           01110         db      b'00111100',b'01111110'
0018F8 C3C3           01111         db      b'11000011',b'11000011'
0018FA C3C3           01112         db      b'11000011',b'11000011'
0018FC C3C3           01113         db      b'11000011',b'11000011'
0018FE C3C3           01114         db      b'11000011',b'11000011'
001900 3C7E           01115         db      b'01111110',b'00111100'
001902 0000           01116         db      b'00000000',b'00000000'
                      01117                                 ; 1
001904 3818           01118         db      b'00011000',b'00111000'
001906 1878           01119         db      b'01111000',b'00011000'
001908 1818           01120         db      b'00011000',b'00011000'
00190A 1818           01121         db      b'00011000',b'00011000'
00190C 1818           01122         db      b'00011000',b'00011000'
00190E 7E7E           01123         db      b'01111110',b'01111110'
001910 0000           01124         db      b'00000000',b'00000000'
                      01125                                 ; 2
001912 7E3C           01126         db      b'00111100',b'01111110'
001914 03C3           01127         db      b'11000011',b'00000011'
001916 0C06           01128         db      b'00000110',b'00001100'
001918 3018           01129         db      b'00011000',b'00110000'
00191A C060           01130         db      b'01100000',b'11000000'
00191C FFFF           01131         db      b'11111111',b'11111111'
00191E 0000           01132         db      b'00000000',b'00000000'
                      01133                                 ; 3
001920 7E3C           01134         db      b'00111100',b'01111110'
MPASM  5.51                          DEMO.ASM   3-23-2016  21:08:21         PAGE 79


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

001922 03C3           01135         db      b'11000011',b'00000011'
001924 0E03           01136         db      b'00000011',b'00001110'
001926 030E           01137         db      b'00001110',b'00000011'
001928 C303           01138         db      b'00000011',b'11000011'
00192A 3C7E           01139         db      b'01111110',b'00111100'
00192C 0000           01140         db      b'00000000',b'00000000'
                      01141                                 ; 4
00192E 0E06           01142         db      b'00000110',b'00001110'
001930 361E           01143         db      b'00011110',b'00110110'
001932 C666           01144         db      b'01100110',b'11000110'
001934 FFC6           01145         db      b'11000110',b'11111111'
001936 06FF           01146         db      b'11111111',b'00000110'
001938 0606           01147         db      b'00000110',b'00000110'
00193A 0000           01148         db      b'00000000',b'00000000'
                      01149                                 ; 5
00193C FFFF           01150         db      b'11111111',b'11111111'
00193E C0C0           01151         db      b'11000000',b'11000000'
001940 FCC0           01152         db      b'11000000',b'11111100'
001942 03FE           01153         db      b'11111110',b'00000011'
001944 0303           01154         db      b'00000011',b'00000011'
001946 FCFE           01155         db      b'11111110',b'11111100'
001948 0000           01156         db      b'00000000',b'00000000'
                      01157                                 ; 6
00194A 7E3E           01158         db      b'00111110',b'01111110'
00194C C0C0           01159         db      b'11000000',b'11000000'
00194E FCC0           01160         db      b'11000000',b'11111100'
001950 C3FE           01161         db      b'11111110',b'11000011'
001952 C3C3           01162         db      b'11000011',b'11000011'
001954 3C46           01163         db      b'01000110',b'00111100'
001956 0000           01164         db      b'00000000',b'00000000'
                      01165                                 ; 7
001958 FFFF           01166         db      b'11111111',b'11111111'
00195A 0303           01167         db      b'00000011',b'00000011'
00195C 0603           01168         db      b'00000011',b'00000110'
00195E 180C           01169         db      b'00001100',b'00011000'
001960 3030           01170         db      b'00110000',b'00110000'
001962 3030           01171         db      b'00110000',b'00110000'
001964 0000           01172         db      b'00000000',b'00000000'
                      01173                                 ; 8
001966 7E3C           01174         db      b'00111100',b'01111110'
001968 C3C3           01175         db      b'11000011',b'11000011'
00196A 7EC3           01176         db      b'11000011',b'01111110'
00196C C37E           01177         db      b'01111110',b'11000011'
00196E C3C3           01178         db      b'11000011',b'11000011'
001970 3C7E           01179         db      b'01111110',b'00111100'
001972 0000           01180         db      b'00000000',b'00000000'
                      01181                                 ; 9
001974 7E3C           01182         db      b'00111100',b'01111110'
001976 C3C3           01183         db      b'11000011',b'11000011'
001978 7FC3           01184         db      b'11000011',b'01111111'
00197A 033F           01185         db      b'00111111',b'00000011'
00197C 0303           01186         db      b'00000011',b'00000011'
00197E 7C7E           01187         db      b'01111110',b'01111100'
MPASM  5.51                          DEMO.ASM   3-23-2016  21:08:21         PAGE 80


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

001980 0000           01188         db      b'00000000',b'00000000'
                      01189                                 ; :
001982 1800           01190         db      b'00000000',b'00011000'
001984 0018           01191         db      b'00011000',b'00000000'
001986 0000           01192         db      b'00000000',b'00000000'
001988 0000           01193         db      b'00000000',b'00000000'
00198A 1800           01194         db      b'00000000',b'00011000'
00198C 0018           01195         db      b'00011000',b'00000000'
00198E 0000           01196         db      b'00000000',b'00000000'
                      01197                                 ; ;
001990 1800           01198         db      b'00000000',b'00011000'
001992 0018           01199         db      b'00011000',b'00000000'
001994 0000           01200         db      b'00000000',b'00000000'
001996 0000           01201         db      b'00000000',b'00000000'
001998 0000           01202         db      b'00000000',b'00000000'
00199A 1818           01203         db      b'00011000',b'00011000'
00199C 0010           01204         db      b'00010000',b'00000000'
                      01205                                 ; <
00199E 0603           01206         db      b'00000011',b'00000110'
0019A0 180C           01207         db      b'00001100',b'00011000'
0019A2 6030           01208         db      b'00110000',b'01100000'
0019A4 3060           01209         db      b'01100000',b'00110000'
0019A6 0C18           01210         db      b'00011000',b'00001100'
0019A8 0306           01211         db      b'00000110',b'00000011'
0019AA 0000           01212         db      b'00000000',b'00000000'
                      01213                                 ; =
0019AC 0000           01214         db      b'00000000',b'00000000'
0019AE FF00           01215         db      b'00000000',b'11111111'
0019B0 00FF           01216         db      b'11111111',b'00000000'
0019B2 FF00           01217         db      b'00000000',b'11111111'
0019B4 00FF           01218         db      b'11111111',b'00000000'
0019B6 0000           01219         db      b'00000000',b'00000000'
0019B8 0000           01220         db      b'00000000',b'00000000'
                      01221                                 ; >
0019BA 60C0           01222         db      b'11000000',b'01100000'
0019BC 1830           01223         db      b'00110000',b'00011000'
0019BE 060C           01224         db      b'00001100',b'00000110'
0019C0 0C06           01225         db      b'00000110',b'00001100'
0019C2 3018           01226         db      b'00011000',b'00110000'
0019C4 C060           01227         db      b'01100000',b'11000000'
0019C6 0000           01228         db      b'00000000',b'00000000'
                      01229                                 ; ?
0019C8 7E3C           01230         db      b'00111100',b'01111110'
0019CA 03C3           01231         db      b'11000011',b'00000011'
0019CC 0C06           01232         db      b'00000110',b'00001100'
0019CE 1818           01233         db      b'00011000',b'00011000'
0019D0 0018           01234         db      b'00011000',b'00000000'
0019D2 1818           01235         db      b'00011000',b'00011000'
0019D4 0000           01236         db      b'00000000',b'00000000'
                      01237 
                      01238                                 ; @
0019D6 7E3C           01239         db      b'00111100',b'01111110'
0019D8 C3C3           01240         db      b'11000011',b'11000011'
MPASM  5.51                          DEMO.ASM   3-23-2016  21:08:21         PAGE 81


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0019DA DEDB           01241         db      b'11011011',b'11011110'
0019DC C0DC           01242         db      b'11011100',b'11000000'
0019DE C0C0           01243         db      b'11000000',b'11000000'
0019E0 3E7E           01244         db      b'01111110',b'00111110'
0019E2 0000           01245         db      b'00000000',b'00000000'
                      01246                                 ; A
0019E4 3C18           01247         db      b'00011000',b'00111100'
0019E6 C366           01248         db      b'01100110',b'11000011'
0019E8 C3C3           01249         db      b'11000011',b'11000011'
0019EA FFC3           01250         db      b'11000011',b'11111111'
0019EC C3FF           01251         db      b'11111111',b'11000011'
0019EE C3C3           01252         db      b'11000011',b'11000011'
0019F0 0000           01253         db      b'00000000',b'00000000'
                      01254                                 ; B
0019F2 FEFC           01255         db      b'11111100',b'11111110'
0019F4 C3C3           01256         db      b'11000011',b'11000011'
0019F6 FEC3           01257         db      b'11000011',b'11111110'
0019F8 C3FE           01258         db      b'11111110',b'11000011'
0019FA C3C3           01259         db      b'11000011',b'11000011'
0019FC FCFE           01260         db      b'11111110',b'11111100'
0019FE 0000           01261         db      b'00000000',b'00000000'
                      01262                                 ; C
001A00 7F3C           01263         db      b'00111100',b'01111111'
001A02 C0C3           01264         db      b'11000011',b'11000000'
001A04 C0C0           01265         db      b'11000000',b'11000000'
001A06 C0C0           01266         db      b'11000000',b'11000000'
001A08 C3C0           01267         db      b'11000000',b'11000011'
001A0A 3C7E           01268         db      b'01111110',b'00111100'
001A0C 0000           01269         db      b'00000000',b'00000000'
                      01270                                 ; D
001A0E FEFC           01271         db      b'11111100',b'11111110'
001A10 C3C3           01272         db      b'11000011',b'11000011'
001A12 C3C3           01273         db      b'11000011',b'11000011'
001A14 C3C3           01274         db      b'11000011',b'11000011'
001A16 C3C3           01275         db      b'11000011',b'11000011'
001A18 FCFE           01276         db      b'11111110',b'11111100'
001A1A 0000           01277         db      b'00000000',b'00000000'
                      01278                                 ; E
001A1C FFFF           01279         db      b'11111111',b'11111111'
001A1E C0C0           01280         db      b'11000000',b'11000000'
001A20 FEC0           01281         db      b'11000000',b'11111110'
001A22 C0FE           01282         db      b'11111110',b'11000000'
001A24 C0C0           01283         db      b'11000000',b'11000000'
001A26 FFFF           01284         db      b'11111111',b'11111111'
001A28 0000           01285         db      b'00000000',b'00000000'
                      01286                                 ; F
001A2A FFFF           01287         db      b'11111111',b'11111111'
001A2C C0C0           01288         db      b'11000000',b'11000000'
001A2E FEC0           01289         db      b'11000000',b'11111110'
001A30 C0FE           01290         db      b'11111110',b'11000000'
001A32 C0C0           01291         db      b'11000000',b'11000000'
001A34 C0C0           01292         db      b'11000000',b'11000000'
001A36 0000           01293         db      b'00000000',b'00000000'
MPASM  5.51                          DEMO.ASM   3-23-2016  21:08:21         PAGE 82


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01294                                 ; G
001A38 7E3C           01295         db      b'00111100',b'01111110'
001A3A C0C3           01296         db      b'11000011',b'11000000'
001A3C C0C0           01297         db      b'11000000',b'11000000'
001A3E CFCF           01298         db      b'11001111',b'11001111'
001A40 C3C3           01299         db      b'11000011',b'11000011'
001A42 3E7F           01300         db      b'01111111',b'00111110'
001A44 0000           01301         db      b'00000000',b'00000000'
                      01302                                 ; H
001A46 C3C3           01303         db      b'11000011',b'11000011'
001A48 C3C3           01304         db      b'11000011',b'11000011'
001A4A FFC3           01305         db      b'11000011',b'11111111'
001A4C C3FF           01306         db      b'11111111',b'11000011'
001A4E C3C3           01307         db      b'11000011',b'11000011'
001A50 C3C3           01308         db      b'11000011',b'11000011'
001A52 0000           01309         db      b'00000000',b'00000000'
                      01310                                 ; I
001A54 3C3C           01311         db      b'00111100',b'00111100'
001A56 1818           01312         db      b'00011000',b'00011000'
001A58 1818           01313         db      b'00011000',b'00011000'
001A5A 1818           01314         db      b'00011000',b'00011000'
001A5C 1818           01315         db      b'00011000',b'00011000'
001A5E 3C3C           01316         db      b'00111100',b'00111100'
001A60 0000           01317         db      b'00000000',b'00000000'
                      01318                                 ; J
001A62 3E3E           01319         db      b'00111110',b'00111110'
001A64 0606           01320         db      b'00000110',b'00000110'
001A66 0606           01321         db      b'00000110',b'00000110'
001A68 0606           01322         db      b'00000110',b'00000110'
001A6A C606           01323         db      b'00000110',b'11000110'
001A6C 387C           01324         db      b'01111100',b'00111000'
001A6E 0000           01325         db      b'00000000',b'00000000'
                      01326                                 ; K
001A70 C6C3           01327         db      b'11000011',b'11000110'
001A72 D8CC           01328         db      b'11001100',b'11011000'
001A74 E0F0           01329         db      b'11110000',b'11100000'
001A76 E0C0           01330         db      b'11000000',b'11100000'
001A78 CCD8           01331         db      b'11011000',b'11001100'
001A7A C3C6           01332         db      b'11000110',b'11000011'
001A7C 0000           01333         db      b'00000000',b'00000000'
                      01334                                 ; L
001A7E C0C0           01335         db      b'11000000',b'11000000'
001A80 C0C0           01336         db      b'11000000',b'11000000'
001A82 C0C0           01337         db      b'11000000',b'11000000'
001A84 C0C0           01338         db      b'11000000',b'11000000'
001A86 C0C0           01339         db      b'11000000',b'11000000'
001A88 FFFF           01340         db      b'11111111',b'11111111'
001A8A 0000           01341         db      b'00000000',b'00000000'
                      01342                                 ; M
001A8C C381           01343         db      b'10000001',b'11000011'
001A8E FFE7           01344         db      b'11100111',b'11111111'
001A90 C3DB           01345         db      b'11011011',b'11000011'
001A92 C3C3           01346         db      b'11000011',b'11000011'
MPASM  5.51                          DEMO.ASM   3-23-2016  21:08:21         PAGE 83


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

001A94 C3C3           01347         db      b'11000011',b'11000011'
001A96 C3C3           01348         db      b'11000011',b'11000011'
001A98 0000           01349         db      b'00000000',b'00000000'
                      01350                                 ; N
001A9A C3C3           01351         db      b'11000011',b'11000011'
001A9C C3C3           01352         db      b'11000011',b'11000011'
001A9E E3C3           01353         db      b'11000011',b'11100011'
001AA0 DBF3           01354         db      b'11110011',b'11011011'
001AA2 C7CF           01355         db      b'11001111',b'11000111'
001AA4 C1C3           01356         db      b'11000011',b'11000001'
001AA6 0000           01357         db      b'00000000',b'00000000'
                      01358                                 ; O
001AA8 7E3C           01359         db      b'00111100',b'01111110'
001AAA C3C3           01360         db      b'11000011',b'11000011'
001AAC C3C3           01361         db      b'11000011',b'11000011'
001AAE C3C3           01362         db      b'11000011',b'11000011'
001AB0 C3C3           01363         db      b'11000011',b'11000011'
001AB2 3C7E           01364         db      b'01111110',b'00111100'
001AB4 0000           01365         db      b'00000000',b'00000000'
                      01366                                 ; P
001AB6 FEFC           01367         db      b'11111100',b'11111110'
001AB8 C3C3           01368         db      b'11000011',b'11000011'
001ABA FEC3           01369         db      b'11000011',b'11111110'
001ABC C0FC           01370         db      b'11111100',b'11000000'
001ABE C0C0           01371         db      b'11000000',b'11000000'
001AC0 C0C0           01372         db      b'11000000',b'11000000'
001AC2 0000           01373         db      b'00000000',b'00000000'
                      01374                                 ; Q
001AC4 7E3C           01375         db      b'00111100',b'01111110'
001AC6 C3C3           01376         db      b'11000011',b'11000011'
001AC8 C3C3           01377         db      b'11000011',b'11000011'
001ACA C3C3           01378         db      b'11000011',b'11000011'
001ACC CFDB           01379         db      b'11011011',b'11001111'
001ACE 3B7E           01380         db      b'01111110',b'00111011'
001AD0 0000           01381         db      b'00000000',b'00000000'
                      01382                                 ; R
001AD2 FEFC           01383         db      b'11111100',b'11111110'
001AD4 C3C3           01384         db      b'11000011',b'11000011'
001AD6 FEC3           01385         db      b'11000011',b'11111110'
001AD8 F0FC           01386         db      b'11111100',b'11110000'
001ADA CCD8           01387         db      b'11011000',b'11001100'
001ADC C3C6           01388         db      b'11000110',b'11000011'
001ADE 0000           01389         db      b'00000000',b'00000000'
                      01390                                 ; S
001AE0 7E3C           01391         db      b'00111100',b'01111110'
001AE2 C0C3           01392         db      b'11000011',b'11000000'
001AE4 7CC0           01393         db      b'11000000',b'01111100'
001AE6 033E           01394         db      b'00111110',b'00000011'
001AE8 C303           01395         db      b'00000011',b'11000011'
001AEA 3C7E           01396         db      b'01111110',b'00111100'
001AEC 0000           01397         db      b'00000000',b'00000000'
                      01398                                 ; T
001AEE FFFF           01399         db      b'11111111',b'11111111'
MPASM  5.51                          DEMO.ASM   3-23-2016  21:08:21         PAGE 84


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

001AF0 1818           01400         db      b'00011000',b'00011000'
001AF2 1818           01401         db      b'00011000',b'00011000'
001AF4 1818           01402         db      b'00011000',b'00011000'
001AF6 1818           01403         db      b'00011000',b'00011000'
001AF8 1818           01404         db      b'00011000',b'00011000'
001AFA 0000           01405         db      b'00000000',b'00000000'
                      01406                                 ; U
001AFC C3C3           01407         db      b'11000011',b'11000011'
001AFE C3C3           01408         db      b'11000011',b'11000011'
001B00 C3C3           01409         db      b'11000011',b'11000011'
001B02 C3C3           01410         db      b'11000011',b'11000011'
001B04 C3C3           01411         db      b'11000011',b'11000011'
001B06 3C7E           01412         db      b'01111110',b'00111100'
001B08 0000           01413         db      b'00000000',b'00000000'
                      01414                                 ; V
001B0A C3C3           01415         db      b'11000011',b'11000011'
001B0C C3C3           01416         db      b'11000011',b'11000011'
001B0E C3C3           01417         db      b'11000011',b'11000011'
001B10 6666           01418         db      b'01100110',b'01100110'
001B12 3C3C           01419         db      b'00111100',b'00111100'
001B14 1818           01420         db      b'00011000',b'00011000'
001B16 0000           01421         db      b'00000000',b'00000000'
                      01422                                 ; W
001B18 C3C3           01423         db      b'11000011',b'11000011'
001B1A C3C3           01424         db      b'11000011',b'11000011'
001B1C C3C3           01425         db      b'11000011',b'11000011'
001B1E DBC3           01426         db      b'11000011',b'11011011'
001B20 E7FF           01427         db      b'11111111',b'11100111'
001B22 81C3           01428         db      b'11000011',b'10000001'
001B24 0000           01429         db      b'00000000',b'00000000'
                      01430                                 ; X
001B26 C3C3           01431         db      b'11000011',b'11000011'
001B28 66C3           01432         db      b'11000011',b'01100110'
001B2A 183C           01433         db      b'00111100',b'00011000'
001B2C 3C18           01434         db      b'00011000',b'00111100'
001B2E C366           01435         db      b'01100110',b'11000011'
001B30 C3C3           01436         db      b'11000011',b'11000011'
001B32 0000           01437         db      b'00000000',b'00000000'
                      01438                                 ; Y
001B34 C3C3           01439         db      b'11000011',b'11000011'
001B36 C3C3           01440         db      b'11000011',b'11000011'
001B38 3C66           01441         db      b'01100110',b'00111100'
001B3A 1818           01442         db      b'00011000',b'00011000'
001B3C 1818           01443         db      b'00011000',b'00011000'
001B3E 1818           01444         db      b'00011000',b'00011000'
001B40 0000           01445         db      b'00000000',b'00000000'
                      01446                                 ; Z
001B42 FFFF           01447         db      b'11111111',b'11111111'
001B44 0603           01448         db      b'00000011',b'00000110'
001B46 180C           01449         db      b'00001100',b'00011000'
001B48 6030           01450         db      b'00110000',b'01100000'
001B4A C0C0           01451         db      b'11000000',b'11000000'
001B4C FFFF           01452         db      b'11111111',b'11111111'
MPASM  5.51                          DEMO.ASM   3-23-2016  21:08:21         PAGE 85


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

001B4E 0000           01453         db      b'00000000',b'00000000'
                      01454                                 ; [
001B50 3C3C           01455         db      b'00111100',b'00111100'
001B52 3030           01456         db      b'00110000',b'00110000'
001B54 3030           01457         db      b'00110000',b'00110000'
001B56 3030           01458         db      b'00110000',b'00110000'
001B58 3030           01459         db      b'00110000',b'00110000'
001B5A 3C3C           01460         db      b'00111100',b'00111100'
001B5C 0000           01461         db      b'00000000',b'00000000'
                      01462                                 ; \
001B5E 0000           01463         db      b'00000000',b'00000000'
001B60 C080           01464         db      b'10000000',b'11000000'
001B62 3060           01465         db      b'01100000',b'00110000'
001B64 0C18           01466         db      b'00011000',b'00001100'
001B66 0306           01467         db      b'00000110',b'00000011'
001B68 0001           01468         db      b'00000001',b'00000000'
001B6A 0000           01469         db      b'00000000',b'00000000'
                      01470                                 ; ]
001B6C 3C3C           01471         db      b'00111100',b'00111100'
001B6E 0C0C           01472         db      b'00001100',b'00001100'
001B70 0C0C           01473         db      b'00001100',b'00001100'
001B72 0C0C           01474         db      b'00001100',b'00001100'
001B74 0C0C           01475         db      b'00001100',b'00001100'
001B76 3C3C           01476         db      b'00111100',b'00111100'
001B78 0000           01477         db      b'00000000',b'00000000'
                      01478                                 ; ^
001B7A 3C18           01479         db      b'00011000',b'00111100'
001B7C 0066           01480         db      b'01100110',b'00000000'
001B7E 0000           01481         db      b'00000000',b'00000000'
001B80 0000           01482         db      b'00000000',b'00000000'
001B82 0000           01483         db      b'00000000',b'00000000'
001B84 0000           01484         db      b'00000000',b'00000000'
001B86 0000           01485         db      b'00000000',b'00000000'
                      01486                                 ; _
001B88 0000           01487         db      b'00000000',b'00000000'
001B8A 0000           01488         db      b'00000000',b'00000000'
001B8C 0000           01489         db      b'00000000',b'00000000'
001B8E 0000           01490         db      b'00000000',b'00000000'
001B90 0000           01491         db      b'00000000',b'00000000'
001B92 FF00           01492         db      b'00000000',b'11111111'
001B94 00FF           01493         db      b'11111111',b'00000000'
                      01494 
                      01495                                 ; `
001B96 0000           01496         db      b'00000000',b'00000000'
001B98 0000           01497         db      b'00000000',b'00000000'
001B9A 0000           01498         db      b'00000000',b'00000000'
001B9C 0000           01499         db      b'00000000',b'00000000'
001B9E 0000           01500         db      b'00000000',b'00000000'
001BA0 0000           01501         db      b'00000000',b'00000000'
001BA2 0000           01502         db      b'00000000',b'00000000'
                      01503                                 ; a
001BA4 0000           01504         db      b'00000000',b'00000000'
001BA6 7C00           01505         db      b'00000000',b'01111100'
MPASM  5.51                          DEMO.ASM   3-23-2016  21:08:21         PAGE 86


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

001BA8 037E           01506         db      b'01111110',b'00000011'
001BAA 7F3F           01507         db      b'00111111',b'01111111'
001BAC C3C3           01508         db      b'11000011',b'11000011'
001BAE 3F7F           01509         db      b'01111111',b'00111111'
001BB0 0000           01510         db      b'00000000',b'00000000'
                      01511                                 ; b
001BB2 C0C0           01512         db      b'11000000',b'11000000'
001BB4 C0C0           01513         db      b'11000000',b'11000000'
001BB6 FEFC           01514         db      b'11111100',b'11111110'
001BB8 C3C3           01515         db      b'11000011',b'11000011'
001BBA C3C3           01516         db      b'11000011',b'11000011'
001BBC FCFE           01517         db      b'11111110',b'11111100'
001BBE 0000           01518         db      b'00000000',b'00000000'
                      01519                                 ; c
001BC0 0000           01520         db      b'00000000',b'00000000'
001BC2 3F00           01521         db      b'00000000',b'00111111'
001BC4 C07F           01522         db      b'01111111',b'11000000'
001BC6 C0C0           01523         db      b'11000000',b'11000000'
001BC8 C0C0           01524         db      b'11000000',b'11000000'
001BCA 3F7F           01525         db      b'01111111',b'00111111'
001BCC 0000           01526         db      b'00000000',b'00000000'
                      01527                                 ; d
001BCE 0303           01528         db      b'00000011',b'00000011'
001BD0 0303           01529         db      b'00000011',b'00000011'
001BD2 7F3F           01530         db      b'00111111',b'01111111'
001BD4 C3C3           01531         db      b'11000011',b'11000011'
001BD6 C3C3           01532         db      b'11000011',b'11000011'
001BD8 3F7F           01533         db      b'01111111',b'00111111'
001BDA 0000           01534         db      b'00000000',b'00000000'
                      01535                                 ; e
001BDC 0000           01536         db      b'00000000',b'00000000'
001BDE 3C00           01537         db      b'00000000',b'00111100'
001BE0 C37E           01538         db      b'01111110',b'11000011'
001BE2 FFC3           01539         db      b'11000011',b'11111111'
001BE4 C0FF           01540         db      b'11111111',b'11000000'
001BE6 3E7E           01541         db      b'01111110',b'00111110'
001BE8 0000           01542         db      b'00000000',b'00000000'
                      01543                                 ; f
001BEA 3E1C           01544         db      b'00011100',b'00111110'
001BEC 6063           01545         db      b'01100011',b'01100000'
001BEE F860           01546         db      b'01100000',b'11111000'
001BF0 60F8           01547         db      b'11111000',b'01100000'
001BF2 6060           01548         db      b'01100000',b'01100000'
001BF4 6060           01549         db      b'01100000',b'01100000'
001BF6 0000           01550         db      b'00000000',b'00000000'
                      01551                                 ; g
001BF8 0000           01552         db      b'00000000',b'00000000'
001BFA 3C00           01553         db      b'00000000',b'00111100'
001BFC C37E           01554         db      b'01111110',b'11000011'
001BFE C3C3           01555         db      b'11000011',b'11000011'
001C00 3F7F           01556         db      b'01111111',b'00111111'
001C02 0303           01557         db      b'00000011',b'00000011'
001C04 7C7E           01558         db      b'01111110',b'01111100'
MPASM  5.51                          DEMO.ASM   3-23-2016  21:08:21         PAGE 87


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01559                                 ; h
001C06 C0C0           01560         db      b'11000000',b'11000000'
001C08 C0C0           01561         db      b'11000000',b'11000000'
001C0A FEFC           01562         db      b'11111100',b'11111110'
001C0C C3C3           01563         db      b'11000011',b'11000011'
001C0E C3C3           01564         db      b'11000011',b'11000011'
001C10 C3C3           01565         db      b'11000011',b'11000011'
001C12 0000           01566         db      b'00000000',b'00000000'
                      01567                                 ; i
001C14 1818           01568         db      b'00011000',b'00011000'
001C16 3800           01569         db      b'00000000',b'00111000'
001C18 1838           01570         db      b'00111000',b'00011000'
001C1A 1818           01571         db      b'00011000',b'00011000'
001C1C 1818           01572         db      b'00011000',b'00011000'
001C1E 3C3C           01573         db      b'00111100',b'00111100'
001C20 0000           01574         db      b'00000000',b'00000000'
                      01575                                 ; j
001C22 0C0C           01576         db      b'00001100',b'00001100'
001C24 0C00           01577         db      b'00000000',b'00001100'
001C26 0C0C           01578         db      b'00001100',b'00001100'
001C28 0C0C           01579         db      b'00001100',b'00001100'
001C2A 0C0C           01580         db      b'00001100',b'00001100'
001C2C CC0C           01581         db      b'00001100',b'11001100'
001C2E 3078           01582         db      b'01111000',b'00110000'
                      01583                                 ; k
001C30 C0C0           01584         db      b'11000000',b'11000000'
001C32 C3C0           01585         db      b'11000000',b'11000011'
001C34 CCC6           01586         db      b'11000110',b'11001100'
001C36 F0D8           01587         db      b'11011000',b'11110000'
001C38 CCD8           01588         db      b'11011000',b'11001100'
001C3A C3C6           01589         db      b'11000110',b'11000011'
001C3C 0000           01590         db      b'00000000',b'00000000'
                      01591                                 ; l
001C3E 1838           01592         db      b'00111000',b'00011000'
001C40 1818           01593         db      b'00011000',b'00011000'
001C42 1818           01594         db      b'00011000',b'00011000'
001C44 1818           01595         db      b'00011000',b'00011000'
001C46 1818           01596         db      b'00011000',b'00011000'
001C48 3C3C           01597         db      b'00111100',b'00111100'
001C4A 0000           01598         db      b'00000000',b'00000000'
                      01599                                 ; m
001C4C 0000           01600         db      b'00000000',b'00000000'
001C4E B600           01601         db      b'00000000',b'10110110'
001C50 DBFF           01602         db      b'11111111',b'11011011'
001C52 DBDB           01603         db      b'11011011',b'11011011'
001C54 DBDB           01604         db      b'11011011',b'11011011'
001C56 DBDB           01605         db      b'11011011',b'11011011'
001C58 0000           01606         db      b'00000000',b'00000000'
                      01607                                 ; n
001C5A 0000           01608         db      b'00000000',b'00000000'
001C5C DC00           01609         db      b'00000000',b'11011100'
001C5E E3FE           01610         db      b'11111110',b'11100011'
001C60 C3C3           01611         db      b'11000011',b'11000011'
MPASM  5.51                          DEMO.ASM   3-23-2016  21:08:21         PAGE 88


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

001C62 C3C3           01612         db      b'11000011',b'11000011'
001C64 C3C3           01613         db      b'11000011',b'11000011'
001C66 0000           01614         db      b'00000000',b'00000000'
                      01615                                 ; o
001C68 0000           01616         db      b'00000000',b'00000000'
001C6A 3C00           01617         db      b'00000000',b'00111100'
001C6C C37E           01618         db      b'01111110',b'11000011'
001C6E C3C3           01619         db      b'11000011',b'11000011'
001C70 C3C3           01620         db      b'11000011',b'11000011'
001C72 3C7E           01621         db      b'01111110',b'00111100'
001C74 0000           01622         db      b'00000000',b'00000000'
                      01623                                 ; p
001C76 0000           01624         db      b'00000000',b'00000000'
001C78 FC00           01625         db      b'00000000',b'11111100'
001C7A C3FE           01626         db      b'11111110',b'11000011'
001C7C C3C3           01627         db      b'11000011',b'11000011'
001C7E FCFE           01628         db      b'11111110',b'11111100'
001C80 C0C0           01629         db      b'11000000',b'11000000'
001C82 C0C0           01630         db      b'11000000',b'11000000'
                      01631                                 ; q
001C84 0000           01632         db      b'00000000',b'00000000'
001C86 3F00           01633         db      b'00000000',b'00111111'
001C88 C37F           01634         db      b'01111111',b'11000011'
001C8A C3C3           01635         db      b'11000011',b'11000011'
001C8C 3F7F           01636         db      b'01111111',b'00111111'
001C8E 0303           01637         db      b'00000011',b'00000011'
001C90 0303           01638         db      b'00000011',b'00000011'
                      01639                                 ; r
001C92 0000           01640         db      b'00000000',b'00000000'
001C94 DF00           01641         db      b'00000000',b'11011111'
001C96 E0FF           01642         db      b'11111111',b'11100000'
001C98 C0C0           01643         db      b'11000000',b'11000000'
001C9A C0C0           01644         db      b'11000000',b'11000000'
001C9C C0C0           01645         db      b'11000000',b'11000000'
001C9E 0000           01646         db      b'00000000',b'00000000'
                      01647                                 ; s
001CA0 0000           01648         db      b'00000000',b'00000000'
001CA2 3F00           01649         db      b'00000000',b'00111111'
001CA4 C07F           01650         db      b'01111111',b'11000000'
001CA6 3E7C           01651         db      b'01111100',b'00111110'
001CA8 0303           01652         db      b'00000011',b'00000011'
001CAA FCFE           01653         db      b'11111110',b'11111100'
001CAC 0000           01654         db      b'00000000',b'00000000'
                      01655                                 ; t
001CAE 6060           01656         db      b'01100000',b'01100000'
001CB0 F860           01657         db      b'01100000',b'11111000'
001CB2 60F8           01658         db      b'11111000',b'01100000'
001CB4 6060           01659         db      b'01100000',b'01100000'
001CB6 6360           01660         db      b'01100000',b'01100011'
001CB8 1C3E           01661         db      b'00111110',b'00011100'
001CBA 0000           01662         db      b'00000000',b'00000000'
                      01663                                 ; u
001CBC 0000           01664         db      b'00000000',b'00000000'
MPASM  5.51                          DEMO.ASM   3-23-2016  21:08:21         PAGE 89


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

001CBE C300           01665         db      b'00000000',b'11000011'
001CC0 C3C3           01666         db      b'11000011',b'11000011'
001CC2 C3C3           01667         db      b'11000011',b'11000011'
001CC4 C3C3           01668         db      b'11000011',b'11000011'
001CC6 3F7F           01669         db      b'01111111',b'00111111'
001CC8 0000           01670         db      b'00000000',b'00000000'
                      01671                                 ; v
001CCA 0000           01672         db      b'00000000',b'00000000'
001CCC C300           01673         db      b'00000000',b'11000011'
001CCE C3C3           01674         db      b'11000011',b'11000011'
001CD0 C3C3           01675         db      b'11000011',b'11000011'
001CD2 66C3           01676         db      b'11000011',b'01100110'
001CD4 183C           01677         db      b'00111100',b'00011000'
001CD6 0000           01678         db      b'00000000',b'00000000'
                      01679                                 ; w
001CD8 0000           01680         db      b'00000000',b'00000000'
001CDA C300           01681         db      b'00000000',b'11000011'
001CDC C3C3           01682         db      b'11000011',b'11000011'
001CDE DBC3           01683         db      b'11000011',b'11011011'
001CE0 E7FF           01684         db      b'11111111',b'11100111'
001CE2 81C3           01685         db      b'11000011',b'10000001'
001CE4 0000           01686         db      b'00000000',b'00000000'
                      01687                                 ; x
001CE6 0000           01688         db      b'00000000',b'00000000'
001CE8 C300           01689         db      b'00000000',b'11000011'
001CEA 3C66           01690         db      b'01100110',b'00111100'
001CEC 1818           01691         db      b'00011000',b'00011000'
001CEE 663C           01692         db      b'00111100',b'01100110'
001CF0 C3C3           01693         db      b'11000011',b'11000011'
001CF2 0000           01694         db      b'00000000',b'00000000'
                      01695                                 ; y
001CF4 0000           01696         db      b'00000000',b'00000000'
001CF6 C300           01697         db      b'00000000',b'11000011'
001CF8 C3C3           01698         db      b'11000011',b'11000011'
001CFA C3C3           01699         db      b'11000011',b'11000011'
001CFC 3F7F           01700         db      b'01111111',b'00111111'
001CFE 0303           01701         db      b'00000011',b'00000011'
001D00 7C7E           01702         db      b'01111110',b'01111100'
                      01703                                 ; z
001D02 0000           01704         db      b'00000000',b'00000000'
001D04 FF00           01705         db      b'00000000',b'11111111'
001D06 06FF           01706         db      b'11111111',b'00000110'
001D08 180C           01707         db      b'00001100',b'00011000'
001D0A 6030           01708         db      b'00110000',b'01100000'
001D0C FFFF           01709         db      b'11111111',b'11111111'
001D0E 0000           01710         db      b'00000000',b'00000000'
                      01711                                 ; {
001D10 1E0E           01712         db      b'00001110',b'00011110'
001D12 3030           01713         db      b'00110000',b'00110000'
001D14 6030           01714         db      b'00110000',b'01100000'
001D16 3060           01715         db      b'01100000',b'00110000'
001D18 3030           01716         db      b'00110000',b'00110000'
001D1A 0E1E           01717         db      b'00011110',b'00001110'
MPASM  5.51                          DEMO.ASM   3-23-2016  21:08:21         PAGE 90


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

001D1C 0000           01718         db      b'00000000',b'00000000'
                      01719                                 ; |
001D1E 1818           01720         db      b'00011000',b'00011000'
001D20 1818           01721         db      b'00011000',b'00011000'
001D22 1818           01722         db      b'00011000',b'00011000'
001D24 1818           01723         db      b'00011000',b'00011000'
001D26 1818           01724         db      b'00011000',b'00011000'
001D28 1818           01725         db      b'00011000',b'00011000'
001D2A 0000           01726         db      b'00000000',b'00000000'
                      01727                                 ; }
001D2C 7870           01728         db      b'01110000',b'01111000'
001D2E 0C0C           01729         db      b'00001100',b'00001100'
001D30 060C           01730         db      b'00001100',b'00000110'
001D32 0C06           01731         db      b'00000110',b'00001100'
001D34 0C0C           01732         db      b'00001100',b'00001100'
001D36 7078           01733         db      b'01111000',b'01110000'
001D38 0000           01734         db      b'00000000',b'00000000'
                      01735                                 ; ~
001D3A DB70           01736         db      b'01110000',b'11011011'
001D3C 000E           01737         db      b'00001110',b'00000000'
001D3E 0000           01738         db      b'00000000',b'00000000'
001D40 0000           01739         db      b'00000000',b'00000000'
001D42 0000           01740         db      b'00000000',b'00000000'
001D44 0000           01741         db      b'00000000',b'00000000'
001D46 0000           01742         db      b'00000000',b'00000000'
                      01743                                 ; 
001D48 FFFF           01744         db      b'11111111',b'11111111'
001D4A C3C3           01745         db      b'11000011',b'11000011'
001D4C C3C3           01746         db      b'11000011',b'11000011'
001D4E C3C3           01747         db      b'11000011',b'11000011'
001D50 C3C3           01748         db      b'11000011',b'11000011'
001D52 FFFF           01749         db      b'11111111',b'11111111'
001D54 0000           01750         db      b'00000000',b'00000000'
                      01751 
                      01752 ;                                                                                                       
                                                                                                    
                      01753 ;                                                                                                       
                                                                                                    
                      01754 ;                                                                                                       
                                                                                                    
                      01755 
001D56                01756 charg4  ; 5x3
                      01757                                                 ; 0
001D56 0A0E           01758         db      b'1110',b'1010'
001D58 0A0A           01759         db      b'1010',b'1010'
001D5A 000E           01760         db      b'1110'
                      01761                                 ; 1
001D5C 040C           01762         db      b'1100',b'0100'
001D5E 0404           01763         db      b'0100',b'0100'
001D60 000E           01764         db      b'1110'
                      01765                                 ; 2
001D62 020E           01766         db      b'1110',b'0010'
001D64 080E           01767         db      b'1110',b'1000'
MPASM  5.51                          DEMO.ASM   3-23-2016  21:08:21         PAGE 91


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

001D66 000E           01768         db      b'1110'
                      01769                                 ; 3
001D68 020E           01770         db      b'1110',b'0010'
001D6A 020E           01771         db      b'1110',b'0010'
001D6C 000E           01772         db      b'1110'
                      01773                                 ; 4
001D6E 0A0A           01774         db      b'1010',b'1010'
001D70 020E           01775         db      b'1110',b'0010'
001D72 0002           01776         db      b'0010'
                      01777                                 ; 5
001D74 080E           01778         db      b'1110',b'1000'
001D76 020E           01779         db      b'1110',b'0010'
001D78 000E           01780         db      b'1110'
                      01781                                 ; 6
001D7A 080E           01782         db      b'1110',b'1000'
001D7C 0A0E           01783         db      b'1110',b'1010'
001D7E 000E           01784         db      b'1110'
                      01785                                 ; 7
001D80 020E           01786         db      b'1110',b'0010'
001D82 0804           01787         db      b'0100',b'1000'
001D84 0008           01788         db      b'1000'
                      01789                                 ; 8
001D86 0A0E           01790         db      b'1110',b'1010'
001D88 0A0E           01791         db      b'1110',b'1010'
001D8A 000E           01792         db      b'1110'
                      01793                                 ; 9
001D8C 0A0E           01794         db      b'1110',b'1010'
001D8E 020E           01795         db      b'1110',b'0010'
001D90 000E           01796         db      b'1110'
                      01797                                 ; blank
001D92 0000           01798         db      b'0000',b'0000'
001D94 0000           01799         db      b'0000',b'0000'
001D96 0000           01800         db      b'0000'
                      00154 
                      00155         END
MPASM  5.51                          DEMO.ASM   3-23-2016  21:08:21         PAGE 92


SYMBOL TABLE
  LABEL                             VALUE 

A                                 00000000
ABDEN                             00000000
ABDOVF                            00000007
ACCESS                            00000000
ACKDT                             00000005
ACKEN                             00000004
ACKSTAT                           00000006
ACKTIM                            00000007
ACQT0                             00000003
ACQT1                             00000004
ACQT2                             00000005
ACTCON                            00000FB5
ACTD                              00000006
ACTEN                             00000007
ACTIE                             00000007
ACTIF                             00000007
ACTIP                             00000007
ACTLOCK                           00000003
ACTMD                             00000004
ACTOR                             00000001
ACTORS                            00000001
ACTSEL                            00000007
ACTSRC                            00000004
ACTUD                             00000006
ACTVIE                            00000002
ACTVIF                            00000002
ADCMD                             00000002
ADCON0                            00000FC2
ADCON1                            00000FC1
ADCON2                            00000FC0
ADCS0                             00000000
ADCS1                             00000001
ADCS2                             00000002
ADDEN                             00000003
ADDR0                             00000000
ADDR1                             00000001
ADDR2                             00000002
ADDR3                             00000003
ADDR4                             00000004
ADDR5                             00000005
ADDR6                             00000006
ADEN                              00000003
ADFM                              00000007
ADIE                              00000006
ADIF                              00000006
ADIP                              00000006
ADON                              00000000
ADRESH                            00000FC4
ADRESL                            00000FC3
AHEN                              00000001
AN0                               00000000
AN1                               00000001
AN2                               00000002
MPASM  5.51                          DEMO.ASM   3-23-2016  21:08:21         PAGE 93


SYMBOL TABLE
  LABEL                             VALUE 

AN3                               00000003
AN4                               00000005
ANSA0                             00000000
ANSA1                             00000001
ANSA2                             00000002
ANSA3                             00000003
ANSA5                             00000005
ANSB0                             00000000
ANSB1                             00000001
ANSB2                             00000002
ANSB3                             00000003
ANSB4                             00000004
ANSB5                             00000005
ANSC2                             00000002
ANSC6                             00000006
ANSC7                             00000007
ANSELA                            00000F5B
ANSELB                            00000F5C
ANSELC                            00000F5D
AccX                              0000001F
AccY                              00000021
AccZ                              00000023
BANKED                            00000001
BAUDCON                           00000FB8
BAUDCON1                          00000FB8
BCL1IE                            00000003
BCL1IF                            00000003
BCL1IP                            00000003
BCLIE                             00000003
BCLIF                             00000003
BCLIP                             00000003
BF                                00000000
BGVST                             00000006
BOEN                              00000004
BOR                               00000000
BRG0                              00000000
BRG1                              00000001
BRG10                             00000002
BRG11                             00000003
BRG12                             00000004
BRG13                             00000005
BRG14                             00000006
BRG15                             00000007
BRG16                             00000003
BRG2                              00000002
BRG3                              00000003
BRG4                              00000004
BRG5                              00000005
BRG6                              00000006
BRG7                              00000007
BRG8                              00000000
BRG9                              00000001
BRGH                              00000002
MPASM  5.51                          DEMO.ASM   3-23-2016  21:08:21         PAGE 94


SYMBOL TABLE
  LABEL                             VALUE 

BSR                               00000FE0
BTOEE                             00000004
BTOEF                             00000004
BTSEE                             00000007
BTSEF                             00000007
Bcd                               0000001D
Bin                               0000001B
BitMask                           00000000
BittabR                           00000740
Block                             00000006
Block.count                       00000010
BlockA                            0000000D
BlockX                            0000000B
BlockY                            0000000C
Buffer                            00000000
Buffer2                           00000000
Buffer3                           00000730
BufferPause                       00000000
C                                 00000000
C1CH0                             00000000
C1CH1                             00000001
C1HYS                             00000003
C1IE                              00000006
C1IF                              00000006
C1IP                              00000006
C1OE                              00000005
C1ON                              00000007
C1OUT                             00000006
C1POL                             00000004
C1R                               00000002
C1RSEL                            00000005
C1SP                              00000003
C1SYNC                            00000001
C1TSEL                            00000000
C2CH0                             00000000
C2CH1                             00000001
C2HYS                             00000002
C2IE                              00000005
C2IF                              00000005
C2IP                              00000005
C2OE                              00000005
C2ON                              00000007
C2OUT                             00000006
C2POL                             00000004
C2R                               00000002
C2RSEL                            00000004
C2SP                              00000003
C2SYNC                            00000000
C2TSEL                            00000003
CCH0                              00000000
CCH1                              00000001
CCP1                              00000002
CCP1ASE                           00000007
MPASM  5.51                          DEMO.ASM   3-23-2016  21:08:21         PAGE 95


SYMBOL TABLE
  LABEL                             VALUE 

CCP1CON                           00000FBD
CCP1IE                            00000002
CCP1IF                            00000002
CCP1IP                            00000002
CCP1M0                            00000000
CCP1M1                            00000001
CCP1M2                            00000002
CCP1M3                            00000003
CCP1MD                            00000000
CCP1X                             00000005
CCP1Y                             00000004
CCP2CON                           00000F97
CCP2IE                            00000000
CCP2IF                            00000000
CCP2IP                            00000000
CCP2M0                            00000000
CCP2M1                            00000001
CCP2M2                            00000002
CCP2M3                            00000003
CCP2MD                            00000001
CCP2X                             00000005
CCP2Y                             00000004
CCPR1                             00000FBE
CCPR1H                            00000FBF
CCPR1L                            00000FBE
CCPR2                             00000F90
CCPR2H                            00000F91
CCPR2L                            00000F90
CCPTMRS                           00000F59
CFGS                              00000006
CK                                00000006
CKE                               00000006
CKP                               00000004
CKTXP                             00000004
CM1CON0                           00000F98
CM1IE                             00000006
CM1IF                             00000006
CM1IP                             00000006
CM2CON0                           00000F99
CM2CON1                           00000F9A
CM2IE                             00000005
CM2IF                             00000005
CM2IP                             00000005
CMP1MD                            00000003
CMP2MD                            00000004
COE                               00000005
CON                               00000007
COUT1                             00000006
COUT2                             00000006
CPOL                              00000004
CRC16EE                           00000002
CRC16EF                           00000002
CRC5EE                            00000001
MPASM  5.51                          DEMO.ASM   3-23-2016  21:08:21         PAGE 96


SYMBOL TABLE
  LABEL                             VALUE 

CRC5EF                            00000001
CREF                              00000002
CREN                              00000004
CSRC                              00000007
CTMUCON0                          00000F8F
CTMUCON1                          00000F8E
CTMUCONH                          00000F8F
CTMUCONL                          00000F8E
CTMUEN                            00000007
CTMUICON                          00000F88
CTMUIE                            00000003
CTMUIF                            00000003
CTMUIP                            00000003
CTMUMD                            00000005
CTMUSIDL                          00000005
CTTRIG                            00000000
ColCount                          00000018
CurrentBlock                      00000007
DACEN                             00000007
DACLPS                            00000006
DACNSS                            00000000
DACOE                             00000005
DACPSS0                           00000002
DACPSS1                           00000003
DACR0                             00000000
DACR1                             00000001
DACR2                             00000002
DACR3                             00000003
DACR4                             00000004
DC                                00000001
DC1B0                             00000004
DC1B1                             00000005
DC2B0                             00000004
DC2B1                             00000005
DDRA                              TRISA
DDRB                              TRISB
DDRC                              TRISC
DDRD                              TRISD
DDRE                              TRISE
DFN8EE                            00000003
DFN8EF                            00000003
DHEN                              00000000
DIR                               00000002
DONE                              00000001
DTRXP                             00000005
D_NOT_A                           00000005
Disp.text                         00000600
DispPtr                           00000017
DispSpeed                         00000016
Dots                              00000748
ECCP1AS                           00000FB6
ECCP1AS0                          00000004
ECCP1AS1                          00000005
MPASM  5.51                          DEMO.ASM   3-23-2016  21:08:21         PAGE 97


SYMBOL TABLE
  LABEL                             VALUE 

ECCP1AS2                          00000006
ECCP1ASE                          00000007
ECCP1CON                          00000FBD
ECCP1DEL                          00000FB7
ECCP2CON                          00000F97
EDG1POL                           00000004
EDG1SEL0                          00000002
EDG1SEL1                          00000003
EDG1STAT                          00000000
EDG2POL                           00000007
EDG2SEL0                          00000005
EDG2SEL1                          00000006
EDG2STAT                          00000001
EDGEN                             00000003
EDGSEQEN                          00000002
EEADR                             00000FA9
EECON1                            00000FA6
EECON2                            00000FA7
EEDATA                            00000FA8
EEIE                              00000004
EEIF                              00000004
EEIP                              00000004
EEPGD                             00000007
ENDP0                             00000003
ENDP1                             00000004
ENDP2                             00000005
ENDP3                             00000006
EPCONDIS                          00000003
EPHSHK                            00000004
EPINEN                            00000001
EPOUTEN                           00000002
EPSTALL                           00000000
FAST                              00000001
FERR                              00000002
FLTS                              00000002
FREE                              00000004
FRM0                              00000000
FRM1                              00000001
FRM10                             00000002
FRM2                              00000002
FRM3                              00000003
FRM4                              00000004
FRM5                              00000005
FRM6                              00000006
FRM7                              00000007
FRM8                              00000000
FRM9                              00000001
FSEN                              00000002
FSR0                              00000000
FSR0H                             00000FEA
FSR0L                             00000FE9
FSR1                              00000001
FSR1H                             00000FE2
MPASM  5.51                          DEMO.ASM   3-23-2016  21:08:21         PAGE 98


SYMBOL TABLE
  LABEL                             VALUE 

FSR1L                             00000FE1
FSR2                              00000002
FSR2H                             00000FDA
FSR2L                             00000FD9
FVREN                             00000007
FVRS0                             00000004
FVRS1                             00000005
FVRST                             00000006
Flag                              00000000
FlagDemo                          00000000
GCEN                              00000007
GIE                               00000007
GIEH                              00000007
GIEL                              00000006
GIE_GIEH                          00000007
GO                                00000001
GO_NOT_DONE                       00000001
HFIOFR                            00000001
HFIOFS                            00000002
HLVDCON                           00000F9C
HLVDEN                            00000004
HLVDIE                            00000002
HLVDIF                            00000002
HLVDIN                            00000005
HLVDIP                            00000002
HLVDL0                            00000000
HLVDL1                            00000001
HLVDL2                            00000002
HLVDL3                            00000003
IDISSEN                           00000001
IDLEIE                            00000004
IDLEIF                            00000004
IDLEN                             00000007
INDF0                             00000FEF
INDF1                             00000FE7
INDF2                             00000FDF
INT0                              00000000
INT0E                             00000004
INT0F                             00000001
INT0IE                            00000004
INT0IF                            00000001
INT1                              00000001
INT1E                             00000003
INT1F                             00000000
INT1IE                            00000003
INT1IF                            00000000
INT1IP                            00000006
INT1P                             00000006
INT2                              00000002
INT2E                             00000004
INT2F                             00000001
INT2IE                            00000004
INT2IF                            00000001
MPASM  5.51                          DEMO.ASM   3-23-2016  21:08:21         PAGE 99


SYMBOL TABLE
  LABEL                             VALUE 

INT2IP                            00000007
INT2P                             00000007
INTCON                            00000FF2
INTCON2                           00000FF1
INTCON3                           00000FF0
INTEDG0                           00000006
INTEDG1                           00000005
INTEDG2                           00000004
INTSRC                            00000005
IOCB                              00000F86
IOCB4                             00000004
IOCB5                             00000005
IOCB6                             00000006
IOCB7                             00000007
IOCC                              00000F87
IOCC0                             00000000
IOCC1                             00000001
IOCC2                             00000002
IOCC4                             00000004
IOCC5                             00000005
IOCC6                             00000006
IOCC7                             00000007
IOCIE                             00000003
IOCIF                             00000000
IOCIP                             00000000
IPEN                              00000007
IPR1                              00000F9F
IPR2                              00000FA2
IPR3                              00000FA5
IRCF0                             00000004
IRCF1                             00000005
IRCF2                             00000006
IRNG0                             00000000
IRNG1                             00000001
IRVST                             00000005
ITRIM0                            00000002
ITRIM1                            00000003
ITRIM2                            00000004
ITRIM3                            00000005
ITRIM4                            00000006
ITRIM5                            00000007
Inner                             00000001
KeyEdge                           00000000
LATA                              00000F89
LATA0                             00000000
LATA1                             00000001
LATA2                             00000002
LATA3                             00000003
LATA4                             00000004
LATA5                             00000005
LATA6                             00000006
LATA7                             00000007
LATB                              00000F8A
MPASM  5.51                          DEMO.ASM   3-23-2016  21:08:21         PAGE 100


SYMBOL TABLE
  LABEL                             VALUE 

LATB0                             00000000
LATB1                             00000001
LATB2                             00000002
LATB3                             00000003
LATB4                             00000004
LATB5                             00000005
LATB6                             00000006
LATB7                             00000007
LATC                              00000F8B
LATC0                             00000000
LATC1                             00000001
LATC2                             00000002
LATC4                             00000004
LATC5                             00000005
LATC6                             00000006
LATC7                             00000007
LFIOFS                            00000000
LVDIE                             00000002
LVDIF                             00000002
LVDIN                             00000005
LVDIP                             00000002
MC1OUT                            00000007
MC2OUT                            00000006
MSSP1MD                           00000006
MSSPMD                            00000006
MYserial                          00000000
Ma0                               00000000
Ma1                               00000000
Ma2                               00000000
Ma3                               00000000
Mc0                               00000000
Mc1                               00000000
Mc2                               00000000
Mc3                               00000000
N                                 00000004
NOT_BOR                           00000000
NOT_DONE                          00000001
NOT_PD                            00000002
NOT_POR                           00000001
NOT_RBPU                          00000007
NOT_RI                            00000004
NOT_T1DONE                        00000003
NOT_T1SYNC                        00000002
NOT_T3DONE                        00000003
NOT_T3SYNC                        00000002
NOT_TO                            00000003
NVCFG0                            00000000
NVCFG1                            00000001
OERR                              00000001
ON                                00000007
OSC2                              00000006
OSCCON                            00000FD3
OSCCON2                           00000FD2
MPASM  5.51                          DEMO.ASM   3-23-2016  21:08:21         PAGE 101


SYMBOL TABLE
  LABEL                             VALUE 

OSCFIE                            00000007
OSCFIF                            00000007
OSCFIP                            00000007
OSCTUNE                           00000F9B
OSTS                              00000003
OV                                00000003
Offset                            00000000
Outer                             00000002
P                                 00000004
P1A                               00000002
P1M0                              00000006
P1M1                              00000007
P1RSEN                            00000007
PC                                00000FF9
PCIE                              00000006
PCL                               00000FF9
PCLATH                            00000FFA
PCLATU                            00000FFB
PD                                00000002
PDC0                              00000000
PDC1                              00000001
PDC2                              00000002
PDC3                              00000003
PDC4                              00000004
PDC5                              00000005
PDC6                              00000006
PEIE                              00000006
PEIE_GIEL                         00000006
PEN                               00000002
PGC                               00000006
PGD                               00000007
PGM                               00000005
PIDEE                             00000000
PIDEF                             00000000
PIE1                              00000F9D
PIE2                              00000FA0
PIE3                              00000FA3
PIR1                              00000F9E
PIR2                              00000FA1
PIR3                              00000FA4
PKTDIS                            00000004
PLLEN                             00000004
PLLRDY                            00000007
PLUSW0                            00000FEB
PLUSW1                            00000FE3
PLUSW2                            00000FDB
PMD0                              00000F7E
PMD1                              00000F7F
POR                               00000001
PORTA                             00000F80
PORTB                             00000F81
PORTC                             00000F82
PORTE                             00000F84
MPASM  5.51                          DEMO.ASM   3-23-2016  21:08:21         PAGE 102


SYMBOL TABLE
  LABEL                             VALUE 

POSTDEC0                          00000FED
POSTDEC1                          00000FE5
POSTDEC2                          00000FDD
POSTINC0                          00000FEE
POSTINC1                          00000FE6
POSTINC2                          00000FDE
PPB0                              00000000
PPB1                              00000001
PPBI                              00000001
PPBRST                            00000006
PR1SEN                            00000007
PR2                               00000FBB
PREINC0                           00000FEC
PREINC1                           00000FE4
PREINC2                           00000FDC
PRISD                             00000002
PROD                              00000FF3
PRODH                             00000FF4
PRODL                             00000FF3
PSA                               00000003
PSS1AC0                           00000002
PSS1AC1                           00000003
PSS1BD0                           00000000
PSS1BD1                           00000001
PSSAC0                            00000002
PSSAC1                            00000003
PSSBD0                            00000000
PSSBD1                            00000001
PSTR1CON                          00000FB9
PVCFG0                            00000002
PVCFG1                            00000003
PWM1CON                           00000FB7
RA0                               00000000
RA1                               00000001
RA2                               00000002
RA3                               00000003
RA4                               00000004
RA5                               00000005
RA6                               00000006
RA7                               00000007
RB0                               00000000
RB1                               00000001
RB2                               00000002
RB3                               00000003
RB4                               00000004
RB5                               00000005
RB6                               00000006
RB7                               00000007
RBPU                              00000007
RC0                               00000000
RC1                               00000001
RC1IE                             00000005
RC1IF                             00000005
MPASM  5.51                          DEMO.ASM   3-23-2016  21:08:21         PAGE 103


SYMBOL TABLE
  LABEL                             VALUE 

RC1IP                             00000005
RC2                               00000002
RC4                               00000004
RC5                               00000005
RC6                               00000006
RC7                               00000007
RCEN                              00000003
RCIDL                             00000006
RCIE                              00000005
RCIF                              00000005
RCIP                              00000005
RCMT                              00000006
RCON                              00000FD0
RCREG                             00000FAE
RCREG1                            00000FAE
RCSTA                             00000FAB
RCSTA1                            00000FAB
RD                                00000000
RD16                              00000001
RE3                               00000003
RESUME                            00000002
RI                                00000004
RSEN                              00000001
RX                                00000007
RX9                               00000006
RX9D                              00000000
RXDTP                             00000005
RXFlag                            00000000
RXpatience                        00000000
RXptr                             00000000
R_NOT_W                           00000002
Received                          00000000
Rotor0                            00000000
Rotor1                            00000000
Rotor2                            00000000
Rotor3                            00000000
S                                 00000003
SBCDE                             00000002
SBOREN                            00000006
SCIE                              00000005
SCKP                              00000004
SCS0                              00000000
SCS1                              00000001
SDAHT                             00000003
SE0                               00000005
SEN                               00000000
SENDB                             00000003
SIDL                              00000005
SLRA                              00000000
SLRB                              00000001
SLRC                              00000002
SLRCON                            00000F7A
SMP                               00000007
MPASM  5.51                          DEMO.ASM   3-23-2016  21:08:21         PAGE 104


SYMBOL TABLE
  LABEL                             VALUE 

SOFIE                             00000006
SOFIF                             00000006
SOSCEN                            00000003
SOSCGO                            00000003
SOSCRUN                           00000006
SP0                               00000000
SP1                               00000001
SP2                               00000002
SP3                               00000003
SP4                               00000004
SPBRG                             00000FAF
SPBRG1                            00000FAF
SPBRGH                            00000FB0
SPBRGH1                           00000FB0
SPEN                              00000007
SPLLMULT                          00000007
SRCLK0                            00000004
SRCLK1                            00000005
SRCLK2                            00000006
SRCON0                            00000F58
SRCON1                            00000F57
SREN                              00000005
SRLEN                             00000007
SRNQEN                            00000002
SRPR                              00000000
SRPS                              00000001
SRQEN                             00000003
SRRC1E                            00000000
SRRC2E                            00000001
SRRCKE                            00000002
SRRPE                             00000003
SRSC1E                            00000004
SRSC2E                            00000005
SRSCKE                            00000006
SRSPE                             00000007
SSP1ADD                           00000FC8
SSP1ADD0                          00000000
SSP1ADD1                          00000001
SSP1ADD2                          00000002
SSP1ADD3                          00000003
SSP1ADD4                          00000004
SSP1ADD5                          00000005
SSP1ADD6                          00000006
SSP1ADD7                          00000007
SSP1BUF                           00000FC9
SSP1CON                           00000FC6
SSP1CON1                          00000FC6
SSP1CON2                          00000FC5
SSP1CON3                          00000FCB
SSP1IE                            00000003
SSP1IF                            00000003
SSP1IP                            00000003
SSP1MD                            00000006
MPASM  5.51                          DEMO.ASM   3-23-2016  21:08:21         PAGE 105


SYMBOL TABLE
  LABEL                             VALUE 

SSP1MSK                           00000FCA
SSP1MSK0                          00000000
SSP1MSK1                          00000001
SSP1MSK2                          00000002
SSP1MSK3                          00000003
SSP1MSK4                          00000004
SSP1MSK5                          00000005
SSP1MSK6                          00000006
SSP1MSK7                          00000007
SSP1STAT                          00000FC7
SSPADD                            00000FC8
SSPBUF                            00000FC9
SSPCON                            00000FC6
SSPCON2                           00000FC5
SSPCON3                           00000FCB
SSPEN                             00000005
SSPIE                             00000003
SSPIF                             00000003
SSPIP                             00000003
SSPM0                             00000000
SSPM1                             00000001
SSPM2                             00000002
SSPM3                             00000003
SSPMSK                            00000FCA
SSPOV                             00000006
SSPSTAT                           00000FC7
STALLIE                           00000005
STALLIF                           00000005
STATUS                            00000FD8
STCON                             00000FB5
STEN                              00000007
STIE                              00000007
STIF                              00000007
STIP                              00000007
STKFUL                            00000007
STKOVF                            00000007
STKPTR                            00000FFC
STKUNF                            00000006
STLOCK                            00000003
STMD                              00000004
STOR                              00000001
STR1A                             00000000
STR1B                             00000001
STR1C                             00000002
STR1D                             00000003
STR1SYNC                          00000004
STRA                              00000000
STRB                              00000001
STRC                              00000002
STRD                              00000003
STRSYNC                           00000004
STSRC                             00000004
STUD                              00000006
MPASM  5.51                          DEMO.ASM   3-23-2016  21:08:21         PAGE 106


SYMBOL TABLE
  LABEL                             VALUE 

SUSPND                            00000001
SWDTE                             00000000
SWDTEN                            00000000
SYNC                              00000004
Score                             00000019
Speed                             00000005
Speed.index                       00000011
T08BIT                            00000006
T0CKI                             00000004
T0CON                             00000FD5
T0CS                              00000005
T0IE                              00000005
T0IF                              00000002
T0IP                              00000002
T0PS0                             00000000
T0PS1                             00000001
T0PS2                             00000002
T0SE                              00000004
T13CKI                            00000000
T1CKPS0                           00000004
T1CKPS1                           00000005
T1CON                             00000FCD
T1DONE                            00000003
T1GCON                            00000FCC
T1GGO                             00000003
T1GGO_NOT_DONE                    00000003
T1GGO_NOT_T1DONE                  00000003
T1GPOL                            00000006
T1GSPM                            00000004
T1GSS0                            00000000
T1GSS1                            00000001
T1GTM                             00000005
T1GVAL                            00000002
T1OSCEN                           00000003
T1OSI                             00000001
T1OSO                             00000000
T1RD16                            00000001
T1SOSCEN                          00000003
T1SYNC                            00000002
T2CKPS0                           00000000
T2CKPS1                           00000001
T2CON                             00000FBA
T2OUTPS0                          00000003
T2OUTPS1                          00000004
T2OUTPS2                          00000005
T2OUTPS3                          00000006
T3CKPS0                           00000004
T3CKPS1                           00000005
T3CON                             00000FB1
T3DONE                            00000003
T3GCON                            00000FB4
T3GGO                             00000003
T3GGO_NOT_DONE                    00000003
MPASM  5.51                          DEMO.ASM   3-23-2016  21:08:21         PAGE 107


SYMBOL TABLE
  LABEL                             VALUE 

T3GGO_NOT_T3DONE                  00000003
T3GPOL                            00000006
T3GSPM                            00000004
T3GSS0                            00000000
T3GSS1                            00000001
T3GTM                             00000005
T3GVAL                            00000002
T3OSCEN                           00000003
T3RD16                            00000001
T3SOSCEN                          00000003
T3SYNC                            00000002
TABLAT                            00000FF5
TBLPTR                            00000FF6
TBLPTRH                           00000FF7
TBLPTRL                           00000FF6
TBLPTRU                           00000FF8
TGEN                              00000004
TMR0                              00000FD6
TMR0H                             00000FD7
TMR0IE                            00000005
TMR0IF                            00000002
TMR0IP                            00000002
TMR0L                             00000FD6
TMR0ON                            00000007
TMR1                              00000FCE
TMR1CS0                           00000006
TMR1CS1                           00000007
TMR1GE                            00000007
TMR1GIE                           00000000
TMR1GIF                           00000000
TMR1GIP                           00000000
TMR1H                             00000FCF
TMR1IE                            00000000
TMR1IF                            00000000
TMR1IP                            00000000
TMR1L                             00000FCE
TMR1MD                            00000000
TMR1ON                            00000000
TMR2                              00000FBC
TMR2IE                            00000001
TMR2IF                            00000001
TMR2IP                            00000001
TMR2MD                            00000001
TMR2ON                            00000002
TMR3                              00000FB2
TMR3CS0                           00000006
TMR3CS1                           00000007
TMR3GE                            00000007
TMR3GIE                           00000001
TMR3GIF                           00000001
TMR3GIP                           00000001
TMR3H                             00000FB3
TMR3IE                            00000001
MPASM  5.51                          DEMO.ASM   3-23-2016  21:08:21         PAGE 108


SYMBOL TABLE
  LABEL                             VALUE 

TMR3IF                            00000001
TMR3IP                            00000001
TMR3L                             00000FB2
TMR3MD                            00000002
TMR3ON                            00000000
TO                                00000003
TOS                               00000FFD
TOSH                              00000FFE
TOSL                              00000FFD
TOSU                              00000FFF
TRIGEN                            00000000
TRIGSEL                           00000007
TRISA                             00000F92
TRISA0                            00000000
TRISA1                            00000001
TRISA2                            00000002
TRISA3                            00000003
TRISA4                            00000004
TRISA5                            00000005
TRISA6                            00000006
TRISA7                            00000007
TRISB                             00000F93
TRISB0                            00000000
TRISB1                            00000001
TRISB2                            00000002
TRISB3                            00000003
TRISB4                            00000004
TRISB5                            00000005
TRISB6                            00000006
TRISB7                            00000007
TRISC                             00000F94
TRISC0                            00000000
TRISC1                            00000001
TRISC2                            00000002
TRISC4                            00000004
TRISC5                            00000005
TRISC6                            00000006
TRISC7                            00000007
TRMT                              00000001
TRNIE                             00000003
TRNIF                             00000003
TSEN                              00000003
TSRNG                             00000002
TUN0                              00000000
TUN1                              00000001
TUN2                              00000002
TUN3                              00000003
TUN4                              00000004
TUN5                              00000005
TUN6                              00000006
TX                                00000006
TX1IE                             00000004
TX1IF                             00000004
MPASM  5.51                          DEMO.ASM   3-23-2016  21:08:21         PAGE 109


SYMBOL TABLE
  LABEL                             VALUE 

TX1IP                             00000004
TX9                               00000006
TX9D                              00000000
TXCKP                             00000004
TXEN                              00000005
TXIE                              00000004
TXIF                              00000004
TXIP                              00000004
TXREG                             00000FAD
TXREG1                            00000FAD
TXSTA                             00000FAC
TXSTA1                            00000FAC
Temp.BlockA                       0000000F
Temp.BlockX                       0000000E
Tempw                             00000004
UA                                00000001
UADDR                             00000F63
UART1MD                           00000006
UARTMD                            00000006
UCFG                              00000F62
UCON                              00000F60
UEIE                              00000F66
UEIR                              00000F67
UEP0                              00000F6A
UEP1                              00000F6B
UEP10                             00000F74
UEP11                             00000F75
UEP12                             00000F76
UEP13                             00000F77
UEP14                             00000F78
UEP15                             00000F79
UEP2                              00000F6C
UEP3                              00000F6D
UEP4                              00000F6E
UEP5                              00000F6F
UEP6                              00000F70
UEP7                              00000F71
UEP8                              00000F72
UEP9                              00000F73
UERRIE                            00000001
UERRIF                            00000001
UFRM                              00000F68
UFRMH                             00000F69
UFRML                             00000F68
UIE                               00000F64
UIR                               00000F65
UOEMON                            00000006
UPUEN                             00000004
URSTIE                            00000000
URSTIF                            00000000
USBEN                             00000003
USBIE                             00000002
USBIF                             00000002
MPASM  5.51                          DEMO.ASM   3-23-2016  21:08:21         PAGE 110


SYMBOL TABLE
  LABEL                             VALUE 

USBIP                             00000002
USBMD                             00000005
USTAT                             00000F61
UTEYE                             00000007
UTRDIS                            00000003
Uniform                           00000003
VDIRMAG                           00000007
VREFCON0                          00000F7D
VREFCON1                          00000F7C
VREFCON2                          00000F7B
VREFM                             00000002
VREFP                             00000003
VREGCON                           00000F5A
W                                 00000000
WCOL                              00000007
WDTCON                            00000FD1
WPUB                              00000F85
WPUB0                             00000000
WPUB1                             00000001
WPUB2                             00000002
WPUB3                             00000003
WPUB4                             00000004
WPUB5                             00000005
WPUB6                             00000006
WPUB7                             00000007
WR                                00000001
WREG                              00000FE8
WREN                              00000002
WRERR                             00000003
WUE                               00000001
WhoAmI                            00000015
Xtest                             00000013
Ytest                             00000014
Z                                 00000002
_BOREN_NOSLP_2L                   000000FD
_BOREN_OFF_2L                     000000F9
_BOREN_ON_2L                      000000FB
_BOREN_SBORDIS_2L                 000000FF
_BORV_190_2L                      000000FF
_BORV_220_2L                      000000F7
_BORV_250_2L                      000000EF
_BORV_285_2L                      000000E7
_CCP2MX_RB3_3H                    000000FE
_CCP2MX_RC1_3H                    000000FF
_CFGPLLEN_OFF_1L                  000000FD
_CFGPLLEN_ON_1L                   000000FF
_CONFIG1H                         00300001
_CONFIG1L                         00300000
_CONFIG2H                         00300003
_CONFIG2L                         00300002
_CONFIG3H                         00300005
_CONFIG4L                         00300006
_CONFIG5H                         00300009
MPASM  5.51                          DEMO.ASM   3-23-2016  21:08:21         PAGE 111


SYMBOL TABLE
  LABEL                             VALUE 

_CONFIG5L                         00300008
_CONFIG6H                         0030000B
_CONFIG6L                         0030000A
_CONFIG7H                         0030000D
_CONFIG7L                         0030000C
_CP0_OFF_5L                       000000FF
_CP0_ON_5L                        000000FE
_CP1_OFF_5L                       000000FF
_CP1_ON_5L                        000000FD
_CP2_OFF_5L                       000000FF
_CP2_ON_5L                        000000FB
_CP3_OFF_5L                       000000FF
_CP3_ON_5L                        000000F7
_CPB_OFF_5H                       000000FF
_CPB_ON_5H                        000000BF
_CPD_OFF_5H                       000000FF
_CPD_ON_5H                        0000007F
_CPUDIV_CLKDIV2_1L                000000EF
_CPUDIV_CLKDIV3_1L                000000F7
_CPUDIV_CLKDIV6_1L                000000FF
_CPUDIV_NOCLKDIV_1L               000000E7
_DEBUG_OFF_4L                     000000FF
_DEBUG_ON_4L                      0000007F
_DEVID1                           003FFFFE
_DEVID2                           003FFFFF
_EBTR0_OFF_7L                     000000FF
_EBTR0_ON_7L                      000000FE
_EBTR1_OFF_7L                     000000FF
_EBTR1_ON_7L                      000000FD
_EBTR2_OFF_7L                     000000FF
_EBTR2_ON_7L                      000000FB
_EBTR3_OFF_7L                     000000FF
_EBTR3_ON_7L                      000000F7
_EBTRB_OFF_7H                     000000FF
_EBTRB_ON_7H                      000000BF
_FCMEN_OFF_1H                     000000BF
_FCMEN_ON_1H                      000000FF
_FOSC_ECHCLKO_1H                  000000F4
_FOSC_ECHIO_1H                    000000F5
_FOSC_ECLCLKO_1H                  000000FC
_FOSC_ECLIO_1H                    000000FD
_FOSC_ECMCLKO_1H                  000000FA
_FOSC_ECMIO_1H                    000000FB
_FOSC_HSH_1H                      000000F2
_FOSC_HSM_1H                      000000F3
_FOSC_INTOSCCLKO_1H               000000F9
_FOSC_INTOSCIO_1H                 000000F8
_FOSC_LP_1H                       000000F0
_FOSC_RCCLKO_1H                   000000F6
_FOSC_RCIO_1H                     000000F7
_FOSC_XT_1H                       000000F1
_ICPRT_OFF_4L                     000000DF
_IDLOC0                           00200000
MPASM  5.51                          DEMO.ASM   3-23-2016  21:08:21         PAGE 112


SYMBOL TABLE
  LABEL                             VALUE 

_IDLOC1                           00200001
_IDLOC2                           00200002
_IDLOC3                           00200003
_IDLOC4                           00200004
_IDLOC5                           00200005
_IDLOC6                           00200006
_IDLOC7                           00200007
_IESO_OFF_1H                      0000007F
_IESO_ON_1H                       000000FF
_LS48MHZ_SYS24X4_1L               000000DF
_LS48MHZ_SYS48X8_1L               000000FF
_LVP_OFF_4L                       000000FB
_LVP_ON_4L                        000000FF
_MCLRE_OFF_3H                     0000007F
_MCLRE_ON_3H                      000000FF
_PBADEN_OFF_3H                    000000FD
_PBADEN_ON_3H                     000000FF
_PCLKEN_OFF_1H                    000000DF
_PCLKEN_ON_1H                     000000FF
_PLLSEL_PLL3X_1L                  000000FF
_PLLSEL_PLL4X_1L                  000000FE
_SDOMX_RB3_3H                     000000FF
_SDOMX_RC7_3H                     000000BF
_STVREN_OFF_4L                    000000FE
_STVREN_ON_4L                     000000FF
_T3CMX_RB5_3H                     000000EF
_T3CMX_RC0_3H                     000000FF
_WDTEN_NOSLP_2H                   000000FD
_WDTEN_OFF_2H                     000000FC
_WDTEN_ON_2H                      000000FF
_WDTEN_SWON_2H                    000000FE
_WDTPS_1024_2H                    000000EB
_WDTPS_128_2H                     000000DF
_WDTPS_16384_2H                   000000FB
_WDTPS_16_2H                      000000D3
_WDTPS_1_2H                       000000C3
_WDTPS_2048_2H                    000000EF
_WDTPS_256_2H                     000000E3
_WDTPS_2_2H                       000000C7
_WDTPS_32768_2H                   000000FF
_WDTPS_32_2H                      000000D7
_WDTPS_4096_2H                    000000F3
_WDTPS_4_2H                       000000CB
_WDTPS_512_2H                     000000E7
_WDTPS_64_2H                      000000DB
_WDTPS_8192_2H                    000000F7
_WDTPS_8_2H                       000000CF
_WRT0_OFF_6L                      000000FF
_WRT0_ON_6L                       000000FE
_WRT1_OFF_6L                      000000FF
_WRT1_ON_6L                       000000FD
_WRT2_OFF_6L                      000000FF
_WRT2_ON_6L                       000000FB
MPASM  5.51                          DEMO.ASM   3-23-2016  21:08:21         PAGE 113


SYMBOL TABLE
  LABEL                             VALUE 

_WRT3_OFF_6L                      000000FF
_WRT3_ON_6L                       000000F7
_WRTB_OFF_6H                      000000FF
_WRTB_ON_6H                       000000BF
_WRTC_OFF_6H                      000000FF
_WRTC_ON_6H                       000000DF
_WRTD_OFF_6H                      000000FF
_WRTD_ON_6H                       0000007F
_XINST_OFF_4L                     000000BF
_XINST_ON_4L                      000000FF
__18LF25K50                       00000001
_democode_0144                    00000144
_democode_015A                    0000015A
_democode_016A                    0000016A
_democode_019C                    0000019C
_democode_031A                    0000031A
_democode_0328                    00000328
_democode_0700                    00000700
_democode_0808                    00000808
_democode_084A                    0000084A
_democode_118E                    0000118E
_democode_11E4                    000011E4
_democode_11F4                    000011F4
_nLPBOR_OFF_2L                    000000FF
_nLPBOR_ON_2L                     000000BF
_nPWRTEN_OFF_2L                   000000FF
_nPWRTEN_ON_2L                    000000FE
accelerometer                     00000754
access                            00000000
accscl                            LATB,2
accscl.port                       PORTB,2
accscl.ts                         TRISB,2
accsda                            LATB,4
accsda.port                       PORTB,4
accsda.ts                         TRISB,4
advscore                          000002C0
adxl345                           00000B7E
banked                            00000001
bin2bcd                           00000580
bittab8                           00000764
blocks                            000004F0
case.h1                           000011B4
case.h2                           000011B8
case.i1                           000011A4
case.i2                           000011A0
case.ix                           000011A6
case.l                            000011C4
case.v1                           000011BC
case.v2                           000011C0
charg1                            00001216
charg2                            000015D6
charg3                            00001816
charg4                            00001D56
MPASM  5.51                          DEMO.ASM   3-23-2016  21:08:21         PAGE 114


SYMBOL TABLE
  LABEL                             VALUE 

clear.dice                        00000806
clk                               LATB,1
clockhi                           
clocklo                           
clr.blink                         00000314
clrbuf                            00000458
clrbuf.pause                      0000044C
clrbuf2                           00000452
clrx                              0000045C
comm.i                            000011D8
cont                              00000000
conv.sc                           000002BA
createtable                       000009D6
datahi                            
datalo                            
demo.farm                         00000000
different                         000009CC
display                           00000DA2
div.clip                          00000A2A
div2                              00000ABA
dottable                          000008F8
draw.block                        0000039A
draw2.num                         000007F0
draw4.num                         000007E0
drawdots                          000009F2
drawed.num                        00000800
end.of.drop                       0000026E
findfree                          000008BC
full.line                         000002D6
full.line.blink                   00000280
g.ovf                             000007A2
get.accel                         00000B68
get.ack                           00000D2C
get.block                         0000047E
get.data                          00000D46
gnc.h1                            00000DCC
gnc.h2                            00000E66
gnc.h2.spec                       00000E52
gnc.l                             000010A6
gnc.t                             000006C4
gnc.v1                            00000EFC
gnc.v2                            00000FBE
go.16.blink                       0000028A
go.i.pause                        000011E2
go.pause                          0000118A
go.pr                             00000070
go14txt.h2                        00000EAC
go14txt.v2                        0000100A
go250ms                           0000118C
go44x2                            000009E6
go5txt.l                          000010F2
go9txt.h1                         00000E18
go9txt.t                          000006E2
MPASM  5.51                          DEMO.ASM   3-23-2016  21:08:21         PAGE 115


SYMBOL TABLE
  LABEL                             VALUE 

go9txt.v1                         00000F48
gobinbcd                          00000588
godraw44                          00000A02
got30                             00000D5A
gy521                             00000C10
hold.dice                         00000848
i2c.ack                           00000CE4
i2c.nack                          00000CF8
i2c.start                         00000CB2
i2c.stop                          00000CCC
i2c.tx.w7                         00000CE0
id                                0000008C
ifc                               
ifnc                              
ifnz                              
ifz                               
impossible                        0000024E
inimes                            0000007C
inmask                            00000158
ior.bufer2.buffer                 000003B6
ior.bufer2.buffer3                00000D60
iorbuf                            
iorbuf3                           
is.it.free                        000009B4
keyint                            PORTB,0
keys                              PORTB,6
liqflag                           00000012
liquid.farm                       00000788
loopab2                           00000D4A
mask.16                           00000154
move.bufer.buffer2                000003F8
move.bufer2.buffer                00000402
move.fsr1.fsr2                    0000040A
move2up                           0000002E
moveXleft                         00000950
moveXright                        00000968
moveYback                         00000982
moveYfront                        0000099C
movedn16.l1                       00001110
movedn16.l2                       00001126
movedn16.v11                      00000F82
movedn16.v12                      00000F98
movedn16.v21                      0000106A
movedn16.v22                      00001080
moveleft16.h1                     00000E3A
moveleft16.h2                     00000ED4
moveleft9.t                       00000712
moving.message                    0000068A
new.wait.key.2                    00000178
newrnd                            0000011E
next.char.h1                      00000DC2
next.char.h2                      00000E5C
next.char.l                       0000109C
MPASM  5.51                          DEMO.ASM   3-23-2016  21:08:21         PAGE 116


SYMBOL TABLE
  LABEL                             VALUE 

next.char.t                       000006BC
next.char.v1                      00000EF2
next.char.v2                      00000FB4
next.column.h1                    00000E22
next.column.h2                    00000EBE
next.column.t                     000006EC
next.row.l                        000010FC
next.row.v1                       00000F6E
next.row.v2                       0000104C
no.floor                          0000027A
no.key.1                          000001DA
no.key.2                          000001F4
no.key.3                          00000208
no.lo.test                        000002CA
no.overlap                        0000026A
no.ripple                         000005DE
no.spec.sign                      000011D2
no.speed.inc                      00000112
no1                               000007C2
nomovex                           000008E2
nomovey                           000008F4
nomult8                           00000A58
nonoisex                          00000882
nonoisey                          0000089C
nonum.case                        000011B0
nonum2.case                       000011AE
noovf1                            0000021A
nopatchI                          000001EE
nospec.h1                         00000DFA
nospec.h2                         00000E8E
nospec.l                          000010D4
nospec.v1                         00000F2A
nospec.v2                         00000FEC
not.end                           00000196
not.ovf                           00000868
not.yet                           00000308
notdown                           000001BA
notxt                             00000722
nzblockx                          000004D0
off.loop                          00000318
okx                               00000A78
oky                               00000A98
okz                               00000AB8
on.loop                           00000326
one.byte.map                      00000724
onebit                            
overflow                          000004EC
overlap                           
ovl.found                         00000396
p.sc                              000005B4
pozitx                            00000A6E
pozity                            00000A8E
pozitz                            00000AAE
MPASM  5.51                          DEMO.ASM   3-23-2016  21:08:21         PAGE 117


SYMBOL TABLE
  LABEL                             VALUE 

pressed.new.game                  00000192
print.rom                         0000006E
print.score                       000005AC
print.score.buf                   000005A2
rcf                               
reset.i2c                         00000AEA
rnd                               00000000
rnda.16                           00000AD6
rndarea                           00000ACE
scf                               
sdo                               LATB,3
serialx2                          
shl16                             0000120C
shlbuf                            000011FA
show                              00000208
sladdr                            000000D0
sladdr2                           000000A6
snif.accel                        00000B06
spec.case                         0000113E
spec.not.found                    000011C8
speedtab                          00000560
sr.loop                           000004D2
start.message.h1                  00000DBC
start.message.h2                  00000E58
start.message.l                   00001098
start.message.t                   000006B8
start.message.v1                  00000EEE
start.message.v2                  00000FB0
sync150                           
sync150cond                       000011EE
sync150x8                         
t38                               00000D56
test.keys                         00000014
test.new                          
test.overlap                      00000332
test44dots                        000009BC
tetris                            000000C4
tetris.cont                       000000E6
tetris.farm                       0000019A
tetris.farmw                      000001CC
tx.ascnum                         00000000
tx.byte                           00000000
tx.i2c.ack                        00000D0C
txt.f                             00000744
txt.p                             0000073C
txt.ptr.set                       000006B0
usbv                              PORTC,0
vdd                               LATB,5
wait.22                           00000168
wait.60                           00000142
wait.disp.h1                      00000E28
wait.disp.h2                      00000EC2
wait.disp.l                       000010FE
MPASM  5.51                          DEMO.ASM   3-23-2016  21:08:21         PAGE 118


SYMBOL TABLE
  LABEL                             VALUE 

wait.disp.shlb                    000011FE
wait.disp.t                       000006FE
wait.disp.v1                      00000F70
wait.disp.v2                      00001058
waitacc                           00000778
writreg                           
xx                                00000010
zero.shift                        000004E8

Errors   :     0
Warnings :     1 reported,     0 suppressed
Messages :     1 reported,     0 suppressed

